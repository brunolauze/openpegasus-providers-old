//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2012 DMTF.  All rights reserved.
   [Abstract, Version ( "2.33.0" ), 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "CIM_SettingData is used to represent configuration and and "
       "operational parameters for CIM_ManagedElement instances. There "
       "are a number of different uses of CIM_SettingData supported in "
       "the model today. Additional uses may be defined in the future.\n"
       "Instances of CIM_SettingData may represent Aspects of a "
       "CIM_ManagedElement instance. This is modeled using the "
       "CIM_SettingsDefineState association. CIM_SettingData may be "
       "used to define capabilities when associated to an instance of "
       "CIM_Capabilities through the CIM_SettingsDefineCapabilities "
       "association. \n"
       "Instances of CIM_SettingData may represent different types of "
       "configurations for a CIM_ManagedElement, including persistent "
       "configurations, in progress configuration changes, or "
       "requested configurations. The CIM_ElementSettingData "
       "association is used to model the relationship between a "
       "CIM_SettingData instance and the CIM_ManagedElement for which "
       "it is a configuration. \n"
       "When an instance of CIM_SettingData represents a "
       "configuration, the current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations." )]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of SettingData. "
          "In addition, the user-friendly name can be used as an "
          "index property for a search or query. (Note: The name "
          "does not have to be unique within a namespace.)" )]
   string ElementName;

      [Description ( 
          "Enumeration indicating the type of setting. 0 \"Not "
          "Changeable - Persistent\" indicates the instance of "
          "SettingData represents primordial settings and shall not "
          "be modifiable. 1 \"Changeable - Transient\" indicates "
          "the SettingData represents modifiable settings that are "
          "not persisted. Establishing persistent settings from "
          "transient settings may be supported. 2 \"Changeable - "
          "Persistent\" indicates the SettingData represents a "
          "persistent configuration that may be modified. 3 \"Not "
          "Changeable - Transient\" indicates the SettingData "
          "represents a snapshot of the settings of the associated "
          "ManagedElement and is not persistent." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Not Changeable - Persistent", 
          "Changeable - Transient", "Changeable - Persistent", 
          "Not Changeable - Transient" }]
   uint16 ChangeableType;

      [Description ( 
          "An instance of CIM_SettingData may correspond to a "
          "well-known configuration that exists for an associated "
          "CIM_ManagedElement. If the ConfigurationName property is "
          "non-NULL, the instance of CIM_SettingData shall "
          "correspond to a well-known configuration for a Managed "
          "Element, the value of the ConfigurationName property "
          "shall be the name of the configuration, and the "
          "ChangeableType property shall have the value 0 or 2. A "
          "value of NULL for the ConfigurationName property shall "
          "mean that the instance of CIM_SettingData does not "
          "correspond to a well-known configuration for a Managed "
          "Element or that this information is unknown." )]
   string ConfigurationName;


};


// Copyright (c) 2012 DMTF.  All rights reserved.
   [Version ( "2.34.0" ), 
    UMLPackagePath ( "CIM::Network::IP" ), 
    Description ( 
       "This class and its sub-classes represents Internet Protocol "
       "(IP) related settings. When used as an accumulation of "
       "settings (AddressOrigin set to 11 \"cumulative "
       "configuration\"), this SettingData instance is the aggregation "
       "point identifying an IP configuration. Multiple IP "
       "configurations could exist for a target. Each configuration is "
       "represented with an instance of IPAssignmentSettingData. The "
       "details of the IP configuration are defined by instances of "
       "sub-classes of this class (i.e. StaticIPAssignmentSettingData, "
       "DHCPSettingData, DNSSettingData). These instances are "
       "associated with the IPAssignmentSettingData instance using the "
       "OrderedComponent or ConcreteComponent associations. For "
       "example, a static IP configuration would be represented by an "
       "instance of IPAssignmentSettingData and an instance of "
       "StaticIPAssignmentSettingData associated via an instance of "
       "ConcreteComponent. A static IP configuration including DNS "
       "would be modeled using an instance of IPAssignmentSettingData, "
       "DNSSettingData, and StaticIPAssignmentSettingData. The "
       "DNSSettingData and StaticIPAssignmentSettingData instance "
       "would be associated with the IPAssignmentSettingData using "
       "instances of ConcreteComponent." )]
class CIM_IPAssignmentSettingData : CIM_SettingData {

      [Description ( 
          "AddressOrigin identifies the method by which the IP "
          "Address, Subnet Mask for IPv4 or Prefix Length for IPv6, "
          "and Gateway shall be assigned to the IPProtocolEndpoint. \n"
          "A value of 3 \"Static\" shall indicate the values will "
          "be assigned manually. \n"
          "A value of 4 \"DHCP\" shall indicate the values will be "
          "assigned utilizing the Dynamic Host Configuration "
          "Protocol. See RFC 2131 and related. \n"
          "A value of 5 \"BOOTP\" shall indicate the values will be "
          "assigned utilizing BOOTP. See RFC 951 and related. \n"
          "A value of 6 \"IPv4 Link Local\" shall indicate the "
          "values will be assigned using the IPv4 Link Local "
          "protocol. See RFC 3927.\n"
          "A value of 7 \"DHCPv6\" shall indicate the values will "
          "be assigned using DHCPv6. See RFC 3315. \n"
          "A value of 8 \"IPv6 AutoConfig \" shall indicate the "
          "values will be assigned using the IPv6 AutoConfig. See "
          "RFC 4862. \n"
          "A value of 9 \"Stateless\" shall indicate Stateless will "
          "be assigned. \n"
          "A value of 10 \"Link Local\" shall indicate Link Local "
          "values will be assigned.\n"
          "A value of 11 \"cumulative configuration\" shall "
          "indicate an accumulation of settings is used. This "
          "instance of CIM_IPAssignmentSettingData should be "
          "associated with other instances of "
          "CIM_IPAssignmentSettingData or its subclasses to "
          "represent the detailed IP settings." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "..", "32768.." }, 
       Values { "Unknown", "Other", "Not Applicable", "Static", 
          "DHCP", "BOOTP", "IPv4 Link Local", "DHCPv6", 
          "IPv6AutoConfig", "Stateless", "Link Local", 
          "cumulative configuration", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 AddressOrigin = 0;

      [Description ( "An enumeration that describes the IP version." ), 
       ValueMap { "0", "..", "4096", "4097", "32768.." }, 
       Values { "Unknown", "DMTF Reserved", "IPv4", "IPv6", 
          "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_ProtocolEndpoint.ProtocolIFType" }]
   uint16 ProtocolIFType;


};


// Copyright (c) 2010 DMTF.  All rights reserved.
   [Version ( "2.27.0" ), 
    UMLPackagePath ( "CIM::Network::IP" ), 
    Description ( 
       "CIM_StaticIPAssignmentSettingData defines a basic IP "
       "configuration which could be statically assigned to an "
       "IPProtocolEndpoint. This class defines a partial "
       "configuration. Instances are aggregated into an instance of "
       "IPAssignmentSettingData which defines a full configuration." )]
class CIM_StaticIPAssignmentSettingData : CIM_IPAssignmentSettingData {

      [Override ( "AddressOrigin" ), 
       Description ( 
          "AddressOrigin identifies the method by which the IP "
          "Address, Subnet Mask, and Gateway were assigned to the "
          "IPProtocolEndpoint. A value of 2 indicates that the "
          "application of the IPAssignmentSettingData instance does "
          "not affect these properties." ), 
       ValueMap { "0..2", "3", "4..32767", "32768.." }, 
       Values { "DMTF Reserved", "Static", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 AddressOrigin = 3;

      [Write, Description ( 
          "The IPv4 address that will be assigned to the ProtocolEndpoint."
           )]
   string IPv4Address;

      [Write, Description ( 
          "The subnet mask for the IPv4 address of this "
          "ProtocolEndpoint, if one is defined." )]
   string SubnetMask;

      [Write, Description ( 
          "The IP v4 address of the default gateway." )]
   string GatewayIPv4Address;

      [Write, Description ( 
          "GatewayIPv6Address is used to identify the IPv6 address "
          "of the Gateway" )]
   string GatewayIPv6Address;

      [Write, Description ( 
          "The IPv6 address that this ProtocolEndpoint represents." ), 
       ModelCorrespondence { 
          "CIM_StaticIPAssignmentSettingData.IPv6AddressType", 
          "CIM_StaticIPAssignmentSettingData.IPv6SubnetPrefixLength" }]
   string IPv6Address;

      [Write, Description ( 
          "IPv6AddressType identifies the type of address found in "
          "the IPv6Address property of this class. The values of "
          "this property shall be interpreted according to RFC4291, "
          "Section 2.4" ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "..", 
          "32768..65535" }, 
       Values { "Unspecified", "Loopback", "Multicast", 
          "Link Local Unicast", "Global Unicast", 
          "Embedded IPv4 Address", "Site Local Unicast", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_StaticIPAssignmentSettingData.IPv6AddressType" }]
   uint16 IPv6AddressType;

      [Write, Description ( 
          "IPv6SubnetPrefixLength is used to identify the prefix "
          "length of the IPv6Address property that is used to "
          "specify a subnet" ), 
       ModelCorrespondence { 
          "CIM_StaticIPAssignmentSettingData.IPv6Address" }]
   uint16 IPv6SubnetPrefixLength;


};



class UNIX_StaticIPAssignmentSettingData : CIM_StaticIPAssignmentSettingData
{

};

