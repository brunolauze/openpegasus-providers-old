//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Statistics" ), 
    Description ( 
       "CIM_StatisticalData is a root class for any arbitrary "
       "collection of statistical data and/or metrics applicable to "
       "one or more ManagedElements. These statistics MUST represent "
       "the most recent observations and MUST NOT be provided if "
       "irrelevant or stale. Note that this class uses a simplified "
       "naming/identity algorithm as compared to "
       "CIM_StatisticalInformation." )]
class CIM_StatisticalData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user friendly name for this instance of "
          "StatisticalData. In addition, the user friendly name can "
          "be used as a index property for a search of query. "
          "(Note: Name does not have to be unique within a "
          "namespace.)" )]
   string ElementName;

      [Description ( 
          "The time, relative to managed element where the "
          "statistic was collected, when the first measurement was "
          "taken. If the statistic is reset, the StartStatisticTime "
          "is the time when the reset was performed." )]
   datetime StartStatisticTime;

      [Description ( 
          "The time the most recent measurement was taken, relative "
          "to the managed element where the statistic was "
          "collected." )]
   datetime StatisticTime;

      [Description ( 
          "Some statistics are sampled at consistent time "
          "intervals. This property provides the sample interval so "
          "that client applications can determine the minimum time "
          "that new statistics should be pulled. If the statistics "
          "are not sampled at consistent time intervals, this "
          "property must be set to a zero time interval." )]
   datetime SampleInterval = "00000000000000.000000:000";


      [Description ( 
          "Method to reset one or more of the instance\'s "
          "statistics. The method takes one parameter as input - an "
          "array of strings indicating which statistics to reset. "
          "If all the statistics in the instance should be reset, "
          "the first element of the array MUST be set to \"All\" or "
          "\"ALL\". If one or more individual statistics should be "
          "reset, the corresponding property names are entered into "
          "the elements of the array. \n"
          "The method returns 0 if successful, 1 if not supported, "
          "and any other value if an error occurred. A method is "
          "specified so that the StatisticalInformation\'s "
          "provider/ instrumentation, which calculates the "
          "statistics, can reset its internal processing, counters, "
          "etc. \n"
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 ResetSelectedStats(
         [IN, Description ( 
             "Array of strings indicating which statistics to reset."
              )]
      string SelectedStatistics[]);

};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::StorageStatistics" ), 
    Description ( 
       "A subclass of StatisticalData which identifies individual "
       "statistics for an element of a block storage system. This "
       "class defines the metrics that MAY be kept for managed "
       "elements of the system." )]
class CIM_BlockStorageStatisticalData : CIM_StatisticalData {

      [Required, Description ( 
          "Defines the role that the element played for which this "
          "statistics record was collected. If the metered element "
          "is a system or a component of a system associated to a "
          "RegisteredProfile, then that profile may provide a more "
          "specialized definition and additional usage information "
          "for this property. \n"
          "Generally, the ElementTypes defined here have the "
          "following meaning in the context of this class: 2, "
          "\"Computer System\": Cumulative statistics for the "
          "storage system. In the case of a complex system with "
          "multiple component Computer Systems, these are the "
          "statistics for the top-level aggregate Computer System. "
          "3, \"Front-end Computer System\": Statistics for a "
          "component computer system that communicate with systems "
          "that initiate IO requests. 4, \"Peer Computer System\": "
          "Statistics for a component computer system that "
          "communicates with peer storage systems e.g. to provide "
          "remote mirroring of a volume. 5, \"Back-end Computer "
          "System\": Statistics for a component computer system "
          "that communicates with back-end storage. 6, \"Front-end "
          "Port\": Statistics for a port that communicates with "
          "systems that initiate IO requests. 7, \"Back-end Port\": "
          "Statistics for a port that initiates IO requests to "
          "storage devices. 8, \"Volume\": Statistics for an "
          "exposable storage extent, such as a StorageVolume or "
          "LogicalDisk. 9, \"Extent\": Statistics for an "
          "intermediate storage extent, i.e. an extent that is "
          "neither a volume or a disk. 10, \"Disk Drive: Statistics "
          "for a StorageExtent that is associated to a DiskDrive "
          "through the MediaPresent association. 11, \"Arbitrary "
          "LUs\": Statistics that derive from access to Logical "
          "Units that are NOT StorageVolumes (e.g., controller "
          "commands). 12, \"Remote Replica Group\": Statistics for "
          "control IOs between an array and a remote mirror across "
          "a Network. Note that statistics for the actual movement "
          "of data to the remote mirror are attributed to the "
          "targeted StorageVolume (or LogicalDisk). Note that a "
          "particular element could be associated to multiple "
          "BlockStorageStatisticalData instances if it had multiple "
          "roles. For example, a storage array could contain "
          "redundant component computer systems that communicate "
          "both with hosts on the front end and disks on the back "
          "end. Such a device could have one "
          "BlockStorageStatisticalData instance where ElementType=3 "
          "and another instance where ElementType=5." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "0x8000.." }, 
       Values { "Computer System", "Front-end Computer System", 
          "Peer Computer System", "Back-end Computer System", 
          "Front-end Port", "Back-end Port", "Volume", "Extent", 
          "Disk Drive", "Arbitrary LUs", "Remote Replica Group", 
          "DMTF Reserved", "Vendor Specific" }]
   uint16 ElementType;

      [Description ( "The cumulative count of I/Os for the object." ), 
       Counter]
   uint64 TotalIOs;

      [Description ( 
          "The cumulative count of data transferred in Kbytes "
          "(1024bytes = 1KByte)." ), 
       Units ( "KiloBytes" ), 
       Counter, PUnit ( "byte * 10^3" )]
   uint64 KBytesTransferred;

      [Description ( 
          "The cumulative count of data written in Kbytes "
          "(1024bytes = 1KByte)." ), 
       Units ( "KiloBytes" ), 
       Counter, PUnit ( "byte * 10^3" )]
   uint64 KBytesWritten;

      [Description ( 
          "The cumulative elapsed I/O time (number of Clock Tick "
          "Intervals) for all I/Os as defined in \'Total I/Os\'. "
          "I/O response time is added to this counter at the "
          "completion of each measured I/O using ClockTickInterval "
          "units. This value can be divided by number of IOs to "
          "obtain an average response time." ), 
       Counter]
   uint64 IOTimeCounter;

      [Description ( "The cumulative count of all reads." ), 
       Counter]
   uint64 ReadIOs;

      [Description ( 
          "The cumulative count of all read cache hits (Reads from Cache)."
           ), 
       Counter]
   uint64 ReadHitIOs;

      [Description ( 
          "The cumulative elapsed time for all Read I/Os for all "
          "cumulative Read I/Os." ), 
       Counter]
   uint64 ReadIOTimeCounter;

      [Description ( 
          "The cumulative elapsed time for all Read I/Os read from "
          "cache for all cumulative Read I/Os." ), 
       Counter]
   uint64 ReadHitIOTimeCounter;

      [Description ( 
          "The cumulative count of data read in Kbytes (1024bytes = 1KByte)."
           ), 
       Units ( "KiloBytes" ), 
       Counter, PUnit ( "byte * 10^3" )]
   uint64 KBytesRead;

      [Description ( "The cumulative count of all writes." ), 
       Counter]
   uint64 WriteIOs;

      [Description ( 
          "The cumulative count of Write Cache Hits (Writes that "
          "went directly to Cache)." ), 
       Counter]
   uint64 WriteHitIOs;

      [Description ( 
          "The cumulative elapsed time for all Write I/Os for all "
          "cumulative Writes." ), 
       Counter]
   uint64 WriteIOTimeCounter;

      [Description ( 
          "The cumulative elapsed time using ClockTickInterval "
          "units for all Write I/Os written to cache for all "
          "cumulative Write I/Os." ), 
       Counter]
   uint64 WriteHitIOTimeCounter;

      [Description ( 
          "The cumulative elapsed idle time using ClockTickInterval "
          "units (Cumulative Number of Time Units for all idle time "
          "in the array)." ), 
       Counter]
   uint64 IdleTimeCounter;

      [Description ( 
          "The cumulative count of all disk maintenance operations "
          "(SCSI commands such as: Verify, skip-mask, XOR read, XOR "
          "write-read, etc).This is needed to understand the load "
          "on the disks that may interfere with normal read and "
          "write operations." ), 
       Counter]
   uint64 MaintOp;

      [Description ( 
          "The cumulative elapsed disk mainenance time. "
          "Maintainance response time is added to this counter at "
          "the completion of each measured maintenance operation "
          "using ClockTickInterval units." ), 
       Counter]
   uint64 MaintTimeCounter;


};



class UNIX_BlockStorageStatisticalData : CIM_BlockStorageStatisticalData
{

};

