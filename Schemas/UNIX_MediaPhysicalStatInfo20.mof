//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Statistics" ), 
    Description ( 
       "CIM_StatisticalInformation is a root class for any arbitrary "
       "collection of statistical data and/or metrics applicable to "
       "one or more ManagedSystemElements. Note that the CIM_ "
       "StatisticalData class uses a simplified naming/identity "
       "algorithm as compared to this class. StatisticalInformation is "
       "not deprecated since its naming algorithm is still in use in "
       "various implementations." )]
class CIM_StatisticalInformation : CIM_ManagedElement {

      [Description ( 
          "The Name property defines the label by which the "
          "statistic or metric is known. When subclassed, the "
          "property can be overridden to be a Key property." ), 
       MaxLen ( 256 )]
   string Name;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Statistics" ), 
    Description ( 
       "Statistical information associated with a PhysicalElement or "
       "one of its subclasses." )]
class CIM_PhysicalStatisticalInformation : CIM_StatisticalInformation {

      [Key, Description ( "The scoping Element\'s CreationClassName." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_PhysicalElement.CreationClassName" )]
   string PhysicalCreationClassName;

      [Key, Description ( "The scoping Element\'s identifying Tag." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_PhysicalElement.Tag" )]
   string Tag;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this "
          "property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), 
       Description ( 
          "The Name property, inherited from "
          "StatisticalInformation, serves as part of the object "
          "key." ), 
       MaxLen ( 256 )]
   string Name;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "CIM_MediaPhysicalStatData" }, 
    Version ( "2.7.0" ), 
    UMLPackagePath ( "CIM::Physical::StoragePackage" ), 
    Description ( 
       "Statistics related to reading physical labels and picks/puts "
       "at a specific StorageMediaLocation, or for a specific piece of "
       "PhysicalMedia. Although the same class is used to represent "
       "this data, at the instance level the object holds information "
       "for the Location (independent of the Media), OR for the Media "
       "(independent of its StorageMediaLocation). This class is "
       "deprecated in lieu of MediaPhysicalStatData, to take advantage "
       "of the simplified key structure defined there." )]
class CIM_MediaPhysicalStatInfo : CIM_PhysicalStatisticalInformation {

      [Deprecated { "CIM_MediaPhysicalStatData.ScanSuccesses" }, 
       Description ( 
          "The number of successful physical label scans." ), 
       Counter]
   uint64 ScanSuccesses;

      [Deprecated { "CIM_MediaPhysicalStatData.ScanFailures" }, 
       Description ( "The number of failed physical label scans." ), 
       Counter]
   uint64 ScanFailures;

      [Deprecated { "CIM_MediaPhysicalStatData.ScanRetries" }, 
       Description ( "The number of retried physical label scans." ), 
       Counter]
   uint64 ScanRetries;

      [Deprecated { "CIM_MediaPhysicalStatData.PickSuccesses" }, 
       Description ( "The number of successful picks." ), 
       Counter]
   uint64 PickSuccesses;

      [Deprecated { "CIM_MediaPhysicalStatData.PickFailures" }, 
       Description ( "The number of failed picks." ), 
       Counter]
   uint64 PickFailures;

      [Deprecated { "CIM_MediaPhysicalStatData.PickRetries" }, 
       Description ( "The number of retried picks." ), 
       Counter]
   uint64 PickRetries;

      [Deprecated { "CIM_MediaPhysicalStatData.PutSuccesses" }, 
       Description ( "The number of successful puts." ), 
       Counter]
   uint64 PutSuccesses;

      [Deprecated { "CIM_MediaPhysicalStatData.PutFailures" }, 
       Description ( "The number of failed puts." ), 
       Counter]
   uint64 PutFailures;

      [Deprecated { "CIM_MediaPhysicalStatData.PutRetries" }, 
       Description ( "The number of retried puts." ), 
       Counter]
   uint64 PutRetries;


      [Deprecated { "CIM_StatisticalData.ResetSelectedStats" }, 
       Description ( 
          "Method to reset the statistical counters. The method "
          "takes one parameter as input - an integer indicating "
          "which counter to reset. For this input parameter, 0 "
          "indicates all, 1-3 reset the scan-related counters, 4-6 "
          "reset the \'pick\'-related counters, and 7-9 reset the "
          "\'put\'-related counters. The method returns 0 if "
          "successful, 1 if not supported, and any other value if "
          "an error occurred. A method is specified so that the "
          "Element\'s instrumentation can also reset its internal "
          "processing and counters. The set of possible return "
          "codes should be specified in a ValueMap qualifier on the "
          "method. The strings to which the ValueMap contents are "
          "\'translated\' should be specified as a Values array "
          "qualifier on the method." )]
   uint32 ResetCounter(
         [IN, Description ( "The counter to reset." ), 
          ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", 
             "9" }, 
          Values { "All", "Scan Successes", "Scan Failures", 
             "Scan Retries", "Pick Successes", "Pick Failures", 
             "Pick Retries", "Put Successes", "Put Failures", 
             "Put Retries" }]
      uint16 SelectedCounter);

};



class UNIX_MediaPhysicalStatInfo : CIM_MediaPhysicalStatInfo
{

};

