//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::User::Credential" ), 
    Description ( 
       "Subclasses of CIM_Credential define materials, information or "
       "other data which are used to establish identity. Generally, "
       "there may be some shared information, or credential material "
       "which is used to identify and authenticate an entity in the "
       "process of gaining access to, or permission to use, resources. "
       "Such credential material may be used to authenticate an "
       "entity\'s identity initially, as done by a "
       "CIM_AuthenticationService, and additionally on an ongoing "
       "basis (for example, during the course of a connection or other "
       "security association), as proof that each received message or "
       "communication came from a valid \'user\' of that credential "
       "material." )]
class CIM_Credential : CIM_ManagedElement {

      [Description ( 
          "The date and time when the credential was issued. Use a "
          "value of all \'00000101000000.000000+000\', (midnight, "
          "January 1, 1 BCE at coordinated universal time +0 "
          "minutes), if this information is not applicable. On "
          "CreateInstance, if this property is unspecified, or set "
          "to NULL, then current time is assumed." )]
   datetime Issued;

      [Description ( 
          "The date and time when the credential expires (and is "
          "not appropriate for use for authentication/ "
          "authorization). If this information is not applicable, "
          "Use a value of \'99991231235959.999999+999\', (1 "
          "microsecond before midnight, December 31, 9999 CE, at "
          "coordinated universal time + 999 minutes). \n"
          "On CreateInstance, if this property is unspecified, or "
          "set to NULL, then a value of \'99991231235959.999999+999\' "
          "is assumed. Note that this property does not define how "
          "the expiration is set - but that there IS an expiration. "
          "The property may be set to either a specific date/time "
          "or an interval (calculated from the Issued datetime). "
          "For example, for Certificate Authority-signed public "
          "key, the expiration is determined by the CA. Another "
          "example is a voice mail password that expires 60 days "
          "after it is set/issued." )]
   datetime Expires;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::User::PublicKey" ), 
    Description ( 
       "A SignedCredential is a credential that is cryptographically "
       "signed by a trusted Certificate Authority (CA) or the owner of "
       "the credential itself." )]
class CIM_SignedCredential : CIM_Credential {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority. (This is "
          "similar to the <Schema Name>_<Class Name> structure of "
          "Schema class names.) In addition, to ensure uniqueness, "
          "<OrgID> MUST NOT contain a colon (\':\'). When using "
          "this algorithm, the first colon to appear in InstanceID "
          "MUST appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the organizational entity and "
          "SHOULD not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Description ( "Issuer name who signed the credential." )]
   string IssuerName;

      [Description ( 
          "Certificate authority\'s or credential owner\'s "
          "identifying digest that confers validity on a signed "
          "credential." ), 
       OctetString]
   uint8 Signature[];

      [Description ( 
          "Algorithm used to generate the signature. The algorithms "
          "specified are described in RFC3279. If the value of this "
          "property is 1, \"Other\", then the "
          "OtherSignatureAlgorithm shall be non NULL, non blank "
          "string" ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20..32767", "32768..65535" }, 
       Values { "Other", "SHA1withDSA", "SHA1withECDSA", 
          "SHA224withECDSA", "SHA256withECDSA", "SHA384withECDSA", 
          "SHA512withECDSA", "GOST3411withGOST3410", 
          "GOST3411withECGOST3410", "MD2withRSA", "MD5withRSA", 
          "SHA1withRSA", "SHA224withRSA", "SHA256withRSA", 
          "SHA384withRSA", "SHA512withRSA", "RIPEMD160withRSA", 
          "RIPEMD128withRSA", "RIPEMD256withRSA", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 SignatureAlgorithm;

      [Description ( 
          "A string describing the signature algorithm when the "
          "SignatureAlgorithm property has the value 1, \"Other\"." )]
   string OtherSignatureAlgorithm;

      [Description ( "Object ID of the signature algorithm." )]
   string SignatureAlgorithmOID;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.29.0" ), 
    ClassConstraint { 
       "/* The constraints below aim to efficiently */  /* represent a singular OctetString. Each of the properties*/  /* is a single encoded string, thus only the first element */  /* needs to be populated. */ inv:self.TBSCertificate->size()<=1" }, 
    UMLPackagePath ( "CIM::User::PublicKey" ), 
    Description ( 
       "CIM_X509Infrastructure describes Internet X509 Public Key "
       "Infrastructure (PKI) standard based properties used by "
       "certificates and certificate revocation lists. For more "
       "information on the Internet X509 PKI refer to the RFC 3280." )]
class CIM_X509Infrastructure : CIM_SignedCredential {

      [Description ( "Version of X.509." ), 
       ValueMap { "0", "2", "3", "4", "..", "32768..65535" }, 
       Values { "Unknown", "v1", "v2", "v3", "DMTF Reserved", 
          "Vendor Specified" }, 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.1", 
          "RFC3280.IETF|Section 5.1.2.1" }]
   uint16 Version;

      [Description ( 
          "The To Be Signed (TBS) certificate is used as an input "
          "data to the signature algorithm when the certificate is "
          "signed or verified. Only the first element of the array "
          "property shall be populated." ), 
       OctetString, MappingStrings { "RFC3280.IETF|Section 4.1.2", 
          "RFC3280.IETF|Section 5.1.2" }]
   string TBSCertificate[];

      [Description ( 
          "Digital signature algorithm that verifies data integrity "
          "by creating a 128-bit message digest or fingerprint. The "
          "fingerprint is unique to the input data and contains the "
          "binary hash of the encoded X509 object such as encoded "
          "certificate or CRL." ), 
       OctetString]
   string MD5Fingerprint[];

      [Description ( 
          "Secure hashing algorithm, a cryptographic message digest "
          "algorithm used to verify data integrity by making "
          "replication of the fingerprint. The fingerprint is "
          "unique to the input data and contains the binary hash of "
          "the encoded X509 object such as encoded certificate or "
          "CRL." ), 
       OctetString]
   string SHA1Fingerprint[];

      [Description ( 
          "The algorithm used for hashing the encoded X509 "
          "certificate\'s or CRL\'s message digest represented in "
          "the corresponding element of the FingerPrint array." ), 
       ValueMap { "2", "3", "..", "32768..65535" }, 
       Values { "MD5", "SHA1", "DMTF Reserved", "Vendor Specified" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_X509Infrastructure.Fingerprints" }]
   uint16 FingerprintDigestAlgorithms[];

      [Description ( 
          "Fingerprints property represents the message digests of "
          "the encoded X509 certificate or CRL that uniquely "
          "identify it and can be used for the integrity "
          "verification of the X509 certificate or CRL. Fingerprint "
          "is the hash of the encoded X509 certificate or CRL that "
          "is based on the algorithm described in the corresponding "
          "element of the FingerprintDigestAlgorithms array." ), 
       OctetString, ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_X509Infrastructure.FingerprintDigestAlgorithms" }]
   string Fingerprints[];

      [Override ( "IssuerName" ), 
       Description ( 
          "Issuer represents the information about the issuer of "
          "the CRL. The Issuer property shall contain information "
          "as required by section 4.1.2.4 of RFC 3280 and shall be "
          "formatted based on RFC 4514. An example of the value of "
          "the Subject parameter could be \"CN=Marshall T. Rose, "
          "O=Dover Beach Consulting, OU=Sales, L=Santa Clara, "
          "ST=California, C=US\"." ), 
       DN, MappingStrings { "RFC3280.IETF|Section 4.1.2.4", 
          "RFC3280.IETF|Section 5.1.2.3" }]
   string IssuerName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.29.0" ), 
    ClassConstraint { 
       "/* The constraints below aim to efficiently */ /* represent a singular OctetString. Each of the properties*/  /* is a single encoded stringthus only the first element */  /* needs to be populated. */ inv:self.PublicKey->size()<=1 and self.SerialNumber->size()<=1 and self.EncodedCertificate->size()<=1" }, 
    UMLPackagePath ( "CIM::User::PublicKey" ), 
    Description ( 
       "CIM_X509Certificate describes Internet X509 Public Key "
       "Infrastructure (PKI) standard based certificates. The "
       "certificates are signed by a trusted Certificate Authority "
       "(CA) or by the owner of the certificate and issued to an "
       "authenticated entity (e.g., human user, service, etc.) called "
       "the Subject in the certificate. The public key in the "
       "certificate is cryptographically related to a private key that "
       "is held and kept private by the authenticated Subject. The "
       "certificate and its related private key can then be used for "
       "establishing trust relationships and securing communications "
       "with the Subject. Refer to the Internet X.509 PKI standard "
       "(RFC 3280) for more information." )]
class CIM_X509Certificate : CIM_X509Infrastructure {

      [Description ( 
          "Distinguished name identifying the subject of the "
          "certificate.Subject shall contain information as "
          "required by section 4.1.2.6 of RFC 3280 and shall be "
          "formatted based on RFC 4514." ), 
       DN, MappingStrings { "RFC3280.IETF|Section 4.1.2.6" }]
   string Subject;

      [Description ( 
          "Alternate subject identifier for the Certificate." ), 
       MappingStrings { "RFC3280.IETF|Section 4.2.1.7" }]
   string AltSubject;

      [Description ( 
          "The DER-encoded raw public key that belongs to the "
          "subject the certificate vouches for.Only the first "
          "element of PublicKey array property shall be populated "
          "with DER encoded raw public key octet string." ), 
       OctetString, MappingStrings { "RFC3280.IETF|Section 4.1.2.7" }]
   string PublicKey[];

      [Description ( 
          "The length of the public key represented in the "
          "PublicKey property." ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.7" }]
   uint16 PublicKeySize;

      [Description ( 
          "IsValid represents whether the certificate is currently "
          "valid. When the certificate is revoked or expired or put "
          "on hold or invalidated for any reason IsValid shall be "
          "set to FALSE." )]
   boolean IsValid;

      [Description ( 
          "Unique number that identifies this certificate.Only the "
          "first element of the array property shall be populated." ), 
       OctetString, MappingStrings { "RFC3280.IETF|Section 4.1.2.2" }]
   string SerialNumber[];

      [Description ( "Public key algorithm." ), 
       ValueMap { "0", "2", "3", "4", "5..32767", "32768..65535" }, 
       Values { "Unknown", "RSA", "DSA", "ECDSA", "DMTF Reserved", 
          "Vendor Specified" }, 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.7" }]
   uint16 PublicKeyAlgorithm;

      [Description ( 
          "Key usage defines the purpose of the key. Key usage "
          "could include digital signing, key agreement, "
          "certificate signing, and more. The key usage is an "
          "extension to the X.509 specification." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8..32767", 
          "32768..65535" }, 
       Values { "Unknown", "Digital Signature", "Non Repudiation", 
          "Key Encipherment", "Data Encipherment", "Key Agreement", 
          "Key Certificate Signature", "DMTF Reserved", 
          "Vendor Specified" }, 
       MappingStrings { "RFC3280.IETF|Section 4.2.1.3" }]
   uint16 KeyUsage[];

      [Description ( 
          "This extension indicates one or more purposes for which "
          "the certified public key may be used, in addition to or "
          "in place of the basic purposes indicated in the key "
          "usage extension." ), 
       MappingStrings { "RFC3280.IETF|Section 4.2.1.13" }]
   string ExtendedKeyUsage[];

      [Description ( 
          "An X.509 certificate may contain an optional extension "
          "that identifies whether the subject of the certificate "
          "is a certificate authority (CA). If the subject is a CA, "
          "this property defines the number of certificates that "
          "may follow this certificate in a certification chain." ), 
       MappingStrings { "RFC3280.IETF|Section 4.2.1.10" }]
   uint16 PathLengthConstraint;

      [Description ( 
          "The full content of the certificate in binary form.Only "
          "the first element of the array property shall be "
          "populated." ), 
       OctetString, MappingStrings { "RFC3280.IETF|Section 4" }]
   string EncodedCertificate[];

      [Description ( 
          "Extension identifier array for additional attributes "
          "associated with the certificate. The corresponding array "
          "element in the IsCritical property denotes whether the "
          "extension is critical. The corresponding array element "
          "in the ExtensionValue property contains the value of the "
          "extension attribute." ), 
       ArrayType ( "Indexed" ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.9", 
          "RFC3280.IETF|Section 4.2" }, 
       ModelCorrespondence { "CIM_X509Certificate.IsCritical", 
          "CIM_X509Certificate.ExtensionValue" }]
   string ExtensionID[];

      [Description ( 
          "Certificate extension attribute value array. The "
          "corresponding array element in the ExtensionID property "
          "contains the identifier of the certificate extension "
          "attribute. The corresponding array element in the "
          "IsCritical property denotes whether the extension is "
          "critical." ), 
       ArrayType ( "Indexed" ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.9", 
          "RFC3280.IETF|Section 4.2" }, 
       ModelCorrespondence { "CIM_X509Certificate.IsCritical", 
          "CIM_X509Certificate.ExtensionID" }]
   string ExtensionValue[];

      [Description ( 
          "TRUE value represents that the extension attribute is "
          "critical. The corresponding array element in the "
          "ExtensionID property contains the identifier of the "
          "extension attribute. The corresponding array element in "
          "the ExtensionValue property contains the value of the "
          "extension attribute." ), 
       ArrayType ( "Indexed" ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.9", 
          "RFC3280.IETF|Section 4.2" }, 
       ModelCorrespondence { "CIM_X509Certificate.ExtensionID", 
          "CIM_X509Certificate.ExtensionValue" }]
   boolean IsCritical[];

      [Description ( 
          "String that identifies the issuer of the certificate." ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.8" }]
   string IssuerUniqueID;

      [Description ( "Certificate\'s unique subject identifier." ), 
       MappingStrings { "RFC3280.IETF|Section 4.1.2.8" }]
   string SubjectUniqueID;

      [Description ( 
          "TRUE value represents that the certificate is a trusted "
          "root certificate." )]
   boolean TrustedRootCertificate;


};



class UNIX_X509Certificate : CIM_X509Certificate
{

};

