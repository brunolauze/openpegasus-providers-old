//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Capabilities" ), 
    Description ( 
       "Capabilities is an abstract class whose subclasses describe "
       "abilities and/or potential for use. For example, one may "
       "describe the maximum number of VLANs that can be supported on "
       "a system using a subclass of Capabilities. Capabilities are "
       "tied to the elements which they describe using the "
       "ElementCapabilities association. Note that the cardinality of "
       "the ManagedElement reference is Min(1), Max(1). This "
       "cardinality mandates the instantiation of the "
       "ElementCapabilities association for the referenced instance of "
       "Capabilities. ElementCapabilities describes the existence "
       "requirements and context for the referenced instance of "
       "ManagedElement. Specifically, the ManagedElement MUST exist "
       "and provides the context for the Capabilities. Note that "
       "Capabilities do not indicate what IS configured or "
       "operational, but what CAN or CANNOT exist, be defined or be "
       "used. Note that it is possible to describe both supported and "
       "excluded abilities and functions (both capabilities and "
       "limitations) using this class." )]
class CIM_Capabilities : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user friendly name for this instance of "
          "Capabilities. In addition, the user friendly name can be "
          "used as a index property for a search of query. (Note: "
          "Name does not have to be unique within a namespace.)" )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.13.0" ), 
    UMLPackagePath ( "CIM::System::Diagnostics" ), 
    Description ( 
       "DiagnosticServiceCapabilities is a class that describes the "
       "capabilities of the diagnostic service. This provides the "
       "means for the diagnostic service to describe its abilities, "
       "limitations, and/or potential for use of various diagnostic "
       "service parameters. For example, what types of settings the "
       "diagnostic service supports." )]
class CIM_DiagnosticServiceCapabilities : CIM_Capabilities {

      [Description ( 
          "The SupportedServiceModes property lists the operational "
          "modes that are supported by the Diagnostic Service. "
          "These modes may correspond to, but are not limited to, "
          "settings that may be applied to a Diagnostic Service." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "0x8000" }, 
       Values { "Unknown", "Other", "PercentOfTestCoverage", 
          "QuickMode", "HaltOnError", "ResultPersistence", 
          "QueryTimeout", "NonDestructive", "No Service Modes" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.OtherSupportedServiceModesDescriptions" }]
   uint16 SupportedServiceModes[];

      [Description ( 
          "Provides additional information for "
          "SupportedServiceModes when the corresponding value is "
          "set to 1 (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.SupportedServiceModes" }]
   string OtherSupportedServiceModesDescriptions[];

      [Description ( 
          "The SupportedLoopControl property lists the loop "
          "controls that are supported by the Diagnostic Service." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "0x8000" }, 
       Values { "Unknown", "Other", "Continuous", "Count", "Timer", 
          "ErrorCount", "No Loop Control" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticSettingData.LoopControl", 
          "CIM_DiagnosticServiceCapabilities.OtherSupportedLoopControlDescriptions" }]
   uint16 SupportedLoopControl[];

      [Description ( 
          "Provides additional information for SupportedLoopControl "
          "when the corresponding value is set to 1 (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.SupportedLoopControl" }]
   string OtherSupportedLoopControlDescriptions[];

      [Description ( 
          "The SupportedLogOptions property lists the log options "
          "that are supported by the Diagnostic Service." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "0x8000" }, 
       Values { "Unknown", "Other", "Results", "Subtests", 
          "Actions", "Warnings", "Status", "Device Errors", 
          "Service Errors", "Setting Data", "Statistics", 
          "Hardware Configuration", "Software Configuration", 
          "References", "Debug", "No Log Options" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_DiagnosticSettingData.LogOptions", 
          "CIM_DiagnosticServiceCapabilities.OtherSupportedLogOptionsDescriptions" }]
   uint16 SupportedLogOptions[];

      [Description ( 
          "Provides additional information for SupportedLogOptions "
          "when the corresponding value is set to 1 (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.SupportedLogOptions" }]
   string OtherSupportedLogOptionsDescriptions[];

      [Description ( 
          "The SupportedLogStorage property lists the storage "
          "options for logging that are supported by the Diagnostic "
          "Service. \n"
          "The values are: \n"
          "\"DiagnosticLog\" (Value = 2): Supports use of the "
          "DiagnosticLog class for aggregating DiagnosticRecords. \n"
          "\"MessageLog\" (Value = 3): Supports writing log "
          "information using the methods in the MessageLog class. \n"
          "\"File\" (Value = 4): Supports writing log information "
          "to a file." ), 
       ValueMap { "0", "1", "2", "3", "4", "0x8000" }, 
       Values { "Unknown", "Other", "DiagnosticLog", "MessageLog", 
          "File", "No Log Storage" }, 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.OtherSupportedLogStorageDescriptions", 
          "CIM_DiagnosticSettingData.LogStorage" }]
   uint16 SupportedLogStorage[];

      [Description ( 
          "Provides additional information for SupportedLogStorage "
          "when the corresponding value is set to 1 (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.SupportedLogStorage" }]
   string OtherSupportedLogStorageDescriptions[];

      [Description ( 
          "The SupportedExecutionControls property lists the job "
          "controls that are supported by the Diagnostic Service. "
          "The values are: \n"
          "(Value = 2) is deprecated. Previous versions defined "
          "this as \"Job Creation\" and was intended to indicate "
          "that a ConcreteJob instance will be created to control "
          "the diagnostic job launched by the diagnostic service. "
          "Since Job creation is REQUIRED, this attribute value is "
          "unnecessary and confusing. \n"
          "\"Kill Job\" (Value = 3): publishes that the diagnostic "
          "service implements the "
          "ConcreteJob.RequestStateChange(Kill) method. \n"
          "\"Suspend Job\" (Value = 4): publishes that the "
          "diagnostic service implements the "
          "ConcreteJob.RequestStateChange(Suspend) method. \n"
          "\"Terminate Job\" (Value = 5): publishes that the "
          "diagnostic service implements the "
          "ConcreteJob.RequestStateChange(Terminate) method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "0x8000" }, 
       Values { "Unknown", "Other", "Reserved", "Kill Job", 
          "Suspend Job", "Terminate Job", "No Execution Controls" }, 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.OtherSupportedExecutionControlsDescriptions" }]
   uint16 SupportedExecutionControls[];

      [Description ( 
          "Provides additional information for "
          "SupportedExecutionControls when the corresponding value "
          "is set (\"Other\")." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_DiagnosticServiceCapabilities.SupportedExecutionControls" }]
   string OtherSupportedExecutionControlsDescriptions[];

      [Deprecated { 
          "CIM_DiagnosticServiceCapabilities.SupportedLogOptions" }, 
       Description ( 
          "This property is being deprecated because the "
          "TestWarningLevel and LogOptions properties serve the "
          "same purpose. \n"
          "Lists the level of warning messages that MAY be logged. "
          "If for example no warning information is required, the "
          "level would be set to \"No Warnings\" (value=0). Using "
          "\"Missing Resources\" (value=1) will cause warnings to "
          "be generated when required resources or hardware are not "
          "found. Setting the value to 2, \"Testing Impacts\", "
          "results in both missing resources and \'test impact\' "
          "warnings (for example, multiple retries required) to be "
          "reported." ), 
       ValueMap { "2", "3", "4", "5" }, 
       Values { "No Warnings", "Missing Resources", 
          "Testing Impacts", "All Warnings" }]
   uint16 SupportedTestWarnings = 3;


};



class UNIX_DiagnosticServiceCapabilities : CIM_DiagnosticServiceCapabilities
{

};

