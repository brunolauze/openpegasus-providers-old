//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "This class extends LogicalElement to abstract the concept of "
       "an element that is enabled and disabled, such as a "
       "LogicalDevice or a ServiceAccessPoint." )]
class CIM_EnabledLogicalElement : CIM_LogicalElement {

      [Description ( 
          "EnabledState is an integer enumeration that indicates "
          "the enabled and disabled states of an element. It can "
          "also indicate the transitions between these requested "
          "states. For example, shutting down (value=4) and "
          "starting (value=10) are transient states between enabled "
          "and disabled. The following text briefly summarizes the "
          "various enabled and disabled states: \n"
          "Enabled (2) indicates that the element is or could be "
          "executing commands, will process any queued commands, "
          "and queues new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "Shutting Down (4) indicates that the element is in the "
          "process of going to a Disabled state. \n"
          "Not Applicable (5) indicates the element does not "
          "support being enabled or disabled. \n"
          "Enabled but Offline (6) indicates that the element might "
          "be completing commands, and will drop any new requests. \n"
          "Test (7) indicates that the element is in a test state. \n"
          "Deferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in "
          "a restricted mode.\n"
          "Starting (10) indicates that the element is in the "
          "process of going to an Enabled state. New requests are "
          "queued." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11..32767", "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled", 
          "Shutting Down", "Not Applicable", "Enabled but Offline", 
          "In Test", "Deferred", "Quiesce", "Starting", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.OtherEnabledState" }]
   uint16 EnabledState = 5;

      [Description ( 
          "A string that describes the enabled or disabled state of "
          "the element when the EnabledState property is set to 1 "
          "(\"Other\"). This property must be set to null when "
          "EnabledState is any value other than 1." ), 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   string OtherEnabledState;

      [Description ( 
          "RequestedState is an integer enumeration that indicates "
          "the last requested or desired state for the element, "
          "irrespective of the mechanism through which it was "
          "requested. The actual state of the element is "
          "represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or "
          "disabled states. Note that when EnabledState is set to 5 "
          "(\"Not Applicable\"), then this property has no meaning. "
          "Refer to the EnabledState property description for "
          "explanations of the values in the RequestedState "
          "enumeration. \n"
          "\"Unknown\" (0) indicates the last requested state for "
          "the element is unknown.\n"
          "Note that the value \"No Change\" (5) has been "
          "deprecated in lieu of indicating the last requested "
          "state is \"Unknown\" (0). If the last requested or "
          "desired state is unknown, RequestedState should have the "
          "value \"Unknown\" (0), but may have the value \"No "
          "Change\" (5).Offline (6) indicates that the element has "
          "been requested to transition to the Enabled but Offline "
          "EnabledState. \n"
          "It should be noted that there are two new values in "
          "RequestedState that build on the statuses of "
          "EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then "
          "moving to an \"Enabled\" state. Reset indicates that the "
          "element is first \"Disabled\" and then \"Enabled\". The "
          "distinction between requesting \"Shut Down\" and "
          "\"Disabled\" should also be noted. Shut Down requests an "
          "orderly transition to the Disabled state, and might "
          "involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate "
          "disabling of the element, such that it will not execute "
          "or accept any commands or processing requests. \n"
          "\n"
          "This property is set as the result of a method "
          "invocation (such as Start or StopService on "
          "CIM_Service), or can be overridden and defined as "
          "WRITEable in a subclass. The method approach is "
          "considered superior to a WRITEable property, because it "
          "allows an explicit invocation of the operation and the "
          "return of a result code. \n"
          "\n"
          "If knowledge of the last RequestedState is not supported "
          "for the EnabledLogicalElement, the property shall be "
          "NULL or have the value 12 \"Not Applicable\"." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "32768..65535" }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Deferred", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 RequestedState = 12;

      [Write, Description ( 
          "An enumerated value indicating an administrator\'s "
          "default or startup configuration for the Enabled State "
          "of an element. By default, the element is \"Enabled\" "
          "(value=2)." ), 
       ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Not Applicable", 
          "Enabled but Offline", "No Default", "Quiesce", 
          "DMTF Reserved", "Vendor Reserved" }]
   uint16 EnabledDefault = 2;

      [Description ( 
          "The date or time when the EnabledState of the element "
          "last changed. If the state of the element has not "
          "changed and this property is populated, then it must be "
          "set to a 0 interval value. If a state change was "
          "requested, but rejected or not yet processed, the "
          "property must not be updated." )]
   datetime TimeOfLastStateChange;

      [Description ( 
          "AvailableRequestedStates indicates the possible values "
          "for the RequestedState parameter of the method "
          "RequestStateChange, used to initiate a state change. The "
          "values listed shall be a subset of the values contained "
          "in the RequestedStatesSupported property of the "
          "associated instance of "
          "CIM_EnabledLogicalElementCapabilities where the values "
          "selected are a function of the current state of the "
          "CIM_EnabledLogicalElement. This property may be non-null "
          "if an implementation is able to advertise the set of "
          "possible values as a function of the current state. This "
          "property shall be null if an implementation is unable to "
          "determine the set of possible values as a function of "
          "the current state." ), 
       ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".." }, 
       Values { "Enabled", "Disabled", "Shut Down", "Offline", 
          "Test", "Defer", "Quiesce", "Reboot", "Reset", 
          "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported" }]
   uint16 AvailableRequestedStates[];

      [Description ( 
          "TransitioningToState indicates the target state to which "
          "the instance is transitioning. \n"
          "A value of 5 \"No Change\" shall indicate that no "
          "transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not "
          "support representing ongoing transitions. \n"
          "A value other than 5 or 12 shall identify the state to "
          "which the element is in the process of transitioning." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", ".." }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Defer", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElement.RequestedState", 
          "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 TransitioningToState = 12;


      [Description ( 
          "Requests that the state of the element be changed to the "
          "value specified in the RequestedState parameter. When "
          "the requested state change takes place, the EnabledState "
          "and RequestedState of the element will be the same. "
          "Invoking the RequestStateChange method multiple times "
          "could result in earlier requests being overwritten or "
          "lost. \n"
          "A return code of 0 shall indicate the state change was "
          "successfully initiated. \n"
          "A return code of 3 shall indicate that the state "
          "transition cannot complete within the interval specified "
          "by the TimeoutPeriod parameter. \n"
          "A return code of 4096 (0x1000) shall indicate the state "
          "change was successfully initiated, a ConcreteJob has "
          "been created, and its reference returned in the output "
          "parameter Job. Any other return code indicates an error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown or Unspecified Error", 
          "Cannot complete within Timeout Period", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Invalid State Transition", 
          "Use of Timeout Parameter Not Supported", "Busy", 
          "Method Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestedState" }]
   uint32 RequestStateChange(
         [IN, Description ( 
             "The state requested for the element. This "
             "information will be placed into the RequestedState "
             "property of the instance if the return code of the "
             "RequestStateChange method is 0 (\'Completed with "
             "No Error\'), or 4096 (0x1000) (\'Job Started\'). "
             "Refer to the description of the EnabledState and "
             "RequestedState properties for the detailed "
             "explanations of the RequestedState values." ), 
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", 
             "11", "..", "32768..65535" }, 
          Values { "Enabled", "Disabled", "Shut Down", "Offline", 
             "Test", "Defer", "Quiesce", "Reboot", "Reset", 
             "DMTF Reserved", "Vendor Reserved" }, 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElement.RequestedState" }]
      uint16 RequestedState, 
         [IN ( false ), OUT, Description ( 
             "May contain a reference to the ConcreteJob created "
             "to track the state transition initiated by the "
             "method invocation." )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "A timeout period that specifies the maximum amount "
             "of time that the client expects the transition to "
             "the new state to take. The interval format must be "
             "used to specify the TimeoutPeriod. A value of 0 or "
             "a null parameter indicates that the client has no "
             "time requirements for the transition. \n"
             "If this property does not contain 0 or null and "
             "the implementation does not support this "
             "parameter, a return code of \'Use Of Timeout "
             "Parameter Not Supported\' shall be returned." )]
      datetime TimeoutPeriod);

};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::Core::Device" ), 
    Description ( 
       "An abstraction or emulation of a hardware entity, that may or "
       "may not be Realized in physical hardware. Any characteristics "
       "of a LogicalDevice that are used to manage its operation or "
       "configuration are contained in, or associated with, the "
       "LogicalDevice object. Examples of the operational properties "
       "of a Printer would be paper sizes supported, or detected "
       "errors. Examples of the configuration properties of a Sensor "
       "Device would be threshold settings. Various configurations "
       "could exist for a LogicalDevice. These configurations could be "
       "contained in Setting objects and associated with the "
       "LogicalDevice." )]
class CIM_LogicalDevice : CIM_EnabledLogicalElement {

      [Key, Description ( "The scoping System\'s CreationClassName." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.CreationClassName" )]
   string SystemCreationClassName;

      [Key, Description ( "The scoping System\'s Name." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.Name" )]
   string SystemName;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this "
          "property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Description ( 
          "An address or other identifying information to uniquely "
          "name the LogicalDevice." ), 
       MaxLen ( 64 )]
   string DeviceID;

      [Deprecated { "CIM_PowerManagementCapabilities" }, 
       Description ( 
          "Boolean indicating that the Device can be power managed. "
          "The use of this property has been deprecated. Instead, "
          "the existence of an associated "
          "PowerManagementCapabilities class (associated using the "
          "ElementCapabilities relationhip) indicates that power "
          "management is supported." )]
   boolean PowerManagementSupported;

      [Deprecated { 
          "CIM_PowerManagementCapabilities.PowerCapabilities" }, 
       Description ( 
          "An enumerated array describing the power management "
          "capabilities of the Device. The use of this property has "
          "been deprecated. Instead, the PowerCapabilites property "
          "in an associated PowerManagementCapabilities class "
          "should be used." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Not Supported", "Disabled", "Enabled", 
          "Power Saving Modes Entered Automatically", 
          "Power State Settable", "Power Cycling Supported", 
          "Timed Power On Supported" }]
   uint16 PowerManagementCapabilities[];

      [Description ( 
          "The primary availability and status of the Device. "
          "(Additional status information can be specified using "
          "the Additional Availability array property.) For "
          "example, the Availability property indicates that the "
          "Device is running and has full power (value=3), or is in "
          "a warning (4), test (5), degraded (10) or power save "
          "state (values 13-15 and 17). Regarding the Power Save "
          "states, these are defined as follows: Value 13 (\"Power "
          "Save - Unknown\") indicates that the Device is known to "
          "be in a power save mode, but its exact status in this "
          "mode is unknown; 14 (\"Power Save - Low Power Mode\") "
          "indicates that the Device is in a power save state but "
          "still functioning, and may exhibit degraded performance; "
          "15 (\"Power Save - Standby\") describes that the Device "
          "is not functioning but could be brought to full power "
          "\'quickly\'; and value 17 (\"Power Save - Warning\") "
          "indicates that the Device is in a warning state, though "
          "also in a power save mode." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21" }, 
       Values { "Other", "Unknown", "Running/Full Power", "Warning", 
          "In Test", "Not Applicable", "Power Off", "Off Line", 
          "Off Duty", "Degraded", "Not Installed", "Install Error", 
          "Power Save - Unknown", "Power Save - Low Power Mode", 
          "Power Save - Standby", "Power Cycle", 
          "Power Save - Warning", "Paused", "Not Ready", 
          "Not Configured", "Quiesced" }, 
       MappingStrings { "MIF.DMTF|Operational State|006.5", 
          "MIB.IETF|HOST-RESOURCES-MIB.hrDeviceStatus", 
          "MIF.DMTF|Host Device|001.5" }, 
       ModelCorrespondence { 
          "CIM_LogicalDevice.AdditionalAvailability" }]
   uint16 Availability;

      [Deprecated { "CIM_EnabledLogicalElement.EnabledState" }, 
       Description ( 
          "The StatusInfo property indicates whether the Logical "
          "Device is in an enabled (value = 3), disabled (value = "
          "4) or some other (1) or unknown (2) state. If this "
          "property does not apply to the LogicalDevice, the value, "
          "5 (\"Not Applicable\"), should be used. StatusInfo has "
          "been deprecated in lieu of a more clearly named property "
          "with additional enumerated values (EnabledState), that "
          "is inherited from ManagedSystemElement. \n"
          "If a Device is (\"Enabled\")(value=3), it has been "
          "powered up, and is configured and operational. The "
          "Device may or may not be functionally active, depending "
          "on whether its Availability (or AdditionalAvailability) "
          "indicate that it is (\"Running/Full Power\")(value=3) or "
          "(\"Off line\") (value=8). In an enabled but offline "
          "mode, a Device may be performing out-of-band requests, "
          "such as running Diagnostics. If (\"Disabled\") "
          "StatusInfo value=4), a Device can only be \"enabled\" or "
          "powered off. In a personal computer environment, "
          "(\"Disabled\") means that the Device\'s driver is not "
          "available in the stack. In other environments, a Device "
          "can be disabled by removing its configuration file. A "
          "disabled device is physically present in a System and "
          "consuming resources, but can not be communicated with "
          "until a load of a driver, a load of a configuration file "
          "or some other \"enabling\" activity has occurred." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Unknown", "Enabled", "Disabled", 
          "Not Applicable" }, 
       MappingStrings { "MIF.DMTF|Operational State|006.4" }]
   uint16 StatusInfo;

      [Deprecated { "CIM_DeviceErrorData.LastErrorCode" }, 
       Description ( 
          "LastErrorCode captures the last error code reported by "
          "the LogicalDevice." )]
   uint32 LastErrorCode;

      [Deprecated { "CIM_DeviceErrorData.ErrorDescription" }, 
       Description ( 
          "ErrorDescription is a free-form string supplying more "
          "information about the error recorded in LastErrorCode, "
          "and information on any corrective actions that may be "
          "taken." )]
   string ErrorDescription;

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "ErrorCleared is a boolean property indicating that the "
          "error reported in LastErrorCode is now cleared." )]
   boolean ErrorCleared;

      [Description ( 
          "OtherIdentifyingInfo captures additional data, beyond "
          "DeviceID information, that could be used to identify a "
          "LogicalDevice. One example would be to hold the "
          "Operating System\'s user friendly name for the Device in "
          "this property." ), 
       ArrayType ( "Indexed" ), 
       MaxLen ( 256 ), 
       ModelCorrespondence { 
          "CIM_LogicalDevice.IdentifyingDescriptions" }]
   string OtherIdentifyingInfo[];

      [Description ( 
          "The number of consecutive hours that this Device has "
          "been powered, since its last power cycle." ), 
       Units ( "Hours" ), 
       Counter]
   uint64 PowerOnHours;

      [Description ( 
          "The total number of hours that this Device has been powered."
           ), 
       Units ( "Hours" ), 
       Counter]
   uint64 TotalPowerOnHours;

      [Description ( 
          "An array of free-form strings providing explanations and "
          "details behind the entries in the OtherIdentifyingInfo "
          "array. Note, each entry of this array is related to the "
          "entry in OtherIdentifyingInfo that is located at the "
          "same index." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_LogicalDevice.OtherIdentifyingInfo" }]
   string IdentifyingDescriptions[];

      [Description ( 
          "Additional availability and status of the Device, beyond "
          "that specified in the Availability property. The "
          "Availability property denotes the primary status and "
          "availability of the Device. In some cases, this will not "
          "be sufficient to denote the complete status of the "
          "Device. In those cases, the AdditionalAvailability "
          "property can be used to provide further information. For "
          "example, a Device\'s primary Availability may be \"Off "
          "line\" (value=8), but it may also be in a low power "
          "state (AdditonalAvailability value=14), or the Device "
          "could be running Diagnostics (AdditionalAvailability "
          "value=5, \"In Test\")." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21" }, 
       Values { "Other", "Unknown", "Running/Full Power", "Warning", 
          "In Test", "Not Applicable", "Power Off", "Off Line", 
          "Off Duty", "Degraded", "Not Installed", "Install Error", 
          "Power Save - Unknown", "Power Save - Low Power Mode", 
          "Power Save - Standby", "Power Cycle", 
          "Power Save - Warning", "Paused", "Not Ready", 
          "Not Configured", "Quiesced" }, 
       ModelCorrespondence { "CIM_LogicalDevice.Availability" }]
   uint16 AdditionalAvailability[];

      [Deprecated { "No value" }, 
       Description ( 
          "The MaxQuiesceTime property has been deprecated. When "
          "evaluating the use of Quiesce, it was determine that "
          "this single property is not adequate for describing when "
          "a device will automatically exit a quiescent state. In "
          "fact, the most likely scenario for a device to exit a "
          "quiescent state was determined to be based on the number "
          "of outstanding requests queued rather than on a maximum "
          "time. This will be re-evaluated and repositioned later. \n"
          "Maximum time in milliseconds, that a Device can run in a "
          "\"Quiesced\" state. A Device\'s state is defined in its "
          "Availability and AdditionalAvailability properties, "
          "where \"Quiesced\" is conveyed by the value 21. What "
          "occurs at the end of the time limit is device-specific. "
          "The Device may unquiesce, may offline or take other "
          "action. A value of 0 indicates that a Device can remain "
          "quiesced indefinitely." ), 
       Units ( "MilliSeconds" )]
   uint64 MaxQuiesceTime;


      [Deprecated { "CIM_PowerManagementService.SetPowerState" }, 
       Description ( 
          "Sets the power state of the Device. The use of this "
          "method has been deprecated. Instead, use the "
          "SetPowerState method in the associated "
          "PowerManagementService class." )]
   uint32 SetPowerState(
         [IN, Description ( "The power state to set." ), 
          ValueMap { "1", "2", "3", "4", "5", "6" }, 
          Values { "Full Power", "Power Save - Low Power Mode", 
             "Power Save - Standby", "Power Save - Other", 
             "Power Cycle", "Power Off" }]
      uint16 PowerState, 
         [IN, Description ( 
             "Time indicates when the power state should be set, "
             "either as a regular date-time value or as an "
             "interval value (where the interval begins when the "
             "method invocation is received." )]
      datetime Time);

      [Description ( 
          "Requests a reset of the LogicalDevice. The return value "
          "should be 0 if the request was successfully executed, 1 "
          "if the request is not supported and some other value if "
          "an error occurred. In a subclass, the set of possible "
          "return codes could be specified, using a ValueMap "
          "qualifier on the method. The strings to which the "
          "ValueMap contents are \'translated\' may also be "
          "specified in the subclass as a Values array qualifier." )]
   uint32 Reset(
);

      [Deprecated { "CIM_EnabledLogicalElement.RequestStateChange" }, 
       Description ( 
          "The EnableDevice method has been deprecated in lieu of "
          "the more general RequestStateChange method that directly "
          "overlaps with the functionality provided by this method. \n"
          "Requests that the LogicalDevice be enabled (\"Enabled\" "
          "input parameter = TRUE) or disabled (= FALSE). If "
          "successful, the Device\'s StatusInfo/EnabledState "
          "properties should reflect the desired state "
          "(enabled/disabled). Note that this method\'s function "
          "overlaps with the RequestedState property. "
          "RequestedState was added to the model to maintain a "
          "record (i.e., a persisted value) of the last state "
          "request. Invoking the EnableDevice method should set the "
          "RequestedState property appropriately. \n"
          "The return code should be 0 if the request was "
          "successfully executed, 1 if the request is not supported "
          "and some other value if an error occurred. In a "
          "subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier." )]
   uint32 EnableDevice(
         [IN, Description ( 
             "If TRUE enable the device, if FALSE disable the device."
              )]
      boolean Enabled);

      [Deprecated { "CIM_EnabledLogicalElement.RequestStateChange" }, 
       Description ( 
          "The OnlineDevice method has been deprecated in lieu of "
          "the more general RequestStateChange method that directly "
          "overlaps with the functionality provided by this method. \n"
          "Requests that the LogicalDevice be brought online "
          "(\"Online\" input parameter = TRUE) or taken offline (= "
          "FALSE). \"Online\" indicates that the Device is ready to "
          "accept requests, and is operational and fully "
          "functioning. In this case, the Device\'s Availability "
          "property would be set to a value of 3 (\"Running/Full "
          "Power\"). \"Offline\" indicates that a Device is powered "
          "up and operational, but not processing functional "
          "requests. In an offline state, a Device may be capable "
          "of running diagnostics or generating operational alerts. "
          "For example, when the \"Offline\" button is pushed on a "
          "Printer, the Device is no longer available to process "
          "print jobs, but could be available for diagnostics or "
          "maintenance. \n"
          "If this method is successful, the Device\'s Availability "
          "and AdditionalAvailability properties should reflect the "
          "updated status. If a failure occurs trying to bring the "
          "Device online or offline, it should remain in its "
          "current state. IE, the request, if unsuccessful, should "
          "not leave the Device in an indeterminate state. When "
          "bringing a Device back \"Online\", from an \"Offline\" "
          "mode, the Device should be restored to its last \"Online\" "
          "state, if at all possible. Only a Device that has an "
          "EnabledState/StatusInfo of \"Enabled\" and has been "
          "configured can be brought online or taken offline. \n"
          "OnlineDevice should return 0 if successful, 1 if the "
          "request is not supported at all, 2 if the request is not "
          "supported due to the current state of the Device, and "
          "some other value if any other error occurred. In a "
          "subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are \'translated\' "
          "may also be specified in the subclass as a Values array "
          "qualifier. \n"
          "Note that this method\'s function overlaps with the "
          "RequestedState property. RequestedState was added to the "
          "model to maintain a record (i.e., a persisted value) of "
          "the last state request. Invoking the OnlineDevice method "
          "should set the RequestedState property appropriately." )]
   uint32 OnlineDevice(
         [IN, Description ( 
             "If TRUE, take the device online, if FALSE, take "
             "the device OFFLINE." )]
      boolean Online);

      [Deprecated { "CIM_EnabledLogicalElement.RequestStateChange" }, 
       Description ( 
          "The QuiesceDevice method has been deprecated in lieu of "
          "the more general RequestStateChange method that directly "
          "overlaps with the functionality provided by this method. \n"
          "Requests that the LogicalDevice cleanly cease all "
          "current activity (\"Quiesce\" input parameter = TRUE) or "
          "resume activity (= FALSE). For this method to quiesce a "
          "Device, that Device should have an Availability (or "
          "Additional Availability) of \"Running/Full Power\" "
          "(value=3) and an EnabledStatus/StatusInfo of \"Enabled\". "
          "For example, if quiesced, a Device may then be offlined "
          "for diagnostics, or disabled for power off and hot swap. "
          "For the method to \"unquiesce\" a Device, that Device "
          "should have an Availability (or AdditionalAvailability) "
          "of \"Quiesced\" (value=21) and an "
          "EnabledStatus/StatusInfo of \"Enabled\". In this case, "
          "the Device would be returned to an \"Enabled\" and "
          "\"Running/Full Power\" status. \n"
          "The method\'s return code should indicate the success or "
          "failure of the quiesce. It should return 0 if "
          "successful, 1 if the request is not supported at all, 2 "
          "if the request is not supported due to the current state "
          "of the Device, and some other value if any other error "
          "occurred. In a subclass, the set of possible return "
          "codes could be specified, using a ValueMap qualifier on "
          "the method. The strings to which the ValueMap contents "
          "are \'translated\' may also be specified in the subclass "
          "as a Values array qualifier." )]
   uint32 QuiesceDevice(
         [IN, Description ( 
             "If set to TRUE then cleanly cease all activity, if "
             "FALSE resume activity." )]
      boolean Quiesce);

      [Description ( 
          "Requests that the Device capture its current "
          "configuration, setup and/or state information in a "
          "backing store. The goal would be to use this information "
          "at a later time (via the RestoreProperties method), to "
          "return a Device to its present \"condition\". This "
          "method may not be supported by all Devices. The method "
          "should return 0 if successful, 1 if the request is not "
          "supported, and some other value if any other error "
          "occurred. In a subclass, the set of possible return "
          "codes could be specified, using a ValueMap qualifier on "
          "the method. The strings to which the ValueMap contents "
          "are \'translated\' may also be specified in the subclass "
          "as a Values array qualifier." )]
   uint32 SaveProperties(
);

      [Description ( 
          "Requests that the Device re-establish its configuration, "
          "setup and/or state information from a backing store. The "
          "intent is to capture this information at an earlier time "
          "(via the SaveProperties method), and use it to return a "
          "Device to this earlier \"condition\". This method may "
          "not be supported by all Devices. The method should "
          "return 0 if successful, 1 if the request is not "
          "supported, and some other value if any other error "
          "occurred. In a subclass, the set of possible return "
          "codes could be specified, using a ValueMap qualifier on "
          "the method. The strings to which the ValueMap contents "
          "are \'translated\' may also be specified in the subclass "
          "as a Values array qualifier." )]
   uint32 RestoreProperties(
);

};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Device::Modems" ), 
    Description ( 
       "CIM_Modem is the superclass for grouping the numerous types of "
       "Modems." )]
class CIM_Modem : CIM_LogicalDevice {


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::Modems" ), 
    Description ( 
       "CIM_CallBasedModem is the superclass for grouping the numerous "
       "types of call-based modems. The POTSModem is a type of call- "
       "based Modem." )]
class CIM_CallBasedModem : CIM_Modem {

      [Description ( 
          "Indicates whether online fallback is enabled so that it "
          "can be negotiated by the Modem." )]
   boolean FallbackEnabled;

      [Description ( 
          "An array that enumerates all the compression protocols "
          "that are supported by the Modem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, 
       Values { "Unknown", "Other", "No Compression", "MNP 5", 
          "V.42bis", "MNP 3", "MNP 4", "V.58", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.OtherCompressionDescription" }]
   uint16 CompressionSupported[];

      [Description ( 
          "Description of the compression type when \"Other \" "
          "(value=1) is defined in the CompressionSupported array. "
          "If there are multiple \"Other\" types, then combine "
          "their descriptions into a single string." ), 
       ModelCorrespondence { 
          "CIM_CallBasedModem.CompressionSupported" }]
   string OtherCompressionDescription;

      [Description ( 
          "Describes the current data compression characteristics "
          "of the Modem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, 
       Values { "Unknown", "Other", "No Compression", "MNP 5", 
          "V.42bis", "MNP 3", "MNP 4", "V.58", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.CompressionSupported", 
          "CIM_CallBasedModem.OtherCompressionInfoDescription" }]
   uint16 CompressionInfo;

      [Description ( 
          "Description of the current compression type when \"Other\" "
          "(value=1) is specified in the CompressionInfo property." ), 
       ModelCorrespondence { "CIM_CallBasedModem.CompressionInfo" }]
   string OtherCompressionInfoDescription;

      [Description ( 
          "An array that enumerates all the modulation protocols "
          "that are supported by the Modem. The beginning entries "
          "in the Values qualifier array are mapped from the "
          "CIM_POTSModem ModulationScheme property." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27", 
          "28", "29" }, 
       Values { "Unknown", "Other", "Not Supported", "Bell 103", 
          "Bell 212A", "V.22bis", "V.32", "V.32bis", "V.terbo", 
          "V.FC", "V.34", "V.34bis", "V.17 (G3 Fax Call)", "V.21", 
          "V.22", "V.23 Constant Carrier (1200/75)", 
          "V.23 Switched Carrier (Half Duplex)", "V.26bis", 
          "V.26ter", "V.27ter (G3 Fax Call)", 
          "V.29 HD (G3 Fax Call)", "V.34 HD (G3 Fax Call)", 
          "V.90 Issue 1 (Asymmetric)", "V.90 Issue 2 (Symmetric)", 
          "V.58", "X2", "K56FLEX", "V.Fast", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.OtherModulationDescription" }]
   uint16 ModulationSupported[];

      [Description ( 
          "Description of the current modulation type when \"Other\" "
          "(value=1) is specified in the ModulationSupported "
          "property. If there are multiple \"Other\" types, then "
          "combine their descriptions into a single string." ), 
       ModelCorrespondence { "CIM_CallBasedModem.ModulationSupported" }]
   string OtherModulationDescription;

      [Description ( 
          "Describes the current modulation scheme of the Modem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27", 
          "28", "29" }, 
       Values { "Unknown", "Other", "Not Supported", "Bell 103", 
          "Bell 212A", "V.22bis", "V.32", "V.32bis", "V.terbo", 
          "V.FC", "V.34", "V.34bis", "V.17 (G3 Fax Call)", "V.21", 
          "V.22", "V.23 Constant Carrier (1200/75)", 
          "V.23 Switched Carrier (Half Duplex)", "V.26bis", 
          "V.26ter", "V.27ter (G3 Fax Call)", 
          "V.29 HD (G3 Fax Call)", "V.34 HD (G3 Fax Call)", 
          "V.90 Issue 1 (Asymmetric)", "V.90 Issue 2 (Symmetric)", 
          "V.58", "X2", "K56FLEX", "V.Fast", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.ModulationSupported", 
          "CIM_CallBasedModem.OtherSchemeDescription" }]
   uint16 ModulationScheme;

      [Description ( 
          "Description of the current modulation type when \"Other\" "
          "(value=1) is specified in the ModulationScheme property." ), 
       ModelCorrespondence { "CIM_CallBasedModem.ModulationScheme" }]
   string OtherSchemeDescription;

      [Description ( 
          "An array that enumerates the error control protocols "
          "that are supported by the Modem. The beginning entries "
          "in the Values qualifier array are mapped from the "
          "CIM_POTSModem ErrorControlInfo property." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13" }, 
       Values { "Unknown", "Other", "No Error Correction", "MNP 4", 
          "LAPM", "V.58", "ECP Enhanced Cellular Protocol", 
          "ETC Enhanced Throughput Cellular", "MNP 1", "MNP 2", 
          "MNP 3", "MNP10", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.OtherErrorControlDescription" }]
   uint16 ErrorControlSupported[];

      [Description ( 
          "Description of the error control type when \"Other\" "
          "(value= 1) is specified in the ErrorControlSupported "
          "property. If there are multiple \"Other\" types, then "
          "combine their descriptions into a single string." ), 
       ModelCorrespondence { 
          "CIM_CallBasedModem.ErrorControlSupported" }]
   string OtherErrorControlDescription;

      [Description ( 
          "Describes the current error correction characteristics "
          "of the Modem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13" }, 
       Values { "Unknown", "Other", "No Error Correction", "MNP 4", 
          "LAPM", "V.58", "ECP Enhanced Cellular Protocol", 
          "ETC Enhanced Throughput Cellular", "MNP 1", "MNP 2", 
          "MNP 3", "MNP10", "PEP", "HST" }, 
       ModelCorrespondence { 
          "CIM_CallBasedModem.ErrorControlSupported", 
          "CIM_CallBasedModem.OtherErrorControlInfoDescription" }]
   uint16 ErrorControlInfo;

      [Description ( 
          "Description of the error control when \"Other\" "
          "(value=1) is defined as the value of the "
          "ErrorControlInfo property." ), 
       ModelCorrespondence { "CIM_CallBasedModem.ErrorControlInfo" }]
   string OtherErrorControlInfoDescription;

      [Description ( "Time of the last reset of the Modem." )]
   datetime TimeOfLastReset;

      [Description ( 
          "The rate at which the receiver and transmitter are or "
          "were last cooperating, on a call, before disconnection." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 CallSpeed;

      [Description ( 
          "Status of the Modem. For example, information regarding "
          "modem negotiation or whether the modem is connected "
          "(values 8 and 9, respectively) can be conveyed in this "
          "property." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10" }, 
       Values { "Unknown", "Other", "Offline", "On Hook", "Dialing", 
          "Waiting for Answer", "Ringing", "Modem Detected", 
          "Negotiating", "Online", "Error" }]
   uint16 CallStatus;

      [Description ( 
          "Total number of characters sent by the Device on the "
          "last or current call. A call in-progress is indicated by "
          "the CallStatus property." ), 
       Counter]
   uint32 CharsSent;

      [Description ( 
          "Total number of characters received by the Device on the "
          "last or current call. A call in-progress is indicated by "
          "the CallStatus property." ), 
       Counter]
   uint32 CharsReceived;

      [Description ( 
          "Total number of characters lost by the Device on the "
          "last or current call. A call in-progress is indicated by "
          "the CallStatus property." ), 
       Counter]
   uint32 CharsLost;

      [Description ( 
          "Total number of blocks sent by the Device on the last or "
          "current call. A call in-progress is indicated by the "
          "CallStatus property." ), 
       Counter]
   uint32 BlocksSent;

      [Description ( 
          "Total number of blocks resent by the Device on the last "
          "or current call. A call in-progress is indicated by the "
          "CallStatus property." ), 
       Counter]
   uint32 BlocksResent;

      [Description ( 
          "Total number of blocks received by the Device on the "
          "last or current call. A call in-progress is indicated by "
          "the CallStatus property." ), 
       Counter]
   uint32 BlocksReceived;

      [Description ( 
          "Total number of block errors seen by the Device on the "
          "last or current call. A call in-progress is indicated by "
          "the CallStatus property." ), 
       Counter]
   uint32 BlockErrors;

      [Description ( 
          "Length of the last or current call. A call in-progress "
          "is indicated by the CallStatus property. The \'interval\' "
          "format of the datetime data type should be used for the "
          "property value." )]
   datetime CallLength;

      [Description ( 
          "Last or current number dialed to which the statistics "
          "apply, or NULL if the call was incoming." )]
   string NumberDialed;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::Modems" ), 
    Description ( 
       "The POTSModem class represents a Device that translates binary "
       "data into wave modulations for sound-based transmission. It "
       "connects to the POTS (Plain Old Telephone System) network." )]
class CIM_POTSModem : CIM_CallBasedModem {

      [Description ( 
          "Capabilities of the POTSModem. For example, the Device "
          "might support distinctive ring, caller ID, fax, voice, "
          "and so on." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12" }, 
       Values { "Unknown", "Other", "Distinctive Ring", "Caller ID", 
          "Voice", "Fax Class 1", "Fax Class 2", "WakeOnRing", 
          "Fax Group 3", "GSM Support", "AMPS Support", 
          "OOB Alerting", "Worldwide Country Support" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_POTSModem.CapabilityDescriptions" }]
   uint16 Capabilities[];

      [Description ( 
          "An array of free-form strings that provides more "
          "detailed explanations for any of the POTSModem features "
          "indicated in the Capabilities array. Note, each entry of "
          "this array is related to the entry in the Capabilities "
          "array that is located at the same index." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_POTSModem.Capabilities" }]
   string CapabilityDescriptions[];

      [Description ( 
          "Specifies which capabilities from the list of those "
          "supported are enabled and defined in the Capabilities "
          "array." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12" }, 
       Values { "Unknown", "Other", "Distinctive Ring", "Caller ID", 
          "Voice", "Fax Class 1", "Fax Class 2", "WakeOnRing", 
          "Fax Group 3", "GSM Support", "AMPS Support", 
          "OOB Alerting", "Worldwide Country Support" }, 
       ModelCorrespondence { "CIM_POTSModem.Capabilities" }]
   uint16 EnabledCapabilities[];

      [Description ( 
          "Defines the maximum communication speed to the COM Port "
          "for an external modem that can be set. Enter 0 if not "
          "applicable." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 MaxBaudRateToSerialPort;

      [Description ( 
          "Defines the maximum communication speed for accessing "
          "the phone system that can be set." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 MaxBaudRateToPhone;

      [Description ( 
          "Boolean that indicates that synchronous, as well as "
          "asynchronous, communication is supported." )]
   boolean SupportsSynchronousConnect;

      [Description ( 
          "DialType is an integer that indicates whether tone "
          "(value=1) or pulse dialing (value=2) is used. \"Unknown\" "
          "(0) can also be defined." ), 
       ValueMap { "0", "1", "2" }, 
       Values { "Unknown", "Tone", "Pulse" }]
   uint16 DialType;

      [Description ( 
          "InactivityTimeout defines the time limit (in seconds) "
          "for automatic disconnection of the phone line, if no "
          "data is exchanged. A value of 0 indicates that this "
          "feature is present but not enabled." ), 
       Units ( "Seconds" ), 
       PUnit ( "second" )]
   uint32 InactivityTimeout;

      [Description ( 
          "Describes the volume level of the audible tones from the "
          "Modem. For example, high, medium, or low volume can be "
          "reported (values 3, 4, or 5, respectively)." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "Not Supported", "High", 
          "Medium", "Low", "Off", "Auto" }]
   uint16 SpeakerVolumeInfo;

      [Description ( 
          "CountriesSupported is an array of strings that defines "
          "the countries in which the POTSModem operates." ), 
       MaxLen ( 64 )]
   string CountriesSupported[];

      [Description ( 
          "CountrySelected is a string value that defines the "
          "country for which the Modem is currently programmed. "
          "When multiple countries are supported, this property "
          "defines which one is currently selected for use." ), 
       MaxLen ( 64 )]
   string CountrySelected;

      [Description ( 
          "Number of rings before the Modem answers an incoming call."
           )]
   uint8 RingsBeforeAnswer;

      [Description ( 
          "MaxNumberOfPasswords specifies the number of passwords "
          "that can be defined in the Modem itself. If this feature "
          "is not supported, enter 0." )]
   uint16 MaxNumberOfPasswords;

      [Description ( 
          "CurrentPasswords is an array that contains the currently "
          "defined passwords for the Modem. This array might be "
          "left blank for security reasons." ), 
       MaxLen ( 24 )]
   string CurrentPasswords[];

      [Description ( 
          "Indication of whether the Modem supports call-back." )]
   boolean SupportsCallback;

      [Description ( 
          "AnswerMode defines the current auto-answer or call-back "
          "setting for the Modem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Disabled", "Manual Answer", 
          "Auto Answer", "Auto Answer with Call-Back" }]
   uint16 AnswerMode;

      [Description ( 
          "The current equalization setting for the Modem." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Unknown", "Other", "Long", "Short" }]
   uint16 Equalization;

      [Description ( "List of black-listed numbers for the Modem." )]
   string BlackListedNumbers[];


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::Modems" ), 
    Description ( 
       "Unimodem is a POTSModem that supports the Unimodem 1.0 Specification."
        )]
class CIM_Unimodem : CIM_POTSModem {

      [Description ( "Current call setup result code." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11" }, 
       Values { "No Previous Call", "No Dial Tone Detected", 
          "Reorder Signal Detected, Network Busy", 
          "Busy Signal Detected", "No Recognized Signal Detected", 
          "Voice Detected", "Text Telephone Detected", 
          "Data Answering Signal Detected", 
          "Data Calling Signal Detected", 
          "Fax Answering Signal Detected", 
          "Fax Calling Signal Detected", "V.8bis Signal Detected" }]
   uint16 CallSetupResultCode;

      [Description ( "Current multimedia mode of the Unimodem." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10" }, 
       Values { "Data Only", "Fax Only", "Voice Only", "Voice View", 
          "ASVD V.61", "ASVD V.34Q", "DSVD Multi-Tech", "DSVD 1.2", 
          "DSVD V.70", "Video Telephony H.324", "Other V.80 Call" }]
   uint16 MultiMediaMode;

      [Description ( 
          "Current DTE-DCE interface mode of the Unimodem, such as "
          "asynchronous, V.80 transparent, or framed synchronous "
          "modes." ), 
       ValueMap { "0", "1", "2" }, 
       Values { "Async Data", "V.80 Transparent Synchronous Mode", 
          "V.80 Framed Synchronous Mode" }]
   uint16 DTEDCEInterfaceMode;

      [Description ( "The active transmit modulation scheme." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23..65535" }, 
       Values { "V.17 (G3 Fax Call)", "V.21", "V.22", "V.22bis", 
          "V.23 Constant Carrier (1200/75)", 
          "V.23 Switched Carrier (Half Duplex)", "V.26bis", 
          "V.26ter", "V.27ter (G3 Fax Call)", 
          "V.29 HD (G3 Fax Call)", "V.32", "V.32bis", "V.34", 
          "V.34 HD (G3 Fax Call)", "V.90 Issue 1 (Asymmetric)", 
          "V.90 Issue 2 (Symmetric)", "Reserved (V.58)", "X2", 
          "K56FLEX", "V.FC", "V.32terbo", "Bell 212A", "Bell 103", 
          "Reserved for Mfgs" }]
   uint16 TransmitCarrierNegotiation;

      [Description ( "The active receive modulation scheme." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23..65535" }, 
       Values { "V.17 (G3 Fax Call)", "V.21", "V.22", "V.22bis", 
          "V.23 Constant Carrier (1200/75)", 
          "V.23 Switched Carrier (Half Duplex)", "V.26bis", 
          "V.26ter", "V.27ter (G3 Fax Call)", 
          "V.29 HD (G3 Fax Call)", "V.32", "V.32bis", "V.34", 
          "V.34 HD (G3 Fax Call)", "V.90 Issue 1 (Asymmetric)", 
          "V.90 Issue 2 (Symmetric)", "Reserved (V.58)", "X2", 
          "K56FLEX", "V.FC", "V.32terbo", "Bell 212A", "Bell 103", 
          "Reserved for Mfgs" }]
   uint16 ReceiveCarrierNegotiation;

      [Description ( 
          "Initial transmit carrier data rate for the current or "
          "last call, in bits per second." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 InitialTransmitCarrierDataRate;

      [Description ( 
          "Initial receive carrier data rate for the current or "
          "last call, in bits per second." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 InitialReceiveCarrierDataRate;

      [Description ( 
          "The number of carrier retrains requested during the "
          "current or last call." ), 
       Counter]
   uint8 CarrierRetrainsRequested;

      [Description ( 
          "The number of carrier retrains granted during the "
          "current or last call." ), 
       Counter]
   uint8 CarrierRetrainsGranted;

      [Description ( 
          "Final transmit carrier data rate of the current or last "
          "call, in bits per second." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 FinalTransmitCarrierDataRate;

      [Description ( 
          "Final receive carrier data rate of the current or last "
          "call, in bits per second." ), 
       Units ( "Bits per Second" ), 
       PUnit ( "bit / second" )]
   uint32 FinalReceiveCarrierDataRate;

      [Description ( "Cause of last call termination." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27", 
          "28", "29", "30", "31", "32", "33", "34", "35", "36", 
          "37", "38", "39", "40", "41", "42", "43", "44", "45", 
          "46", "47", "48", "49", "50" }, 
       Values { "Cause Unidentified", "No Previous Call", 
          "Call Is Still in Progress", 
          "Call Waiting Signal Detected", "Delayed", 
          "NMS Initiated Dial Call", 
          "NMS Initiated Leased Line Restoral", 
          "NMS Initiated Redial", "NMS Initiated Dial Disconnect", 
          "Power Loss", 
          // 10               
          "Equipment Failure", 
          "Front Panel Disconnect Requested", 
          "Front Panel Leased Line Restoral", 
          "Automatic Leased Line Restoral", 
          "Inactivity Timer Expired", "cct116 Restoral Request", 
          "cct108 Is Off Inhibits Dial", "cct108 Turned Off", 
          "No Number Provided", "Blacklisted Number", 
          // 20               
          "Call Attempts Limit Exceeded", 
          "Extension Phone Off Hook", 
          "Call Setup Fail Timer Expired", "Incoming Call Detected", 
          "Loop Current Interrupted", "No Dial Tone", 
          "Voice Detected", "Reorder Tone", "Sit Tone", 
          "Engaged Tone", 
          // 30               
          "Long Space Disconnect", 
          "Carrier Lost", "Training Failed", 
          "No Modulation in Common", "Retrain Failed", 
          "Retrain Attempt Count Exceeded", 
          "GSTN Cleardown Received", "Fax Detected", "In Test Mode", 
          "Intrusive Self Test Initiated", 
          // 40               
          "Any Key Abort", 
          "DTE Hangup Command", "DTE Reset Command", "Frame Reject", 
          "No Error Control Established", "Protocol Violation", 
          "n400 Exceeded", "Negotiation Failed", 
          "Disconnect Frame Received", "Sabme Frame Received", 
          // 50               
          "Loss Of Synchronization" }]
   uint16 TerminationCause;

      [Description ( 
          "Diagnostic Command Specification, Unimodem revision number."
           )]
   string UnimodemRevision;

      [Description ( 
          "Estimated noise level for the last or current call in "
          "-dBm. Values are in the range of 0-100." ), 
       Units ( "-dBm" ), 
       Gauge, PUnit ( "decibel(m) * -1" )]
   uint32 EstimatedNoiseLevel;

      [Description ( 
          "Normalized mean squared error for the last or current call."
           )]
   uint32 NormalizedMeanSquaredError;

      [Description ( 
          "Temporary carrier loss event count for the last or current call."
           ), 
       Counter]
   uint8 TemporaryCarrierLossEventCount;

      [Description ( 
          "Carrier Rate renegotiation event count for the last or "
          "current call." ), 
       Counter]
   uint8 CarrierRenegotiationEventCount;

      [Description ( 
          "Error Control frame size in bytes for the last or current call."
           ), 
       Units ( "Bytes" ), 
       PUnit ( "byte" )]
   uint16 ErrorControlFrameSize;

      [Description ( 
          "Error control link timeouts in transmission for the last "
          "or current call." ), 
       Counter]
   uint8 ErrorControlLinkTimeouts;

      [Description ( 
          "Error control link NAKs received for the last or current call."
           ), 
       Counter]
   uint8 ErrorControlLinkNAKs;

      [Description ( 
          "The flow control mechanism used in transmitting data." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Unknown", "Off", "DC1/DC3", "V.24 ckt 106/133" }]
   uint16 TransmitFlowControl;

      [Description ( 
          "The flow control mechanism used in receiving data." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Unknown", "Off", "DC1/DC3", "V.24 ckt 106/133" }]
   uint16 ReceiveFlowControl;

      [Description ( 
          "Number of transmit chars sent from the DTE for the last "
          "or current call. A continuous connection might exceed "
          "this value, given enough time. Typically these counters "
          "are implemented as 32-bit counters, but additional bits "
          "can be provided and are accounted for in this property. "
          "If these counters hit maximum value, the DCE "
          "manufacturer might roll over to 0." ), 
       Counter]
   uint64 TransmitCharsSentFromDTE;

      [Description ( 
          "Number of receive chars sent to the DTE for the last or "
          "current call. A continuous connection might exceed this "
          "value, given enough time. Typically these counters are "
          "implemented as 32-bit counters, but additional bits can "
          "be provided and are accounted for in this property. If "
          "these counters hit maximum value, the DCE manufacturer "
          "might roll over to 0." ), 
       Counter]
   uint64 ReceiveCharsSentToDTE;

      [Description ( 
          "Number of transmit characters lost for the last or "
          "current call. A DCE might limit this counter to 16 bits, "
          "but additional bits can be provided and are accounted "
          "for in this property." ), 
       Counter]
   uint64 TransmitCharsLost;

      [Description ( 
          "Number of receive characters lost for the last or "
          "current call. A DCE might limit this counter to 16 bits, "
          "but additional bits can be provided and are accounted "
          "for in this property." ), 
       Counter]
   uint64 ReceiveCharsLost;

      [Description ( 
          "Number of I-Frames transmitted for the last or current "
          "call. A continuous connection might exceed this value, "
          "given enough time. Typically these counters are "
          "implemented as 32- bit counters, but additional bits can "
          "be provided and are accounted for in this property. If "
          "these counters hit maximum value, the DCE manufacturer "
          "might roll over to 0." ), 
       Counter]
   uint64 TransmitIFrameCount;

      [Description ( 
          "Number of I-Frames received for the last or current "
          "call. A continuous connection might exceed this value, "
          "given enough time. Typically these counters are "
          "implemented as 32-bit counters, but additional bits can "
          "be provided and are accounted for in this property. If "
          "these counters hit maximum value, the DCE manufacturer "
          "might roll over to 0." ), 
       Counter]
   uint64 ReceiveIFrameCount;

      [Description ( 
          "Number of I-Frame errors detected for the last or "
          "current call, if error control protocol is running. A "
          "DCE might limit this counter to 16 bits, but additional "
          "bits can be provided and are accounted for in this "
          "property." ), 
       Counter]
   uint64 TransmitIFrameErrorCount;

      [Description ( 
          "Number of I-Frame errors detected for the last or "
          "current call, if error control protocol is running. A "
          "DCE might limit this counter to 16 bits, but additional "
          "bits can be provided and are accounted for in this "
          "property." ), 
       Counter]
   uint64 ReceivedIFrameErrorCount;

      [Description ( 
          "Number of Call waiting events detected for the last or "
          "current call." ), 
       Counter]
   uint8 CallWaitingEventCount;


};



class UNIX_Unimodem : CIM_Unimodem
{

};

