//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Event" ), 
    Description ( 
       "The description of a CIM Listener destination. A CIM_Listener "
       "is an entity capable of receiving CIM Export Messages (e.g., "
       "Indications or responses to an asynchronous CIM Operation)." )]
class CIM_ListenerDestination : CIM_ManagedElement {

      [Key, Description ( 
          "A System\'s CreationClassName. A CIM Listener "
          "destination is defined in context of a CIM_System (e.g., "
          "the sending system." ), 
       MaxLen ( 256 )]
   string SystemCreationClassName;

      [Key, Description ( 
          "A System\'s Name. A CIM Listener destination is defined "
          "in context of a CIM_System (e.g., the sending system." ), 
       MaxLen ( 256 )]
   string SystemName;

      [Key, Description ( 
          "Indicates the name of the class or the subclass used in "
          "the creation of an instance. When used with the other "
          "key properties of this class, it allows all instances of "
          "this class and its subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Description ( 
          "Indicates the name of the CIM Listener destination." ), 
       MaxLen ( 256 )]
   string Name;

      [Description ( 
          "Describes the Persistence Type of the destination "
          "defined by this instance. If the value of "
          "PersistenceType is not specified, the value of "
          "PersistenceType MUST be treated as 2 (\"Permanent\"). A "
          "value of 2 (\"Permanent\") declares that the destination "
          "is always expected to be available (e.g., system log "
          "file). Inability to access this destination MUST be "
          "treated as an error condition. A value of 3 "
          "(\"Transient\") indicates that the destination is "
          "short-lived. Inability to access the destination MAY be "
          "treated as a normal termination condition. Subscriptions "
          "with \"Transient\" destinations MAY be deleted when the "
          "destination terminates or is no longer available." ), 
       ValueMap { "1", "2", "3" }, 
       Values { "Other", "Permanent", "Transient" }, 
       ModelCorrespondence { 
          "CIM_ListenerDestination.OtherPersistenceType" }]
   uint16 PersistenceType;

      [Description ( 
          "A string describing (\"Other\") values for "
          "PersistenceType. This value MUST be set to a non NULL "
          "value when the PersistenceType is 1 (\"Other\"). For all "
          "other values of PersistenceType, the value of "
          "OtherPersistenceType MUST be NULL." ), 
       ModelCorrespondence { 
          "CIM_ListenerDestination.PersistenceType" }]
   string OtherPersistenceType;

      [Description ( 
          "The destination IETF URI to which Export Messages are to "
          "be delivered. The scheme in the URI must be supported by "
          "theprotocol selected in the Protocol property." )]
   string Destination;

      [Description ( 
          "A free-form string providing a description of the "
          "supported protocols when 1, \"Other\", is specified for "
          "the Protocol." ), 
       ModelCorrespondence { "CIM_ListenerDestination.Protocol" }]
   string OtherProtocol;

      [Description ( 
          "Protocol describes an encoding and protocol which will "
          "be used to deliver the indication. If Other is used, the "
          "value for OtherProtocol must not be null.\n"
          "If a protocol is not specified, 2 \"CIM-XML\" must be "
          "assumed." ), 
       ValueMap { "1", "2", "3", "4", "5", ".." }, 
       Values { "Other", "CIM-XML", "SM CLP", "WS-Management", 
          "WSDM", "DMTF Reserved" }, 
       ModelCorrespondence { "CIM_ListenerDestination.OtherProtocol" }]
   uint16 Protocol = 2;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Event" ), 
    Description ( 
       "CIM_ListenerDestinationWSManagement describes the destination "
       "for CIM indications to be delivered via WS-Management." )]
class CIM_ListenerDestinationWSManagement : CIM_ListenerDestination {

      [Required, Override ( "Destination" ), 
       Description ( 
          "The destination URL defined in the WS-Eventing Subscribe "
          "message. This must match the wsa:Address element in the "
          "wse:NotifyTo EPR. The value may be the WS-Addressing "
          "anonymous URI if the subscription uses or employs a Pull "
          "mode." )]
   string Destination;

      [Description ( 
          "Separate To address for notice of abnormal subscription "
          "termination." )]
   string DestinationEndTo;

      [Description ( 
          "If the events contain localized content, the service "
          "should accept a subscription with this Locale block "
          "acting as a hint. The language of the event message is "
          "encoded in an xml:lang attribute using RFC 3066 language "
          "codes. The service should attempt to localize any "
          "descriptive content to the specified language when "
          "delivering such events." )]
   string Locale;

      [Description ( 
          "This block acts as a hint to indicate how the delivered "
          "events should be encoded. The two standard tokens "
          "defined for this purpose are \"UTF-8\" or \"UTF-16\", "
          "although other encoding formats may be specified if "
          "necessary." )]
   string ContentEncoding;

      [Description ( 
          "Method by which the service is to deliver events to the "
          "client. Values are as follows. Push (2): the event is "
          "sent to the destination address; depending on the "
          "protocol, delivery may not be guaranteed. PushWithAck "
          "(3): the service sends the event and waits for a "
          "specific acknowledgment message from the subscriber. "
          "Events (4): the service collects events into batches and "
          "sends the batches to the subscriber. Pull (5): the "
          "service collects the events into batches and the "
          "subscriber pulls each batch from the service using "
          "wxf:Pull." ), 
       ValueMap { "2", "3", "4", "5", "..", "32787.." }, 
       Values { "Push", "PushWithAck", "Events", "Pull", 
          "DMTF Reserved", "Vendor Reserved" }]
   uint16 DeliveryMode;

      [Description ( 
          "Specifies how often heartbeat events are added to the "
          "event stream at the specified interval." ), 
       Units ( "Seconds" )]
   uint64 Heartbeat;

      [Description ( 
          "A property element that instructs the service to send a "
          "bookmark with each event. Bookmarks apply to all "
          "delivery modes. The bookmark is a token which represents "
          "an abstract pointer in the event stream, but whether it "
          "points to the last delivered event or the last event "
          "plus one (the upcoming event) makes no difference since "
          "the token is supplied to the same implementation during "
          "a subsequent wse:Subscribe operation. The service may "
          "thus attach any service-specific meaning and structure "
          "to the bookmark with no change to the client." )]
   boolean SendBookmark;

      [Description ( 
          "This element may contain a duration that indicates the "
          "maximum amount of time the service should allow to "
          "elapse while batching EVENT bodies. That is, this time "
          "may not be exceeded between the encoding of the first "
          "event in the batch and the dispatching of the batch for "
          "delivery." ), 
       Units ( "Seconds" )]
   uint64 MaxTime;

      [Description ( 
          "A URI identifying the WS-Management security profile to "
          "be used by the service (acting as publisher) when "
          "authenticating to the event sink (consumer) at event "
          "delivery time." )]
   string DeliveryAuth;

      [Description ( 
          "Specifies the treatment of Indication subclasses, "
          "whether subclasses are to be included and with what set "
          "of properties. Valid values are: None, "
          "IncludeSubclassProperties, and "
          "ExcludeSubclassProperties. Using None, only instances of "
          "the parent class are included in the output (event "
          "stream). For other modes, subclass instances are "
          "included with the sets of properties stated." ), 
       ValueMap { "1", "2", "3", ".." }, 
       Values { "None", "IncludeSubclassProperties", 
          "ExcludeSubclassProperties", "DMTF Reserved" }]
   uint16 PolyMorphismMode;


};



class UNIX_ListenerDestinationWSManagement : CIM_ListenerDestinationWSManagement
{

};

