//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Device" ), 
    Description ( 
       "CIM_Realizes is the association that defines the mapping "
       "between LogicalDevices and the PhysicalElements that implement "
       "them." )]
class CIM_Realizes : CIM_Dependency {

      [Override ( "Antecedent" ), 
       Description ( 
          "The physical component that implements the Device." )]
   CIM_PhysicalElement REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( "The LogicalDevice." )]
   CIM_LogicalDevice REF Dependent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Device::StorageExtents" ), 
    Description ( 
       "StorageExtents can be realized by PhysicalComponents. For "
       "example, disks or tapes are realized by PhysicalMedia. Memory "
       "is realized by PhysicalMemory. This relationship of Extents to "
       "PhysicalComponents is made explicit by the RealizesExtent "
       "association. In addition, the StartingAddress of the "
       "StorageExtent on the Component is specified here." )]
class CIM_RealizesExtent : CIM_Realizes {

      [Override ( "Antecedent" ), 
       Max ( 1 ), 
       Description ( 
          "The PhysicalComponent on which the Extent is realized." )]
   CIM_PhysicalComponent REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "The StorageExtent that is located on the Component." )]
   CIM_StorageExtent REF Dependent;

      [Description ( 
          "The starting address on the PhysicalComponent where the "
          "StorageExtent begins. Ending address of the "
          "StorageExtent is determined using the NumberOfBlocks and "
          "Block Size properties of the StorageExtent object." )]
   uint64 StartingAddress;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Device::StorageExtents" ), 
    Description ( 
       "DiskPartitions can be directly realized on a PhysicalMedia. "
       "This is used to model the creation of Partitions on a raw SCSI "
       "or IDE drive, using the fdisk (DOS and Unix) or pdisk (Unix) "
       "command. The StartingAddress of the DiskPartition on the "
       "PhysicalMedia is also specified as a property of this "
       "relationship. An alternative is that Partitions can be BasedOn "
       "StorageVolumes, such as a VolumeSet or a Volume exposed by a "
       "hardware RAID cabinet. The latter relationship is modeled "
       "using the DiskPartitionBasedOnVolume association." )]
class CIM_RealizesDiskPartition : CIM_RealizesExtent {

      [Override ( "Antecedent" ), 
       Max ( 1 ), 
       Description ( 
          "The PhysicalMedia on which the Extent is realized." )]
   CIM_PhysicalMedia REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "The DiskPartition that is located on the Media." )]
   CIM_DiskPartition REF Dependent;


};



class UNIX_RealizesDiskPartition : CIM_RealizesDiskPartition
{

};

