//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};


// Copyright (c) 2009 DMTF.  All Rights Reserved.
   [Version ( "2.23.0" ), 
    UMLPackagePath ( "CIM::Application::DeploymentModel" ), 
    Description ( 
       "The CIM_SoftwareElement class is used to decompose a "
       "CIM_SoftwareFeature object into a set of individually "
       "manageable or deployable parts, for a particular platform. A "
       "SoftwareElement\'s platform is uniquely identified by its "
       "underlying hardware architecture and operating system (for "
       "example Sun Solaris on Sun Sparc or Windows NT on Intel "
       "platforms). As such, to understand the details of how the "
       "functionality of a particular SoftwareFeature is provided on a "
       "particular platform, the CIM_SoftwareElement objects "
       "referenced by CIM_SoftwareFeatureSoftwareElements associations "
       "are organized in disjoint sets based on the "
       "TargetOperatingSystem property. A CIM_SoftwareElement object "
       "captures the management details of a part or component in one "
       "of four states characterized by the SoftwareElementState "
       "property." )]
class CIM_SoftwareElement : CIM_LogicalElement {

      [Key, Override ( "Name" ), 
       Description ( 
          "The name used to identify this SoftwareElement." ), 
       MaxLen ( 256 )]
   string Name;

      [Key, Description ( 
          "Software Version should be in the form "
          "<Major>.<Minor>.<Revision> or "
          "<Major>.<Minor><letter><revision>." ), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|SubComponent Software |001.4" }]
   string Version;

      [Key, Description ( 
          "The SoftwareElementState is defined in this model to "
          "identify various states of a SoftwareElement\'s life "
          "cycle. \n"
          "- A SoftwareElement in the deployable state describes "
          "the details necessary to successfully distribute it and "
          "the details (Checks and Actions) required to move it to "
          "the installable state (i.e, the next state). \n"
          "- A SoftwareElement in the installable state describes "
          "the details necessary to successfully install it and the "
          "details (Checks and Actions) required to create an "
          "element in the executable state (i.e., the next state). \n"
          "- A SoftwareElement in the executable state describes "
          "the details necessary to successfully start it and the "
          "details (Checks and Actions) required to move it to the "
          "running state (i.e., the next state). \n"
          "- A SoftwareElement in the running state describes the "
          "details necessary to manage the started element." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Deployable", "Installable", "Executable", "Running" }]
   uint16 SoftwareElementState;

      [Key, Description ( 
          "This is an identifier for the SoftwareElement and is "
          "designed to be used in conjunction with other keys to "
          "create a unique representation of the element." ), 
       MaxLen ( 256 )]
   string SoftwareElementID;

      [Key, Description ( 
          "The TargetOperatingSystem property specifies the "
          "element\'s operating system environment. The value of "
          "this property does not ensure that it is binary "
          "executable. Two other pieces of information are needed. "
          "First, the version of the OS needs to be specified using "
          "the class, CIM_OSVersion Check. The second piece of "
          "information is the architecture that the OS runs on. "
          "This information is verified using "
          "CIM_ArchitectureCheck. The combination of these "
          "constructs clearly identifies the level of OS required "
          "for a particular SoftwareElement." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27", 
          "28", "29", "30", "31", "32", "33", "34", "35", "36", 
          "37", "38", "39", "40", "41", "42", "43", "44", "45", 
          "46", "47", "48", "49", "50", "51", "52", "53", "54", 
          "55", "56", "57", "58", "59", "60", "61", "62", "63", 
          "64", "65", "66", "67", "68", "69", "70", "71", "72", 
          "73", "74", "75", "76", "77", "78", "79", "80", "81", 
          "82", "83", "84", "85", "86", "87", "88", "89", "90", 
          "91", "92", "93", "94", "95", "96", "97", "98", "99", 
          "100", "101", "102", "103", "104", "105", "106", "107", 
          "108", "109", "110", "111", "113", "114", "115" }, 
       Values { "Unknown", "Other", "MACOS", "ATTUNIX", "DGUX", 
          "DECNT", "Tru64 UNIX", "OpenVMS", "HPUX", "AIX", 
          //10 
          "MVS", "OS400", "OS/2", "JavaVM", "MSDOS", 
          "WIN3x", "WIN95", "WIN98", "WINNT", "WINCE", 
          //20 
          "NCR3000", "NetWare", "OSF", "DC/OS", 
          "Reliant UNIX", "SCO UnixWare", "SCO OpenServer", 
          "Sequent", "IRIX", "Solaris", //30 
          "SunOS", 
          "U6000", "ASERIES", "HP NonStop OS", "HP NonStop OSS", 
          "BS2000", "LINUX", "Lynx", "XENIX", "VM", 
          //40 
          "Interactive UNIX", "BSDUNIX", "FreeBSD", 
          "NetBSD", "GNU Hurd", "OS9", "MACH Kernel", "Inferno", 
          "QNX", "EPOC", //50 
          "IxWorks", "VxWorks", 
          "MiNT", "BeOS", "HP MPE", "NextStep", "PalmPilot", 
          "Rhapsody", "Windows 2000", "Dedicated", 
          //60 
          "OS/390", "VSE", "TPF", "Windows (R) Me", 
          "Caldera Open UNIX", "OpenBSD", "Not Applicable", 
          "Windows XP", "z/OS", "Microsoft Windows Server 2003", 
          //70
          "Microsoft Windows Server 2003 64-Bit", 
          "Windows XP 64-Bit", "Windows XP Embedded", 
          "Windows Vista", "Windows Vista 64-Bit", 
          "Windows Embedded for Point of Service", 
          "Microsoft Windows Server 2008", 
          "Microsoft Windows Server 2008 64-Bit", "FreeBSD 64-Bit", 
          "RedHat Enterprise Linux", 
          //80
          "RedHat Enterprise Linux 64-Bit", 
          "Solaris 64-Bit", "SUSE", "SUSE 64-Bit", "SLES", 
          "SLES 64-Bit", "Novell OES", "Novell Linux Desktop", 
          "Sun Java Desktop System", "Mandriva", 
          //90
          "Mandriva 64-Bit", "TurboLinux", 
          "TurboLinux 64-Bit", "Ubuntu", "Ubuntu 64-Bit", "Debian", 
          "Debian 64-Bit", "Linux 2.4.x", "Linux 2.4.x 64-Bit", 
          "Linux 2.6.x", //100
          "Linux 2.6.x 64-Bit", 
          "Linux 64-Bit", "Other 64-Bit", 
          "Microsoft Windows Server 2008 R2", "VMware ESXi", 
          "Microsoft Windows 7", "CentOS 32-bit", "CentOS 64-bit", 
          "Oracle Linux 32-bit", "Oracle Linux 64-bit", 
          //110 
          "eComStation 32-bitx", 
          "Microsoft Windows Server 2011", 
          "Microsoft Windows Server 2012", "Microsoft Windows 8", 
          "Microsoft Windows 8 64-bit" }, 
       MappingStrings { "MIF.DMTF|SubComponent Software|001.8" }, 
       ModelCorrespondence { "CIM_OperatingSystem.OSType" }]
   uint16 TargetOperatingSystem;

      [Description ( 
          "The OtherTargetOS property records the manufacturer and "
          "operating system type for a SoftwareElement when the "
          "TargetOperatingSystem property has a value of 1 "
          "(\"Other\"). For all other values of "
          "TargetOperatingSystem, the OtherTargetOS property is "
          "NULL." ), 
       MaxLen ( 64 ), 
       ModelCorrespondence { 
          "CIM_OperatingSystem.OtherTypeDescription" }]
   string OtherTargetOS;

      [Description ( "Manufacturer of this SoftwareElement." ), 
       MaxLen ( 256 ), 
       MappingStrings { "MIF.DMTF|SubComponent Software|001.3" }]
   string Manufacturer;

      [Description ( 
          "The internal identifier for this compilation of SoftwareElement."
           ), 
       MaxLen ( 64 ), 
       MappingStrings { 
          "MIF.DMTF|Software Component Information|002.4" }]
   string BuildNumber;

      [Description ( 
          "The assigned serial number of this SoftwareElement." ), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.4" }]
   string SerialNumber;

      [Description ( 
          "The code set used by this SoftwareElement. It defines "
          "the bit patterns that a system uses to identify "
          "characters. ISO defines various code sets such as UTF-8 "
          "and ISO8859-1." ), 
       MaxLen ( 64 )]
   string CodeSet;

      [Description ( 
          "The manufacturer\'s identifier for this SoftwareElement. "
          "Often this will be a stock keeping unit (SKU) or a part "
          "number." ), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|SubComponent Software|001.6" }]
   string IdentificationCode;

      [Description ( 
          "The value of this property identifies the language "
          "edition of this SoftwareElement. The language codes "
          "defined in ISO 639 should be used. Where the element "
          "represents a multi-lingual or international version, the "
          "string \"Multilingual\" should be used." ), 
       MaxLen ( 32 ), 
       MappingStrings { "MIF.DMTF|SubComponent Software|001.7" }]
   string LanguageEdition;


};




class CIM_VideoBIOSElement : CIM_VideoBIOSElement
{

};

// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Application::BIOS" ), 
    Description ( 
       "VideoBIOSElement represents the low-level software that is "
       "loaded into non-volatile storage and used to bring up, "
       "configure and access a ComputerSystem\'s VideoController and "
       "Display." )]
class CIM_VideoBIOSElement : CIM_SoftwareElement {

      [Override ( "Version" ), 
       MappingStrings { "MIF.DMTF|Video BIOS|001.3" }]
   string Version;

      [Override ( "Manufacturer" ), 
       MappingStrings { "MIF.DMTF|Video BIOS|001.2" }]
   string Manufacturer;

      [Description ( 
          "If true, indicates that the Video BIOS is shadowed." ), 
       MappingStrings { "MIF.DMTF|Video BIOS|001.5" }]
   boolean IsShadowed;

      [Description ( "Date that this BIOS was released." ), 
       MappingStrings { "MIF.DMTF|Video BIOS|001.4" }]
   datetime ReleaseDate;


};



class UNIX_VideoBIOSElement : CIM_VideoBIOSElement
{

};

