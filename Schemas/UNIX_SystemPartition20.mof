//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Aggregation, Version ( "2.7.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Component is a generic association used to establish \'part "
       "of\' relationships between Managed Elements. For example, it "
       "could be used to define the components or parts of a System." )]
class CIM_Component {

      [Key, Aggregate, Description ( 
          "The parent element in the association." )]
   CIM_ManagedElement REF GroupComponent;

      [Key, Description ( "The child element in the association." )]
   CIM_ManagedElement REF PartComponent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Aggregation, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_SystemComponent is a specialization of the CIM_Component "
       "association that establishes \'part of\' relationships between "
       "a System and any ManagedSystemElements of which it is "
       "composed. \n"
       "Use this association with caution when using it instead of a "
       "subclass such as SystemDevice or a peer association such as "
       "HostedService. This class is very broadly defined, which can "
       "lead to erroneous use. For example, Access Points that are "
       "dependent on (and hosted on) a System are NOT Components of "
       "the System. The System is not made up of any AccessPoint "
       "\'parts\', which is why a Dependency association, "
       "HostedAccessPoint, was defined. Similarly, a PhysicalPackage "
       "is not a \'part\' of a System, because the physical element "
       "exists independently of any internal components, software, and "
       "so on. In fact, again, a Dependency relationship is true where "
       "a ComputerSystem is Dependent on its packaging, as described "
       "by the ComputerSystemPackage association." )]
class CIM_SystemComponent : CIM_Component {

      [Aggregate, Override ( "GroupComponent" ), 
       Description ( "The parent System in the Association." )]
   CIM_System REF GroupComponent;

      [Override ( "PartComponent" ), 
       Description ( 
          "The child element that is a component of a System." )]
   CIM_ManagedSystemElement REF PartComponent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Aggregation, Composition, Version ( "2.13.0" ), 
    UMLPackagePath ( "CIM::System::SystemElements" ), 
    Description ( 
       "A ComputerSystem can aggregate another ComputerSystem. This "
       "association can be used to model MPP Systems with workstation "
       "frontends, an I2O subsystem embedded in a Unitary "
       "ComputerSystem, or a System that splits functionality between "
       "two processors, potentially running different Operating "
       "Systems. For example, if a CISC Processor and its associated "
       "OperatingSystem, are used for user interface and file support, "
       "and a RISC Processor and its OS are used for complex "
       "mathematical operations, this could be modeled as two "
       "ComputerSystems where one aggregates the other. In some cases, "
       "this could be modeled as a Cluster. The difference is the "
       "focus of the relationship. ComponentCS represents that unique "
       "and distinct ComputerSystems are aggregated by a higher level "
       "CS object. However, each of the component CSs are still "
       "distinguishable entities and are only viewed as such. "
       "Alternately, with a Cluster, the ComputerSystems that "
       "participate in it are inconsequential, when viewed through the "
       "\'Cluster System\'. \n"
       "\n"
       "When instantiating or subclassing the ComponentCS "
       "relationship, care should be taken that the component "
       "ComputerSystem meets the definitional requirements of a "
       "ComputerSystem - ie, a functional whole that provides compute "
       "capabilities and aggregates System Devices, an "
       "OperatingSystem, etc." )]
class CIM_ComponentCS : CIM_SystemComponent {

      [Aggregate, Override ( "GroupComponent" ), 
       MAX ( 1 ), 
       Description ( 
          "The ComputerSystem that contains and/or aggregates other Systems."
           )]
   CIM_ComputerSystem REF GroupComponent;

      [Override ( "PartComponent" ), 
       Description ( "The contained (Sub)ComputerSystem." )]
   CIM_ComputerSystem REF PartComponent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Deprecated { "CIM_HostedDependency" }, 
    Aggregation, Composition, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::System::SystemElements" ), 
    Description ( 
       "A Partition is an instance of a UnitaryComputerSystem (with "
       "its own OperatingSystem and Devices dedicated to the "
       "Partition) that is supported by underlying hardware and "
       "software. A Partition is not a virtualization of a Computer "
       "System, but the segmentation of the System\'s compute "
       "capabilities. Partitions can run independent copies of "
       "possibly different OperatingSystems and have dedicated "
       "Devices. The \'real\', underlying System (perhaps a Cluster or "
       "another UnitaryComputerSystem) aggregates its Partitions. "
       "These semantics are described by the System Partition "
       "association. \n"
       "The use of this association has been deprecated in lieu of "
       "using HostedDependency." )]
class CIM_SystemPartition : CIM_ComponentCS {

      [Deprecated { "CIM_HostedDependency.Antecedent" }, 
       Aggregate, Override ( "GroupComponent" ), 
       Max ( 1 ), 
       Description ( 
          "The \'underlying\' ComputerSystem that hosts a Partition." )]
   CIM_ComputerSystem REF GroupComponent;

      [Deprecated { "CIM_HostedDependency.Antecedent" }, 
       Override ( "PartComponent" ), 
       Description ( "The System Partition." )]
   CIM_UnitaryComputerSystem REF PartComponent;


};



class UNIX_SystemPartition : CIM_SystemPartition
{

};

