//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


   [Abstract, Version ( "2.25.0" ), 
    UMLPackagePath ( "CIM::System::Logs" ), 
    Description ( 
       "The RecordForLog class is used to instantiate records to be "
       "aggregated to a Log." )]
class CIM_RecordForLog : CIM_ManagedElement {

      [Description ( 
          "A string describing the data structure of the "
          "information in the property, RecordData. If the "
          "RecordFormat string is <empty>, RecordData should be "
          "interpreted as a free-form string. \n"
          "\n"
          "To describe the data structure of RecordData, the "
          "RecordFormat string should be constructed as follows: \n"
          "- The first character is a delimiter character and is "
          "used to parse the remainder of the string into "
          "sub-strings. \n"
          "- Each sub-string is separated by the delimiter "
          "character and should be in the form of a CIM property "
          "declaration (i.e., datatype and property name). This set "
          "of declarations may be used to interpret the similarly "
          "delimited RecordData property. \n"
          "For example, using a \'*\' delimiter, RecordFormat = "
          "\"*string ThisDay*uint32 ThisYear*datetime SomeTime\" \n"
          "may be used to interpret: RecordData = \"*This is "
          "Friday*2002*20020807141000.000000-300\"." ), 
       ModelCorrespondence { "CIM_RecordForLog.RecordData" }]
   string RecordFormat;

      [Description ( 
          "A string containing LogRecord data. \n"
          "If the corresponding RecordFormat property is <empty>, "
          "or cannot be parsed according to the recommended format, "
          "RecordData should be interpreted as a free-form string. "
          "If the RecordFormat property contains parseable format "
          "information (as recommended in the RecordFormat "
          "Description qualifier), the RecordData string SHOULD be "
          "parsed in accordance with this format. In this case, "
          "RecordData SHOULD begin with the delimiter character and "
          "this character SHOULD be used to separate substrings in "
          "the manner described. The RecordData string can then be "
          "parsed by the data consumer and appropriately typed." ), 
       ModelCorrespondence { "CIM_RecordForLog.RecordFormat" }]
   string RecordData;

      [Description ( 
          "A locale indicates a particular geographical, political, "
          "or cultural region. The Locale specifies the language "
          "used in creating the RecordForLog data. If the Locale "
          "property is empty, it is assumed that the default locale "
          "is en_US (English). \n"
          "The locale string consists of three sub-strings, "
          "separated by underscores: \n"
          "- The first sub-string is the language code, as "
          "specified in ISO639. \n"
          "- The second sub-string is the country code, as "
          "specified in ISO3166. \n"
          "- The third sub-string is a variant, which is vendor "
          "specific. \n"
          "For example, US English appears as: \"en_US_WIN\", where "
          "the \"WIN\" variant would specify a Windows "
          "browser-specific collation (if one exists). Since the "
          "variant is not standardized, it is not commonly used and "
          "generally is limited to easily recognizable values "
          "(\"WIN\", \"UNIX\", \"EURO\", etc.) used in standard "
          "environments. The language and country codes are "
          "required; the variant may be empty." )]
   string Locale;

      [Description ( 
          "An enumerated value that describes the severity of the "
          "Indication from the notifier\'s point of view: \n"
          "1 - Other, by CIM convention, is used to indicate that "
          "the Severity\'s value can be found in the OtherSeverity "
          "property. \n"
          "3 - Degraded/Warning should be used when its appropriate "
          "to let the user decide if action is needed. \n"
          "4 - Minor should be used to indicate action is needed, "
          "but the situation is not serious at this time. \n"
          "5 - Major should be used to indicate action is needed "
          "NOW. \n"
          "6 - Critical should be used to indicate action is needed "
          "NOW and the scope is broad (perhaps an imminent outage "
          "to a critical resource will result). \n"
          "7 - Fatal/NonRecoverable should be used to indicate an "
          "error occurred, but it\'s too late to take remedial "
          "action. \n"
          "2 and 0 - Information and Unknown (respectively) follow "
          "common usage. Literally, the Indication is purely "
          "informational or its severity is simply unknown." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "Information", 
          "Degraded/Warning", "Minor", "Major", "Critical", 
          "Fatal/NonRecoverable" }, 
       MappingStrings { "Recommendation.ITU|X733.Perceived severity" }]
   uint16 PerceivedSeverity;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::System::Diagnostics" ), 
    Description ( 
       "Data related to Diagnostics may be recorded in various "
       "DiagnosticRecord objects. The type of information that is "
       "recorded in a log is specified via the LogOptions property in "
       "DiagnosticSetting." )]
class CIM_DiagnosticRecord : CIM_RecordForLog {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Description ( 
          "This property should reflect the value of the underlying "
          "DiagnosticService.Name property." ), 
       ModelCorrespondence { "CIM_DiagnosticService.Name" }]
   string ServiceName;

      [Required, Description ( 
          "This property SHOULD reflect the value of the underlying "
          "ManagedElement.ElementName property." ), 
       ModelCorrespondence { "CIM_ManagedElement.ElementName" }]
   string ManagedElementName;

      [Description ( 
          "The date and time that the record instance should be "
          "deleted. The expiration datetime SHOULD be set when the "
          "record is fully populated with record data. The value "
          "SHOULD be calculated using the ResultPersistence "
          "property of the DiagnosticSetting class. Once the "
          "Expiration Date has been reached, record instances "
          "SHOULD be deleted as soon as possible.\n"
          "If a ResultPersistence value is not provided, records "
          "MAY be deleted at any time." ), 
       ModelCorrespondence { 
          "CIM_DiagnosticSetting.ResultPersistence" }]
   datetime ExpirationDate;

      [Description ( 
          "The RecordType property specifies the nature of the data "
          "being entered into the ServiceRecord. The value in this "
          "property should match one of the values indicated by the "
          "DiagnosticSetting.LogOptions property. A brief summary "
          "of the various log options can be found in "
          "CIM_DiagnosticSetting.LogOptions." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14" }, 
       Values { "Unknown", "Other", "Results", "Subtests", 
          "Actions", "Warnings", "Status", "Device Errors", 
          "Service Errors", "Setting Data", "Statistics", 
          "Hardware Configuration", "Software Configuration", 
          "References", "Debug" }, 
       ModelCorrespondence { "CIM_DiagnosticSetting.LogOptions", 
          "CIM_DiagnosticRecord.OtherRecordTypeDescription" }]
   uint16 RecordType;

      [Description ( 
          "When \"Other\" (value=1) is entered in the RecordType "
          "property, OtherRecordTypeDescription can be used to "
          "describe the message type." ), 
       ModelCorrespondence { 
          "CIM_DiagnosticSetting.OtherLogOptionsDescriptions", 
          "CIM_DiagnosticRecord.RecordType" }]
   string OtherRecordTypeDescription;

      [Description ( 
          "A timestamp indicating when the record was created." )]
   datetime CreationTimeStamp;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::System::Diagnostics" ), 
    Description ( 
       "While a DiagnosticService is running, data generated by the "
       "service may be recorded in DiagnosticServiceRecord objects. A "
       "DiagnosticServiceRecord is related to its Log via an instance "
       "of the LogManagesRecord aggregation class." )]
class CIM_DiagnosticServiceRecord : CIM_DiagnosticRecord {

      [Description ( 
          "If applicable, this string should contain one or more "
          "vendor specific error codes that the diagnostic service "
          "detected. These error codes may be used by the vendor "
          "for variety of purposes such as: fault data base "
          "indexing, field service trouble ticketing, product "
          "quality tracking, part failure history, etc. Since these "
          "codes are for vendor purposes they may assume any form. "
          "Details on suggested use cases will be left to white "
          "papers. The array of error codes has model "
          "correspondence with an ErrorCount array so the number of "
          "errors reported can be analyzed by individual error "
          "code." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_DiagnosticServiceRecord.ErrorCount" }]
   string ErrorCode[];

      [Description ( 
          "Since some tests may detect transient and correctable "
          "errors such as a network diagnostic or memory test, an "
          "error count is useful to indicate the severity of the "
          "failure. This field contains an integer value of the "
          "number of errors detected by the test. The ErrorCount is "
          "an array with model correspondence to ErrorCode so that "
          "the test can report an ErrorCount on each type of error "
          "encountered. It is recommended that hard errors and "
          "correctable or recoverable errors be given different "
          "codes so that clients with knowledge of the error codes "
          "can evaluate correctable, recoverable, and hard errors "
          "independently." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_DiagnosticServiceRecord.ErrorCode" }]
   uint32 ErrorCount[];

      [Description ( 
          "Since some tests may be looped, it is useful to report "
          "how many iterations passed and failed. This is relevant "
          "in analyzing transitory failures. For example, if all "
          "the errors occurred in just one of 100 iterations, the "
          "device may be viewed as OK or marginal, to be monitored "
          "further rather then failed. Note: LoopsPassed & "
          "LoopsFailed should add up to the loops completed. \n"
          "A value for this property would likely be reported with "
          "a DiagnosticServiceRecord.RecordType value = \"Results\", "
          "which contains a result covering all iterations of a "
          "looped service." )]
   uint32 LoopsFailed;

      [Description ( 
          "Since some tests may be looped, it is useful to report "
          "how many iterations passed and failed. This is relevant "
          "in analyzing transitory failures. For example if all the "
          "errors occurred in just one of 100 iterations, the "
          "device may be viewed as OK or marginal, to be monitored "
          "further rather then failed. Note: LoopsPassed & "
          "LoopsFailed should add up to the loops completed. \n"
          "A value for this property would likely be reported with "
          "a DiagnosticServiceRecord.RecordType value = \"Results\", "
          "which contains a result covering all iterations of a "
          "looped service." )]
   uint32 LoopsPassed;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.11.0" ), 
    UMLPackagePath ( "CIM::System::Diagnostics" ), 
    Description ( 
       "When a DiagnosticService has completed, results generated by "
       "the service will be recorded in a DiagnosticCompletionRecord "
       "object. This class is used when a DiagnosticRecord.RecordType "
       "value = \"Results\", to contain completion information." )]
class CIM_DiagnosticCompletionRecord : CIM_DiagnosticServiceRecord {

      [Description ( 
          "This property is used when a DiagnosticRecord.RecordType "
          "value = \"Results\", to record how the test has "
          "completed. It is expected that additional "
          "DiagnosticServiceRecords of RecordType \"Service "
          "Errors\", \"Warning\" or \"Device Errors\" would be "
          "created by the test to describe the details of a "
          "\"Warning\", \"Incomplete\" or \"Failed\" "
          "CompletionState, respectively. \n"
          "\" Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the element\'s state "
          "and configuration may need to be updated. \n"
          "\"Warning\" means the element had a problem but did not "
          "fail the test. \n"
          "\"Failed\" and \"Incomplete\" are similar, although the "
          "former means the test on the element failed, while the "
          "latter means the test itself had a problem and could not "
          "complete execution." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "OK", "Warning", "Incomplete", 
          "Failed", "Aborted", "Stopped" }, 
       ModelCorrespondence { 
          "CIM_DiagnosticCompletionRecord.OtherCompletionStateDescription" }]
   uint16 CompletionState;

      [Description ( 
          "When \"Other\" (value=1) is entered in the "
          "CompletionState property, "
          "OtherCompletionStateDescription can be used to describe "
          "the test\'s state." ), 
       ModelCorrespondence { 
          "CIM_DiagnosticCompletionRecord.CompletionState" }]
   string OtherCompletionStateDescription;


};



class UNIX_DiagnosticCompletionRecord : CIM_DiagnosticCompletionRecord
{

};

