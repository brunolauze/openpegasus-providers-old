//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2012 DMTF.  All rights reserved.
   [Abstract, Version ( "2.33.0" ), 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "CIM_SettingData is used to represent configuration and and "
       "operational parameters for CIM_ManagedElement instances. There "
       "are a number of different uses of CIM_SettingData supported in "
       "the model today. Additional uses may be defined in the future.\n"
       "Instances of CIM_SettingData may represent Aspects of a "
       "CIM_ManagedElement instance. This is modeled using the "
       "CIM_SettingsDefineState association. CIM_SettingData may be "
       "used to define capabilities when associated to an instance of "
       "CIM_Capabilities through the CIM_SettingsDefineCapabilities "
       "association. \n"
       "Instances of CIM_SettingData may represent different types of "
       "configurations for a CIM_ManagedElement, including persistent "
       "configurations, in progress configuration changes, or "
       "requested configurations. The CIM_ElementSettingData "
       "association is used to model the relationship between a "
       "CIM_SettingData instance and the CIM_ManagedElement for which "
       "it is a configuration. \n"
       "When an instance of CIM_SettingData represents a "
       "configuration, the current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations." )]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of SettingData. "
          "In addition, the user-friendly name can be used as an "
          "index property for a search or query. (Note: The name "
          "does not have to be unique within a namespace.)" )]
   string ElementName;

      [Description ( 
          "Enumeration indicating the type of setting. 0 \"Not "
          "Changeable - Persistent\" indicates the instance of "
          "SettingData represents primordial settings and shall not "
          "be modifiable. 1 \"Changeable - Transient\" indicates "
          "the SettingData represents modifiable settings that are "
          "not persisted. Establishing persistent settings from "
          "transient settings may be supported. 2 \"Changeable - "
          "Persistent\" indicates the SettingData represents a "
          "persistent configuration that may be modified. 3 \"Not "
          "Changeable - Transient\" indicates the SettingData "
          "represents a snapshot of the settings of the associated "
          "ManagedElement and is not persistent." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Not Changeable - Persistent", 
          "Changeable - Transient", "Changeable - Persistent", 
          "Not Changeable - Transient" }]
   uint16 ChangeableType;

      [Description ( 
          "An instance of CIM_SettingData may correspond to a "
          "well-known configuration that exists for an associated "
          "CIM_ManagedElement. If the ConfigurationName property is "
          "non-NULL, the instance of CIM_SettingData shall "
          "correspond to a well-known configuration for a Managed "
          "Element, the value of the ConfigurationName property "
          "shall be the name of the configuration, and the "
          "ChangeableType property shall have the value 0 or 2. A "
          "value of NULL for the ConfigurationName property shall "
          "mean that the instance of CIM_SettingData does not "
          "correspond to a well-known configuration for a Managed "
          "Element or that this information is unknown." )]
   string ConfigurationName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.11.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "StorageSetting is roughly equivalent to a Service Level "
       "Agreement (SLA) It defines the characteristics, qualities of "
       "service and goals when used in a CreateOrModifyElement "
       "FromStoragePool or CreateOrModifyStoragePool method in the "
       "StorageConfigurationService. It specifies a series of "
       "properties with Maximum and Minimum values that define the "
       "(inclusive) bounds that the object should maintain. Note that "
       "the setting is associated to a StorageVolume or LogicalDisk, "
       "using ElementSetting. \n"
       "The use of these properties differs depending on whether the "
       "StorageSetting instance is being used as a goal for a "
       "configuration operation or being used as a Service Level "
       "Agreement for a created Volume. In addition the properties "
       "fall into two categories: The QOS "
       "properties(PackageRedundancy, Data Redundancy, & "
       "NoSinglePointOfFailure) and the Detailed RAID "
       "properties(ExtentStripeLength, ParityLayout, and "
       "UserDataStripeDepth). In a Setting used as a goal, the QOS "
       "properties are required as a set; The Detailed RAID "
       "properties(if supported as indicated by the scoping "
       "StorageCapabilities instance) may be used optionally in any "
       "combination. The implementation MUST supply it\'s own best "
       "practice in the case where one or more supported RAID "
       "properties are not supplied. In this situation the use of "
       "StorageSettingWithHints can be useful to provide direction to "
       "the implementation. \n"
       "In a Setting used as a service agreement for a Volume, the QOS "
       "properties reflect the Service Level Agreement, with goal, "
       "min, & max. The actual current service level is exposed by "
       "corresponding values in StorageExtent. \n"
       "The Detailed RAID properties, by contrast, reflect specific "
       "values that reflect the RAID construction of the Volume. Only "
       "the primary values are meaningful; Min and Max are set to "
       "match. \n"
       "Certain StorageSetting instances may be classed as \"Fixed\", "
       "by using the \"ChangeableType\" property, indicating the "
       "setting is preset. Such settings are used when the possible "
       "setting variations are low enough to be instantiated in their "
       "entirety. The StorageCapabilities \"CreateSetting\" method MAY "
       "NOT be used to return settings that are not changeable. \n"
       "Other StorageSetting instances are created using the "
       "\"CreateSetting\" method. If the capabilities specifies "
       "ranges, then the setting can be used by a client to narrow the "
       "range to particular values within the range. In other words, "
       "the capabilities MAY be broad, but the related setting MUST be "
       "as capable or less capable, that is more narrowly defined, "
       "before it is used to create or modify resources. \n"
       "These created StorageSetting instances MUST have their "
       "\"ChangeableType\" property = 1, \"Changeable - Transient\". \n"
       "GeneratedSettings MAY not remain after the restart or reset of "
       "the implementation. They may be deleted by implementation at "
       "any time. A reasonable minimal time to retain the generated "
       "transient settings is five minutes, although there is no "
       "minimal retention time." )]
class CIM_StorageSetting : CIM_SettingData {

      [Write, Description ( 
          "Indicates the desired value for No Single Point of "
          "Failure. Possible values are false = single point of "
          "failure, and true = no single point of failure." )]
   boolean NoSinglePointOfFailure;

      [Write, Description ( 
          "DataRedundancyMax describes the maximum number of "
          "complete copies of data to be maintained. Examples would "
          "be RAID 5 where 1 copy is maintained and RAID 1 where 2 "
          "or more copies are maintained. Possible values are 1 to "
          "n. The desired redundancy is specified using "
          "DataRedundancyGoal, while the minimum is defined by "
          "DataRedundancyMin." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { "CIM_StorageSetting.DataRedundancyMin", 
          "CIM_StorageSetting.DataRedundancyGoal" }]
   uint16 DataRedundancyMax;

      [Write, Description ( 
          "DataRedundancyMin describes the minimum number of "
          "complete copies of data to be maintained. Examples would "
          "be RAID 5 where 1 copy is maintained and RAID 1 where 2 "
          "or more copies are maintained. Possible values are 1 to "
          "n. The desired redundancy is specified using "
          "DataRedundancyGoal, while the maximum is defined by "
          "DataRedundancyMax." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { "CIM_StorageSetting.DataRedundancyMax", 
          "CIM_StorageSetting.DataRedundancyGoal" }]
   uint16 DataRedundancyMin;

      [Write, Description ( 
          "DataRedundancyGoal describes the desired number of "
          "complete copies of data to be maintained. Examples would "
          "be RAID 5 where 1 copy is maintained and RAID 1 where 2 "
          "or more copies are maintained. Possible values are 1 to "
          "n. The bounds (max and min) for redundancy are defined "
          "using the properties, DataRedundancyMax and "
          "DataRedundancyMin." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { "CIM_StorageSetting.DataRedundancyMax", 
          "CIM_StorageSetting.DataRedundancyMin" }]
   uint16 DataRedundancyGoal;

      [Write, Description ( 
          "PackageRedundancyMax describes the maximum number of "
          "redundant packages to be used. For example, in the "
          "storage domain, package redundancy describes how many "
          "disk spindles can fail without data loss including, at "
          "most, one spare. An example would be RAID5 with a spare "
          "disk which would have a PackageRedundancy of 2. Possible "
          "values are 0 to n. The desired redundancy is specified "
          "using PackageRedundancyGoal, while the minimum is "
          "defined by PackageRedundancyMin." ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.PackageRedundancyMin", 
          "CIM_StorageSetting.PackageRedundancyGoal" }]
   uint16 PackageRedundancyMax;

      [Write, Description ( 
          "PackageRedundancyMin describes the minimum number of "
          "redundant packages to be used. For example, in the "
          "storage domain, package redundancy describes how many "
          "disk spindles can fail without data loss including, at "
          "most, one spare. An example would be RAID5 with a spare "
          "disk which would have a PackageRedundancy of 2. Possible "
          "values are 0 to n. The desired redundancy is specified "
          "using PackageRedundancyGoal, while the maximum is "
          "defined by PackageRedundancyMax." ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.PackageRedundancyMax", 
          "CIM_StorageSetting.PackageRedundancyGoal" }]
   uint16 PackageRedundancyMin;

      [Write, Description ( 
          "PackageRedundancyGoal describes the desired number of "
          "redundant packages to be used. For example, in the "
          "storage domain, package redundancy describes how many "
          "disk spindles can fail without data loss including, at "
          "most, one spare. An example would be RAID5 with a spare "
          "disk which would have a PackageRedundancy of 2. Possible "
          "values are 0 to n. The bounds (max and min) for "
          "redundancy are defined using the properties, "
          "PackageRedundancyMax and PackageRedundancyMin." ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.PackageRedundancyMax", 
          "CIM_StorageSetting.PackageRedundancyMin" }]
   uint16 PackageRedundancyGoal;

      [Write, Description ( 
          "DeltaReservationMax is a number between 1 (1%) and a 100 "
          "(100%) which specifies the maximum amount of space that "
          "should be reserved in a replica for caching changes. For "
          "a complete copy this would be 100%. The desired "
          "reservation is specified using DeltaReservationGoal, "
          "while the minimum is defined by DeltaReservationMin." ), 
       Units ( "Percentage" ), 
       MinValue ( 1 ), 
       MaxValue ( 100 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.DeltaReservationMin", 
          "CIM_StorageSetting.DeltaReservationGoal" }]
   uint8 DeltaReservationMax;

      [Write, Description ( 
          "DeltaReservationMin is a number between 1 (1%) and a 100 "
          "(100%) which specifies the minimum amount of space that "
          "should be reserved in a replica for caching changes. For "
          "a complete copy this would be 100%. The desired "
          "reservation is specified using DeltaReservationGoal, "
          "while the maximum is defined by DeltaReservationMax." ), 
       Units ( "Percentage" ), 
       MinValue ( 1 ), 
       MaxValue ( 100 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.DeltaReservationMax", 
          "CIM_StorageSetting.DeltaReservationGoal" }]
   uint8 DeltaReservationMin;

      [Write, Description ( 
          "DeltaReservationGoal is a number between 1 (1%) and a "
          "100 (100%) which specifies the desired amount of space "
          "that should be reserved in a replica for caching "
          "changes. For a complete copy this would be 100%. The "
          "bounds (max and min) for the reservation are defined "
          "using the properties, DeltaReservationMax and "
          "DeltaReservationMin." ), 
       Units ( "Percentage" ), 
       MinValue ( 1 ), 
       MaxValue ( 100 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.DeltaReservationMin", 
          "CIM_StorageSetting.DeltaReservationMax" }]
   uint8 DeltaReservationGoal;

      [Override ( "ChangeableType" ), 
       Description ( 
          "Enumeration indicating the type of setting. \"Fixed - "
          "Not Changeable\" settings are primordial. These setting "
          "are defined at the implementor of the class. \"Changeable "
          "- Transient\" is the type of setting produced by the "
          "\"CreateSetting\" method. A client can subsequently "
          "request that the implementation persist the generated "
          "and potentially modified setting indefinately. Only a "
          "\"Changeable - Transient\" setting SHALL be converted to "
          "a \"Changeable = Persistent\" setting; the setting SHALL "
          "NOT be changed back." ), 
       ValueMap { "0", "1", "2" }, 
       Values { "Fixed - Not Changeable", "Changeable - Transient", 
          "Changeable - Persistent" }]
   uint16 ChangeableType;

      [Write, Description ( 
          "ExtentStripeLength describes the number of underlying "
          "StorageExtents across which data is striped in the "
          "common striping-based storage organizations. This is "
          "also known as the number of \'members\' or \'columns\'. "
          "When used in a goal setting instance, ExtentStripeLength "
          "is the optimal desired value. The bounds (max and min) "
          "for Stripe Length are defined using the properties "
          "ExtentStripeLengthMax and ExtentStripeLengthMin. "
          "ExtentStripeLength MUST be set to NULL if the scoping "
          "StorageCapablities indicates that it is not supported in "
          "this context. ExtentStripeLength can be used in "
          "conjunction with CreateOrModifyElementFromELements to "
          "explicitly configure storage. An example would be RAID "
          "0+1 with mirroring two stripe sets, each set being three "
          "wide. In this case CreateOrModifyElementFromElements "
          "would be passed a goal setting with DataRedundancy = 2 "
          "and ExtentStripeLength = 3. The size of the InElements "
          "array would be 6 and would contain the StorageExtents to "
          "be used to construct the StorageElement as a RAID 0+1. "
          "ExtentStripeLengthMin and ExtentStripeLengthMax are "
          "meaningless and wouldbe set to NULL. If the property is "
          "supported, and is part of StorageSettingWithHints it MAY "
          "be set to NULL. If used it will constrain the effects of "
          "Hint selections. When used in a Setting instance "
          "associated to a Volume, this property indicates the "
          "specific value that the Volume was created with, and "
          "ExtentStripeLengthMin and ExtentStripeLengthMax will be "
          "set to the same specific value." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.ExtentStripeLengthMax", 
          "CIM_StorageSetting.ExtentStripeLengthMin" }]
   uint16 ExtentStripeLength;

      [Write, Description ( 
          "ExtentStripeLength describes the number of underlying "
          "StorageExtents across which data is striped in the "
          "common striping-based storage organizations. This is "
          "also known as the number of \'members\' or \'columns\'. "
          "When used in a goal setting instance, "
          "ExtentStripeLengthMin is the minimum acceptable value. "
          "The desired Stripe Length is specified using "
          "ExtentStripeLength, while the maximum is defined by "
          "ExtentStripeLengthMax. ExtentStripeLengthMin MUST be set "
          "to NULL if the scoping StorageCapablities indicates that "
          "it is not supported in this context. If the property is "
          "supported, and is part of StorageSettingWithHints it MAY "
          "be set to NULL. If used it will constrain the effects of "
          "Hint selections. When used in a Setting instance "
          "associated to a Volume, this property is set to the "
          "specific value of ExtentStripeLength." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.ExtentStripeLengthMax", 
          "CIM_StorageSetting.ExtentStripeLength" }]
   uint16 ExtentStripeLengthMin;

      [Write, Description ( 
          "ExtentStripeLength describes the number of underlying "
          "StorageExtents across which data is striped in the "
          "common striping-based storage organizations. This is "
          "also known as the number of \'members\' or \'columns\'. "
          "When used in a goal setting instance, "
          "ExtentStripeLengthMax is the maximum acceptable value. "
          "The desired Stripe Length is specified using "
          "ExtentStripeLength, while the minimum is defined by "
          "ExtentStripeLengthMin. ExtentStripeLengthMax MUST be set "
          "to NULL if the scoping StorageCapablities indicates that "
          "it is not supported in this context. If the property is "
          "supported, and is part of StorageSettingWithHints it MAY "
          "be set to NULL. If used it will constrain the effects of "
          "Hint selections. When used in a Setting instance "
          "associated to a Volume, this property is set to the "
          "specific value of ExtentStripeLength." ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.ExtentStripeLengthMin", 
          "CIM_StorageSetting.ExtentStripeLength" }]
   uint16 ExtentStripeLengthMax;

      [Write, Description ( 
          "ParityLayout specifies whether a parity-based storage "
          "organization is using rotated or non-rotated parity. "
          "When used in a goal setting instance, ParityLayout is "
          "the desired value. It MUST be set to NULL if the scoping "
          "StorageCapablities indicates that it is not supported in "
          "this context. If the property is supported, and is part "
          "of StorageSettingWithHints it MAY be set to NULL. If "
          "used it will constrain the effects of Hint selections. "
          "When used in a Setting instance associated to a Volume, "
          "this property indicates the specific value that the "
          "Volume was created with." ), 
       ValueMap { "1", "2" }, 
       Values { "Non-rotated Parity", "Rotated Parity" }]
   uint16 ParityLayout;

      [Write, Description ( 
          "UserDataStripeDepth describes the number of bytes "
          "forming a strip in common striping-based storage "
          "organizations. The strip is defined as the size of the "
          "portion of a stripe that lies on one extent. Thus, "
          "ExtentStripeLength * UserDataStripeDepth will yield the "
          "size of one stripe of user data. When used in a goal "
          "setting instance, UserDataStripeDepth is the optimal "
          "desired value. The bounds (max and min) for Stripe Depth "
          "are defined using the properties UserDataStripeDepthMax "
          "and UserDataStripeDepthMin. UserDataStripeDepth MUST be "
          "set to NULL if the scoping StorageCapablities indicates "
          "that it is not supported in this context. If the "
          "property is supported, and is part of "
          "StorageSettingWithHints it MAY be set to NULL. If used "
          "it will constrain the effects of Hint selections. When "
          "used in a Setting instance associated to a Volume, this "
          "property indicates the specific value that the Volume "
          "was created with, and UserDataStripeDepthMin and "
          "UserDataStripeDepthMax will be set to the same specific "
          "value." ), 
       Units ( "Bytes" ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.UserDataStripeDepthMax", 
          "CIM_StorageSetting.UserDataStripeDepthMin" }]
   uint64 UserDataStripeDepth;

      [Write, Description ( 
          "UserDataStripeDepth describes the number of bytes "
          "forming a strip in common striping-based storage "
          "organizations. The strip is defined as the size of the "
          "portion of a stripe that lies on one extent. Thus, "
          "ExtentStripeLength * UserDataStripeDepth will yield the "
          "size of one stripe of user data. When used in a goal "
          "setting instance, UserDataStripeDepthMin is the minimum "
          "acceptable value. The desired Stripe Depth is specified "
          "using UserDataStripeDepth, while the maximum is defined "
          "by UserDataStripeDepthMax. UserDataStripeDepthMin MUST "
          "be set to NULL if the scoping StorageCapablities "
          "indicates that it is not supported in this context. If "
          "the property is supported, and is part of "
          "StorageSettingWithHints it MAY be set to NULL. If used "
          "it will constrain the effects of Hint selections. When "
          "used in a Setting instance associated to a Volume, this "
          "property is set to the specific value of "
          "UserDataStripeDepth." ), 
       Units ( "Bytes" ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.UserDataStripeDepthMax", 
          "CIM_StorageSetting.UserDataStripeDepth" }]
   uint64 UserDataStripeDepthMin;

      [Write, Description ( 
          "UserDataStripeDepth describes the number of bytes "
          "forming a strip in common striping-based storage "
          "organizations. The strip is defined as the size of the "
          "portion of a stripe that lies on one extent. Thus, "
          "ExtentStripeLength * UserDataStripeDepth will yield the "
          "size of one stripe of user data. When used in a goal "
          "setting instance, UserDataStripeDepthMax is the maximum "
          "acceptable value. The desired Stripe Depth is specified "
          "using UserDataStripeDepthGoal, while the minimum is "
          "defined by UserDataStripeDepthMin. "
          "UserDataStripeDepthMax MUST be set to NULL if the "
          "scoping StorageCapablities indicates that it is not "
          "supported in this context. If the property is supported, "
          "and is part of StorageSettingwWithHints it MAY be set to "
          "NULL. If used it will constrain the effects of Hint "
          "selections. When used in a Setting instance associated "
          "to a Volume, this property is set to the specific value "
          "of UserDataStripeDepth." ), 
       Units ( "Bytes" ), 
       MinValue ( 1 ), 
       ModelCorrespondence { 
          "CIM_StorageSetting.UserDataStripeDepthMin", 
          "CIM_StorageSetting.UserDataStripeDepth" }]
   uint64 UserDataStripeDepthMax;


};



class UNIX_StorageSetting : CIM_StorageSetting
{

};

