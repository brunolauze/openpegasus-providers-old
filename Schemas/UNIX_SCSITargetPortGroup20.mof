//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "Collection is an abstract class that provides a common "
       "superclass for data elements that represent collections of "
       "ManagedElements and its subclasses." )]
class CIM_Collection : CIM_ManagedElement {


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "SystemSpecificCollection represents the general concept of a "
       "collection that is scoped (or contained) by a System. It "
       "represents a Collection that has meaning only in the context "
       "of a System, a Collection whose elements are restricted by the "
       "definition of the System, or both of these types of "
       "Collections. This meaning is explicitly described by the "
       "(required) association, HostedCollection. \n"
       "An example of a SystemSpecificCollection is a Fibre Channel "
       "zone that collects network ports, port groupings, and aliases "
       "(as required by a customer) in the context of an AdminDomain. "
       "The Collection is not a part of the domain, but merely an "
       "arbitrary grouping of the devices and other Collections in the "
       "domain. In other words, the context of the Collection is "
       "restricted to the domain, and its members are also limited by "
       "the domain." )]
class CIM_SystemSpecificCollection : CIM_Collection {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> must include a unique name. It "
          "can be a copyrighted, trademarked, or otherwise unique "
          "name that is owned by the business entity that is "
          "creating or defining the InstanceID. Or, it could be a "
          "registered ID that is assigned to the business entity by "
          "a recognized global authority.(This requirement is "
          "similar to the <Schema Name>_<Class Name> structure of "
          "Schema class names.) In addition, to ensure uniqueness "
          "<OrgID> must not contain a colon (\':\'). When using "
          "this algorithm, the first colon to appear in InstanceID "
          "must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity must ensure "
          "that the resulting InstanceID is not re-used as any of "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \'preferred\' algorithm "
          "must be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::Device::StorageDevices" ), 
    Description ( 
       "A class derived from SystemSpecificCollection that models SCSI "
       "Target Port Groups. SCSITargetPortGroup is part of the model "
       "for devices with asymmetric access to logical units - access "
       "is optimized for a subset of target ports. SCSITargetPortGroup "
       "is aggregated to SCSIProtocolEndpoints that expose a common "
       "ValueMap { 2, 3, 4, 5, 6 }, Values { Active/Optimized, "
       "Active/Non-optimized, StandBy, Unavailable, Transitioning }, "
       "access state for a set of associated logical Units (modeled by "
       "various subclasses of LogicalDevice). SCSITargetPortGroups "
       "only apply to target devices with asymmetric multipath access "
       "and not to devices with symmetric (or single path) access." )]
class CIM_SCSITargetPortGroup : CIM_SystemSpecificCollection {

      [Write, Description ( 
          "A boolean indicating whether the associated logical unit "
          "has asymmetric multipath access. If Asymmetric is true, "
          "then there MUST be a SCSITargetPortGroup instance "
          "associated to the LogicalDevice." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|asymmetric" }]
   boolean Asymmetric = false;

      [Write, Description ( 
          "The load balance type for the associated logical unit." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "No Load Balancing", 
          "Round Robin", "Least Blocks", "Least IO", 
          "Product Specific", "Service Wide Default" }, 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|currentLoadBalanceType" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathSettings.OtherCurrentLoadBalanceType" }]
   uint16 CurrentLoadBalanceType = 7;

      [Write, Description ( 
          "A string describing the current load balance algorithm "
          "if CurrentLoadBalanceType is 1 (\'Other\'). This string "
          "MUST be identical to one of the strings from "
          "CIM_SCSIMultipathConfigurationCapabilities "
          "OtherSupportedLoadBalanceAlgorithmNames." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|currentLoadBalanceType" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.OtherSupportedLoadBalanceAlgorithmNames", 
          "CIM_SCSIMultipathSettings.CurrentLoadBalanceType" }]
   string OtherCurrentLoadBalanceType;

      [Write, Description ( 
          "The auto-failback setting for the associated logical "
          "units. Either enabled, disabled, or all associated "
          "logical units follow the service-wide setting from the "
          "capabilities class associated with the appropriate "
          "service." ), 
       ValueMap { "2", "3", "4" }, 
       Values { "Enabled for the associated logical units", 
          "Disabled for the associated logical units", 
          "The associated logical units use the service-wide setting" }, 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|autoFailbackEnabled" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.AutoFailbackEnabled" }]
   uint16 AutoFailbackEnabled = 4;

      [Write, Description ( 
          "The maximum polling rate (in seconds) supported by the "
          "driver if different from the service-wide max from the "
          "capabilities instance. Zero (0) indicates the driver "
          "either does not poll for autofailback or has not "
          "provided an interface to set the polling rate for "
          "multipath logical units. If this property and the "
          "service PollingRateMax are non-zero, this value has "
          "precedence for the associate logical units. The "
          "instrumentation should not instantiate this property if "
          "the value from "
          "CIM_SCSIMultipathConfigurationCapabilities is used for "
          "the associated logical units." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|pollingRateMax" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.PollingRateMax" }]
   uint32 PollingRateMax;

      [Write, Description ( 
          "The current polling rate (in seconds) for auto-failback. "
          "This cannot exceed PollingRateMax. If this property and "
          "the service-wide Capabilities instance "
          "CurrentPollingRate are non-zero, this value has "
          "precedence for the associated logical units. The "
          "instrumentation should not instantiate this property if "
          "the value from "
          "CIM_SCSIMultipathConfigurationCapabilities is used for "
          "the associated logical units." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_MULTIPATH_LOGICAL_UNIT_PROPERTIES|currentPollingRate" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.CurrentPollingRate" }]
   uint32 CurrentPollingRate;

      [Description ( 
          "Access to all associated logical units through all "
          "aggregated ports share this access state. Access to the "
          "Logical Units through other ports is specified by the "
          "access state of those port\'s target port group." ), 
       ValueMap { "2", "3", "4", "5", "6" }, 
       Values { "Active/Optimized", "Active/Non-optimized", 
          "StandBy", "Unavailable", "Transitioning" }, 
       MappingStrings { "SPC.INCITS-T10 |Asymmetric Access State", 
          "MP_API.SNIA|MP_ACCESS_STATE_TYPE" }]
   uint16 AccessState;

      [Description ( 
          "True indicates that the underlying implementation "
          "provides an interface allowing drivers to explicitly "
          "request activation of a target port group - either "
          "through the SCSI SET TARGET PORT GROUP or a proprietary "
          "command." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_TARGET_PORT_PROPERTIES|explicitFailover" }]
   boolean ExplicitFailover;

      [Description ( 
          "An integer identifier for the target port group. This "
          "corresponds to the TARGET PORT GROUP field in the REPORT "
          "TARGET PORT GROUPS response and the TARGET PORT GROUP "
          "field in an INQUIRY VPD page 85 response, type 5h "
          "identifier." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_TARGET_PORT_PROPERTIES|tpgID", 
          "SPC.INCITS-T10 | Target Port Group Descriptor | Target Port Group", 
          "SPC.INCITS-T10 | Inquiry VPD page 0x85 | Target Port Group" }]
   uint16 Identifier;

      [Description ( 
          "True indicates that the target device indicates that "
          "access to the associated logical units through the ports "
          "in this target port group is preferred over access "
          "through other ports. This may correspond to the PREF bit "
          "in the SCSI TARGET PORT GROUP descriptor or an "
          "equivalent vendor-specific interface." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_TARGET_PORT_PROPERTIES|preferredLUPath", 
          "SPC.INCITS-T10 | Target Port Group Descriptor | PREF" }]
   boolean Preferred;

      [Description ( 
          "True indicates that the underlying implementation "
          "provides an interface allowing the administrator to "
          "reassign logical units to target port groups." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_TARGET_PORT_PROPERTIES|supportsLuAssignment" }]
   boolean SupportsLuAssignment;


};



class UNIX_SCSITargetPortGroup : CIM_SCSITargetPortGroup
{

};

