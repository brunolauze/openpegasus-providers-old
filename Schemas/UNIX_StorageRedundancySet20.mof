//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "Collection is an abstract class that provides a common "
       "superclass for data elements that represent collections of "
       "ManagedElements and its subclasses." )]
class CIM_Collection : CIM_ManagedElement {


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "SystemSpecificCollection represents the general concept of a "
       "collection that is scoped (or contained) by a System. It "
       "represents a Collection that has meaning only in the context "
       "of a System, a Collection whose elements are restricted by the "
       "definition of the System, or both of these types of "
       "Collections. This meaning is explicitly described by the "
       "(required) association, HostedCollection. \n"
       "An example of a SystemSpecificCollection is a Fibre Channel "
       "zone that collects network ports, port groupings, and aliases "
       "(as required by a customer) in the context of an AdminDomain. "
       "The Collection is not a part of the domain, but merely an "
       "arbitrary grouping of the devices and other Collections in the "
       "domain. In other words, the context of the Collection is "
       "restricted to the domain, and its members are also limited by "
       "the domain." )]
class CIM_SystemSpecificCollection : CIM_Collection {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> must include a unique name. It "
          "can be a copyrighted, trademarked, or otherwise unique "
          "name that is owned by the business entity that is "
          "creating or defining the InstanceID. Or, it could be a "
          "registered ID that is assigned to the business entity by "
          "a recognized global authority.(This requirement is "
          "similar to the <Schema Name>_<Class Name> structure of "
          "Schema class names.) In addition, to ensure uniqueness "
          "<OrgID> must not contain a colon (\':\'). When using "
          "this algorithm, the first colon to appear in InstanceID "
          "must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity must ensure "
          "that the resulting InstanceID is not re-used as any of "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \'preferred\' algorithm "
          "must be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.18.0" ), 
    UMLPackagePath ( "CIM::Core::Redundancy" ), 
    Description ( 
       "A class derived from SystemSpecificCollection that is a "
       "special collection of ManagedElements. This collection "
       "indicates that the aggregated elements together provide "
       "redundancy, or that redundancy is provided via sparing. All "
       "elements collected in a RedundancySet SHOULD be instantiations "
       "of the same object class." )]
class CIM_RedundancySet : CIM_SystemSpecificCollection {

      [Description ( 
          "RedundancyStatus provides information on the state of "
          "the RedundancyGroup. \'Fully Redundant\' (value=2) means "
          "that all of the configured redundancy is still "
          "available; \'Degraded Redundancy\' (3) means that some "
          "configured elements are degraded, missing or failed but "
          "that the number of elements in the set is still greater "
          "than the minimum required (\'MinNumberNeeded\'); "
          "\'Redundancy Lost\' (4) means that sufficient configured "
          "elements are missing or failed that no redundancy is "
          "available and the next failure experienced will cause "
          "overall failure. \'Overall Failure\' (5) means that "
          "there has been an overall failure of the RedundancySet." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "DMTF Reserved", "Fully Redundant", 
          "Degraded Redundancy", "Redundancy Lost", "Overall Failure" }, 
       ModelCorrespondence { "CIM_RedundancySet.MinNumberNeeded" }]
   uint16 RedundancyStatus;

      [Description ( 
          "TypeOfSet provides information on the type of "
          "redundancy. N+1 (=2) indicates all members are active, "
          "are unaware and function independent of one another. "
          "However, there exist at least one extra member to "
          "achieve functionality. \'Sparing\' is implied (i.e. each "
          "member can be a spare for the other(s). An example of "
          "N+1 is a system that has 2 power supplies, but needs "
          "only 1 power supply to functioning properly. N+1 is a "
          "special case of N+M redundancy where M=1. A value of N+1 "
          "(=2) shall be used for N+M redundancy. - Load Balanced "
          "(=3) indicates all members are active. However, there "
          "functionality is not independent of each other. Their "
          "functioning is determined by some sort of load balancing "
          "algrothim (implemented in hardware and/or software). "
          "\'Sparing\' is implied (i.e. each member can be a spare "
          "for the other(s). \n"
          "- Sparing (=4) indicates that all members are active and "
          "are aware of each others. However, their functionality "
          "is independent until failover. Each member can be a "
          "spare for the other(s). \n"
          "- Limited Sparing (=5) indicates that all members are "
          "active, and they may or may not be aware of each and "
          "they are not spares for each other. Instead, their "
          "redundancy is indicated by the IsSpare relationship." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "N+1", "Load Balanced", 
          "Sparing", "Limited Sparing", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_RedundancySet.OtherTypeOfSet" }]
   uint16 TypeOfSet[];

      [Description ( 
          "MinNumberNeeded indicates the smallest number of "
          "elements that MUST be operational in order to function. "
          "For example, in an N+1 redundancy relationship, the "
          "MinNumberNeeded property is set equal to N. In a "
          "\'LimitedSparing\' environment, this property is "
          "meaningless and SHOULD be set to zero." ), 
       MinValue ( 0 )]
   uint32 MinNumberNeeded;

      [Description ( 
          "MaxNumberSupported indicates the largest number of "
          "elements that can participate in the RedundancySet. A "
          "value of 0 indicates there is no limit on the number of "
          "elements." )]
   uint32 MaxNumberSupported;

      [Description ( 
          "VendorIdentifyingInfo captures the vendor identifying "
          "data for the RedundancySet. One example is the product "
          "name for a cluster." )]
   string VendorIdentifyingInfo;

      [Description ( 
          "When the corresponding array entry in TypeOfSet[] is "
          "\'Other\', this entry provides a string describing the "
          "type of set." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_RedundancySet.TypeOfSet" }]
   string OtherTypeOfSet[];

      [Write, Description ( 
          "The current load balance algorithm. \n"
          "Least Blocks, Least IO, and Address Region are used in "
          "storage device path redundancy drivers to optimize load "
          "balancing by routing requests to a path with the least "
          "queued blocks or IO requests, or based on locality of "
          "reference. \n"
          "\'Product Specific\' indicates that the algorithm is "
          "optimized for a particular type of product. Information "
          "about that product SHOULD be provided in an associated "
          "CIM_Product instance." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "No Load Balancing", 
          "Round Robin", "Least Blocks", "Least IO", 
          "Address Region", "Product Specific" }, 
       ModelCorrespondence { 
          "CIM_RedundancySet.OtherLoadBalanceAlgorithm" }]
   uint16 LoadBalanceAlgorithm = 2;

      [Write, Description ( 
          "When LoadBalanceAlgorithm is Other, this property "
          "describes the algorithm." ), 
       ModelCorrespondence { "CIM_RedundancySet.LoadBalanceAlgorithm" }]
   string OtherLoadBalanceAlgorithm;


      [Description ( 
          "This method forces a failover from one ManagedElement to "
          "another. There are two parameters to the Failover "
          "method. \n"
          "- FailoverFrom is a reference to an \'active\' "
          "ManagedElement that will become inactive after the "
          "method. This element SHOULD be part of the RedundancySet "
          "via a MemberOfCollection relationship. \n"
          "- FailoverTo is a reference to the ManagedElement that "
          "will take over for the FailoverFrom element. This "
          "element SHOULD either be a member of the RedundancySet "
          "or be associated with the RedundancySet via an IsSpare "
          "relationship. \n"
          "\n"
          "Upon sucessful completion: \n"
          "- the FailoverTo element SHOULD be associated to the "
          "RedundancySet via MemberOfCollection. \n"
          "- the FailFrom element SHOULD either still be associated "
          "to the RedundandySet via MemberOfCollection with a "
          "OperationalStatus or EnableState that indicates it not "
          "active, or it SHOULD be associated to the \'Spared\' "
          "collection via the MemberOfCollection association." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "Busy/In Use", 
          "Paramter Error", "DMTF Reserved", "Vendor Reserved" }]
   uint32 Failover(
         [IN, Description ( 
             "The primary ManagedSystemElement that will become "
             "inactive after the method." )]
      CIM_ManagedElement REF FailoverFrom, 
         [IN, Description ( 
             "The ManagedSystemElement that will take over from "
             "the primary MSE." )]
      CIM_ManagedElement REF FailoverTo);

};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.8.1000" ), 
    UMLPackagePath ( "CIM::Core::Redundancy" ), 
    Description ( 
       "A class derived from RedundancySet describing storage-related "
       "redundancy information. StorageRedundancySets are used to "
       "protect user data. They aggregate one or more underlying "
       "StorageExtents, associated via MemberOfCollection, and produce "
       "one or more higher-level Extents. The Extents are related to "
       "each other via a BasedOn association. And, the higher level "
       "Extent is related to the StorageRedundancy Set via the "
       "LogicalIdentity association. \n"
       "Note that StorageRedundancySets may overlap in their "
       "aggregation of members. If this occurs, the overlapping "
       "Extents SHOULD NOT contain any check data." )]
class CIM_StorageRedundancySet : CIM_RedundancySet {

      [Description ( 
          "TypeOfAlgorithm specifies the algorithm used for storage "
          "data redundancy and reconstruction. For example, \'P+Q\' "
          "(=5) or \'P+S\' (=7) may be specified." ), 
       ValueMap { "0", "1", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "Copy", "XOR", "P+Q", "S", "P+S" }, 
       MappingStrings { "MIF.DMTF|Redundancy Group|001.2" }, 
       ModelCorrespondence { 
          "CIM_StorageRedundancySet.OtherAlgorithm" }]
   uint16 TypeOfAlgorithm;

      [Description ( 
          "A string describing the redundancy algorithm when the "
          "TypeOfAlgorithm is set to 1 \'Other\'." ), 
       ModelCorrespondence { 
          "CIM_StorageRedundancySet.TypeOfAlgorithm" }]
   string OtherAlgorithm;


};



class UNIX_StorageRedundancySet : CIM_StorageRedundancySet
{

};

