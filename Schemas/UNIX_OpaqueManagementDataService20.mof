//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "This class extends LogicalElement to abstract the concept of "
       "an element that is enabled and disabled, such as a "
       "LogicalDevice or a ServiceAccessPoint." )]
class CIM_EnabledLogicalElement : CIM_LogicalElement {

      [Description ( 
          "EnabledState is an integer enumeration that indicates "
          "the enabled and disabled states of an element. It can "
          "also indicate the transitions between these requested "
          "states. For example, shutting down (value=4) and "
          "starting (value=10) are transient states between enabled "
          "and disabled. The following text briefly summarizes the "
          "various enabled and disabled states: \n"
          "Enabled (2) indicates that the element is or could be "
          "executing commands, will process any queued commands, "
          "and queues new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "Shutting Down (4) indicates that the element is in the "
          "process of going to a Disabled state. \n"
          "Not Applicable (5) indicates the element does not "
          "support being enabled or disabled. \n"
          "Enabled but Offline (6) indicates that the element might "
          "be completing commands, and will drop any new requests. \n"
          "Test (7) indicates that the element is in a test state. \n"
          "Deferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in "
          "a restricted mode.\n"
          "Starting (10) indicates that the element is in the "
          "process of going to an Enabled state. New requests are "
          "queued." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11..32767", "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled", 
          "Shutting Down", "Not Applicable", "Enabled but Offline", 
          "In Test", "Deferred", "Quiesce", "Starting", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.OtherEnabledState" }]
   uint16 EnabledState = 5;

      [Description ( 
          "A string that describes the enabled or disabled state of "
          "the element when the EnabledState property is set to 1 "
          "(\"Other\"). This property must be set to null when "
          "EnabledState is any value other than 1." ), 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   string OtherEnabledState;

      [Description ( 
          "RequestedState is an integer enumeration that indicates "
          "the last requested or desired state for the element, "
          "irrespective of the mechanism through which it was "
          "requested. The actual state of the element is "
          "represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or "
          "disabled states. Note that when EnabledState is set to 5 "
          "(\"Not Applicable\"), then this property has no meaning. "
          "Refer to the EnabledState property description for "
          "explanations of the values in the RequestedState "
          "enumeration. \n"
          "\"Unknown\" (0) indicates the last requested state for "
          "the element is unknown.\n"
          "Note that the value \"No Change\" (5) has been "
          "deprecated in lieu of indicating the last requested "
          "state is \"Unknown\" (0). If the last requested or "
          "desired state is unknown, RequestedState should have the "
          "value \"Unknown\" (0), but may have the value \"No "
          "Change\" (5).Offline (6) indicates that the element has "
          "been requested to transition to the Enabled but Offline "
          "EnabledState. \n"
          "It should be noted that there are two new values in "
          "RequestedState that build on the statuses of "
          "EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then "
          "moving to an \"Enabled\" state. Reset indicates that the "
          "element is first \"Disabled\" and then \"Enabled\". The "
          "distinction between requesting \"Shut Down\" and "
          "\"Disabled\" should also be noted. Shut Down requests an "
          "orderly transition to the Disabled state, and might "
          "involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate "
          "disabling of the element, such that it will not execute "
          "or accept any commands or processing requests. \n"
          "\n"
          "This property is set as the result of a method "
          "invocation (such as Start or StopService on "
          "CIM_Service), or can be overridden and defined as "
          "WRITEable in a subclass. The method approach is "
          "considered superior to a WRITEable property, because it "
          "allows an explicit invocation of the operation and the "
          "return of a result code. \n"
          "\n"
          "If knowledge of the last RequestedState is not supported "
          "for the EnabledLogicalElement, the property shall be "
          "NULL or have the value 12 \"Not Applicable\"." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "32768..65535" }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Deferred", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 RequestedState = 12;

      [Write, Description ( 
          "An enumerated value indicating an administrator\'s "
          "default or startup configuration for the Enabled State "
          "of an element. By default, the element is \"Enabled\" "
          "(value=2)." ), 
       ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Not Applicable", 
          "Enabled but Offline", "No Default", "Quiesce", 
          "DMTF Reserved", "Vendor Reserved" }]
   uint16 EnabledDefault = 2;

      [Description ( 
          "The date or time when the EnabledState of the element "
          "last changed. If the state of the element has not "
          "changed and this property is populated, then it must be "
          "set to a 0 interval value. If a state change was "
          "requested, but rejected or not yet processed, the "
          "property must not be updated." )]
   datetime TimeOfLastStateChange;

      [Description ( 
          "AvailableRequestedStates indicates the possible values "
          "for the RequestedState parameter of the method "
          "RequestStateChange, used to initiate a state change. The "
          "values listed shall be a subset of the values contained "
          "in the RequestedStatesSupported property of the "
          "associated instance of "
          "CIM_EnabledLogicalElementCapabilities where the values "
          "selected are a function of the current state of the "
          "CIM_EnabledLogicalElement. This property may be non-null "
          "if an implementation is able to advertise the set of "
          "possible values as a function of the current state. This "
          "property shall be null if an implementation is unable to "
          "determine the set of possible values as a function of "
          "the current state." ), 
       ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".." }, 
       Values { "Enabled", "Disabled", "Shut Down", "Offline", 
          "Test", "Defer", "Quiesce", "Reboot", "Reset", 
          "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported" }]
   uint16 AvailableRequestedStates[];

      [Description ( 
          "TransitioningToState indicates the target state to which "
          "the instance is transitioning. \n"
          "A value of 5 \"No Change\" shall indicate that no "
          "transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not "
          "support representing ongoing transitions. \n"
          "A value other than 5 or 12 shall identify the state to "
          "which the element is in the process of transitioning." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", ".." }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Defer", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElement.RequestedState", 
          "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 TransitioningToState = 12;


      [Description ( 
          "Requests that the state of the element be changed to the "
          "value specified in the RequestedState parameter. When "
          "the requested state change takes place, the EnabledState "
          "and RequestedState of the element will be the same. "
          "Invoking the RequestStateChange method multiple times "
          "could result in earlier requests being overwritten or "
          "lost. \n"
          "A return code of 0 shall indicate the state change was "
          "successfully initiated. \n"
          "A return code of 3 shall indicate that the state "
          "transition cannot complete within the interval specified "
          "by the TimeoutPeriod parameter. \n"
          "A return code of 4096 (0x1000) shall indicate the state "
          "change was successfully initiated, a ConcreteJob has "
          "been created, and its reference returned in the output "
          "parameter Job. Any other return code indicates an error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown or Unspecified Error", 
          "Cannot complete within Timeout Period", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Invalid State Transition", 
          "Use of Timeout Parameter Not Supported", "Busy", 
          "Method Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestedState" }]
   uint32 RequestStateChange(
         [IN, Description ( 
             "The state requested for the element. This "
             "information will be placed into the RequestedState "
             "property of the instance if the return code of the "
             "RequestStateChange method is 0 (\'Completed with "
             "No Error\'), or 4096 (0x1000) (\'Job Started\'). "
             "Refer to the description of the EnabledState and "
             "RequestedState properties for the detailed "
             "explanations of the RequestedState values." ), 
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", 
             "11", "..", "32768..65535" }, 
          Values { "Enabled", "Disabled", "Shut Down", "Offline", 
             "Test", "Defer", "Quiesce", "Reboot", "Reset", 
             "DMTF Reserved", "Vendor Reserved" }, 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElement.RequestedState" }]
      uint16 RequestedState, 
         [IN ( false ), OUT, Description ( 
             "May contain a reference to the ConcreteJob created "
             "to track the state transition initiated by the "
             "method invocation." )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "A timeout period that specifies the maximum amount "
             "of time that the client expects the transition to "
             "the new state to take. The interval format must be "
             "used to specify the TimeoutPeriod. A value of 0 or "
             "a null parameter indicates that the client has no "
             "time requirements for the transition. \n"
             "If this property does not contain 0 or null and "
             "the implementation does not support this "
             "parameter, a return code of \'Use Of Timeout "
             "Parameter Not Supported\' shall be returned." )]
      datetime TimeoutPeriod);

};


// Copyright (c) 2012 DMTF.  All rights reserved.
   [Abstract, Version ( "2.35.0" ), 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "A Service is a LogicalElement that represents the availability "
       "of functionality that can be managed. This functionality may "
       "be provided by a seperately modeled entity such as a "
       "LogicalDevice or a SoftwareFeature, or both. The modeled "
       "Service typically provides only functionality required for "
       "management of itself or the elements it affects." )]
class CIM_Service : CIM_EnabledLogicalElement {

      [Key, Description ( 
          "The CreationClassName of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.CreationClassName" )]
   string SystemCreationClassName;

      [Key, Description ( "The Name of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.Name" )]
   string SystemName;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass that is used in the creation of an instance. "
          "When used with the other key properties of this class, "
          "this property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), 
       Description ( 
          "The Name property uniquely identifies the Service and "
          "provides an indication of the functionality that is "
          "managed. This functionality is described in more detail "
          "in the Description property of the object." ), 
       MaxLen ( 256 )]
   string Name;

      [Write, Description ( 
          "The name of the primary owner for the service, if one is "
          "defined. The primary owner is the initial support "
          "contact for the Service." ), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|General Information|001.3" }]
   string PrimaryOwnerName;

      [Write, Description ( 
          "A string that provides information on how the primary "
          "owner of the Service can be reached (for example, phone "
          "number, e-mail address, and so on)." ), 
       MaxLen ( 256 ), 
       MappingStrings { "MIF.DMTF|General Information|001.4" }]
   string PrimaryOwnerContact;

      [Deprecated { "CIM_Service.EnabledDefault" }, 
       Description ( 
          "Note: The use of this element is deprecated in lieu of "
          "the EnabledDefault property that is inherited from "
          "EnabledLogicalElement. The EnabledLogicalElement "
          "addresses the same semantics. The change to a uint16 "
          "data type was discussed when CIM V2.0 was defined. "
          "However, existing V1.0 implementations used the string "
          "property. To remain compatible with those "
          "implementations, StartMode was grandfathered into the "
          "schema. Use of the deprecated qualifier allows the "
          "maintenance of the existing property but also permits an "
          "improved, clarified definition using EnabledDefault. \n"
          "Deprecated description: StartMode is a string value that "
          "indicates whether the Service is automatically started "
          "by a System, an Operating System, and so on, or is "
          "started only upon request." ), 
       ValueMap { "Automatic", "Manual" }, 
       MaxLen ( 10 )]
   string StartMode;

      [Description ( 
          "Started is a Boolean that indicates whether the Service "
          "has been started (TRUE), or stopped (FALSE)." )]
   boolean Started;


      [Deprecated { "CIM_Service.RequestStateChange" }, 
       Description ( 
          "The StartService method places the Service in the "
          "started state. Note that the function of this method "
          "overlaps with the RequestedState property. "
          "RequestedState was added to the model to maintain a "
          "record (such as a persisted value) of the last state "
          "request. Invoking the StartService method should set the "
          "RequestedState property appropriately. The method "
          "returns an integer value of 0 if the Service was "
          "successfully started, 1 if the request is not supported, "
          "and any other number to indicate an error. In a "
          "subclass, the set of possible return codes could be "
          "specified using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are translated "
          "can also be specified in the subclass as a Values array "
          "qualifier. \n"
          "\n"
          "Note: The semantics of this method overlap with the "
          "RequestStateChange method that is inherited from "
          "EnabledLogicalElement. This method is maintained because "
          "it has been widely implemented, and its simple \"start\" "
          "semantics are convenient to use." )]
   uint32 StartService(
);

      [Deprecated { "CIM_Service.RequestStateChange" }, 
       Description ( 
          "The StopService method places the Service in the stopped "
          "state. Note that the function of this method overlaps "
          "with the RequestedState property. RequestedState was "
          "added to the model to maintain a record (such as a "
          "persisted value) of the last state request. Invoking the "
          "StopService method should set the RequestedState "
          "property appropriately. The method returns an integer "
          "value of 0 if the Service was successfully stopped, 1 if "
          "the request is not supported, and any other number to "
          "indicate an error. In a subclass, the set of possible "
          "return codes could be specified using a ValueMap "
          "qualifier on the method. The strings to which the "
          "ValueMap contents are translated can also be specified "
          "in the subclass as a Values array qualifier. \n"
          "\n"
          "Note: The semantics of this method overlap with the "
          "RequestStateChange method that is inherited from "
          "EnabledLogicalElement. This method is maintained because "
          "it has been widely implemented, and its simple \"stop\" "
          "semantics are convenient to use." )]
   uint32 StopService(
);

};


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Version ( "2.22.1" ), 
    UMLPackagePath ( "CIM::Core::OpaqueManagementData" ), 
    Description ( 
       "A class derived from Service that contains global properties "
       "of the opaque management data functionality in the CIM server, "
       "and provides methods for using this functionality." )]
class CIM_OpaqueManagementDataService : CIM_Service {

      [Description ( 
          "The number of bytes of opaque management data storage "
          "available from the CIM_OpaqueManagementDataService. The "
          "value of AvailableStorage shall not exceed the value of "
          "MaxAvailableStorage in the associated "
          "CIM_OpaqueManagementDataCapabilities." ), 
       ModelCorrespondence { 
          "CIM_OpaqueManagementDataCapabilities.MaxAvailableStorage" }, 
       PUnit ( "byte" )]
   uint64 AvailableStorage;

      [Description ( 
          "The amount of time a lock on a CIM_OpaqueManagementData "
          "instance shall remain in effect without execution of any "
          "CIM_OpaqueManagementDataService extrinsic methods on "
          "that CIM_OpaqueManagementData instance by the Identity "
          "that holds the lock. Locks on CIM_OpaqueManagementData "
          "are created by Lock(). The intent of the timeout is to "
          "ensure that a lock is released if the lock holder "
          "neglects to release it or is unable to release it. The "
          "value of LockTimeout shall be a duration." )]
   datetime LockTimeout;

      [Description ( 
          "MaxCreateSize shall contain the maximum value that the "
          "implementation will currently accept in the MaxSize "
          "property of the OpaqueManagementDataTemplate embedded "
          "instance parameter in a call to Create(). This value may "
          "change over time for any reason, including but not "
          "limited to fragmentation of the storage resources "
          "managed by the service." ), 
       ModelCorrespondence { "CIM_OpaqueManagementData.MaxSize" }, 
       PUnit ( "byte" )]
   uint64 MaxCreateSize;


      [Description ( 
          "Grants or removes access to the referenced "
          "CIM_OpaqueManagementData instance by the referenced "
          "CIM_Identity instance." ), 
       ValueMap { "0", "1", "2", "3..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Vendor Specified" }]
   uint32 AssignAccess(
         [Required, IN, Description ( 
             "Reference to the CIM_Identity instance that is the "
             "subject of the access rights modified by this "
             "method." )]
      CIM_Identity REF Identity, 
         [Required, IN, Description ( 
             "Reference to the CIM_OpaqueManagementData instance "
             "that is the target of the access rights modified "
             "by this method." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "The subset of values from the value map that shall "
             "be contained in the resulting Activities property "
             "of the CIM_AssociatedPrivilege between the "
             "CIM_Identity instance referenced by the Identity "
             "parameter and the CIM_OpaqueManagementData "
             "instance referenced by the OpaqueManagementData "
             "parameter. If such an instance of "
             "CIM_AssociatedPrivilege does not exist before the "
             "method is invoked, the method shall create it." ), 
          ValueMap { "5", "6" }, 
          Values { "Read", "Write" }, 
          ModelCorrespondence { 
             "CIM_AssociatedPrivilege.Activities" }]
      uint16 Activities[]);

      [Description ( 
          "Create() creates an instance of CIM_OpaqueManagementData "
          "using the property values in the OpaqueManagementData "
          "parameter, and allocates the number of bytes of storage "
          "specified in the MaxSize property of the "
          "OpaqueManagementData parameter. It also optionally "
          "allows the client to specify an existing "
          "CIM_StorageExtent instance as the basis (storage "
          "location) of the new CIM_OpaqueManagementData instance." ), 
       ValueMap { "0", "1", "2", "3..4095", "4096", "4097..32767", 
          "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specified" }]
   uint32 Create(
         [Required, IN, Description ( 
             "The requested value of the MaxSize property in the "
             "CIM_OpaqueManagementData instance created by this "
             "method. The actual property value shall not be "
             "less than this value." ), 
          ModelCorrespondence { "CIM_OpaqueManagementData.MaxSize" }]
      uint64 MaxSize, 
         [IN, Description ( 
             "The value of the DataFormat property in the "
             "CIM_OpaqueManagementData instance created by this "
             "method." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementData.DataFormat" }]
      string DataFormat, 
         [IN, Description ( 
             "The value of the ElementName property in the "
             "CIM_OpaqueManagementData instance created by this "
             "method." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementData.ElementName" }]
      string ElementName, 
         [Required, IN, Description ( 
             "Specifies the instance of CIM_Identity or its "
             "subclass that shall be the owner of the new "
             "CIM_OpaqueManagementData instance. Create() shall "
             "associate the new CIM_OpaqueManagementData "
             "instance with this CIM_Identity instance using a "
             "new instance of CIM_AssociatedPrivilege." )]
      CIM_Identity REF Owner, 
         [IN, Description ( 
             "Specifies the instance of CIM_StorageExtent on "
             "which the new instance of CIM_OpaqueManagementData "
             "shall be based (i.e., in which it shall be "
             "stored). If this parameter is NULL, the choice of "
             "storage location shall be left to the "
             "implementation." )]
      CIM_StorageExtent REF BasedOnExtent, 
         [IN ( false ), OUT, Description ( 
             "Reference to the instance of "
             "CIM_OpaqueManagementData created when the method "
             "returns a value of 0." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job);

      [Description ( 
          "ExportToURI() copies all or some of the bytes of opaque "
          "management data in the extent represented by the "
          "referenced instance of CIM_OpaqueManagementData to the "
          "Uniform Resource Identifier (URI) specified in the "
          "ExportURI parameter. The URI scheme implies the protocol "
          "that shall be used. Typically, the URI will be a Uniform "
          "Resource Locator (URL), but a Uniform Resource Name "
          "(URN) is not prohibited.\n"
          "If 0 is returned, the function completed successfully "
          "and no ConcreteJob instance was required. If 4096/0x1000 "
          "is returned, a ConcreteJob shall be started to to "
          "perform the operation. The Job\'s reference shall be "
          "returned in the output parameter Job." ), 
       ValueMap { "0", "1", "2", "3..4095", "4096", "4097..32767", 
          "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specified" }]
   uint32 ExportToURI(
         [Required, IN, Description ( 
             "The CIM_OpaqueManagementData instance that "
             "represents the extent that is the target of the "
             "operation." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "Offset specifies the byte offset at which to start reading."
              ), 
          PUnit ( "byte" )]
      uint64 Offset, 
         [Required, IN, OUT, Description ( 
             "On entry, Length contains the number of bytes to "
             "be read, starting at the byte offset in the Offset "
             "property. On return, Length contains the number of "
             "bytes that were actually read." ), 
          PUnit ( "byte" )]
      uint64 Length, 
         [Required, IN, Description ( 
             "On entry, ExportURI contains a URI based on RFC "
             "3986 that indicates the location to which the "
             "service shall copy the specified bytes of opaque "
             "management data and from which the client "
             "subsequently retrieves them." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementDataCapabilities.SupportedExportURISchemes" }]
      string ExportURI, 
         [IN, Description ( 
             "A token that represents a Lock placed on the data "
             "in the extent referenced by the "
             "OpaqueManagementData parameter, using the Lock() "
             "method." ), 
          OctetString]
      uint8 LockToken[], 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job);

      [Description ( 
          "ImportFromURI() modifies all or some of the bytes in the "
          "referenced instance of CIM_OpaqueManagementData. The "
          "imported data for the operation is copied from the URI "
          "specified in the ImportURI parameter. The URI scheme "
          "implies the protocol that shall be used. Typically, the "
          "URI will be a Uniform Resource Locator (URL), but a "
          "Uniform Resource Name (URN) is not prohibited.\n"
          "Any data already present in the instance outside the "
          "range specified by Offset and Length is unchanged.\n"
          "If 0 is returned, the function completed successfully "
          "and no ConcreteJob instance was required. If 4096/0x1000 "
          "is returned, a ConcreteJob shall be started to perform "
          "the operation. The Job\'s reference shall be returned in "
          "the output parameter Job." ), 
       ValueMap { "0", "1", "2", "3..4095", "4096", "4097..32767", 
          "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specified" }]
   uint32 ImportFromURI(
         [Required, IN, Description ( 
             "The CIM_OpaqueManagementData instance that "
             "represents the extent that is the target of the "
             "operation." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "Offset specifies the byte offset at which to start writing."
              ), 
          PUnit ( "byte" )]
      uint64 Offset, 
         [Required, IN, OUT, Description ( 
             "On entry, Length contains the number of bytes to "
             "be written, starting at the byte offset in the "
             "Offset. property. On return, Length contains the "
             "number of bytes that were actually written." ), 
          PUnit ( "byte" )]
      uint64 Length, 
         [IN, Description ( 
             "If the value of the DataSize property of the "
             "instance referenced by the OpaqueManagementData "
             "parameter is greater than Offset + Length, then a "
             "value of TRUE shall indicate that the DataSize "
             "property value shall be reduced by this operation "
             "to Offset + Length, and a value of FALSE shall "
             "indicate that the DataSize property value shall "
             "remain unchanged by this operation. If the value "
             "of the DataSize property is not greater than "
             "Offset + Length, then this parameter shall be "
             "ignored." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementData.DataSize" }]
      boolean Truncate, 
         [Required, IN, Description ( 
             "On entry, ImportURI contains a URI based on RFC "
             "3986 that shall be used by the service to retrieve "
             "the bytes of opaque management data to be written "
             "into the extent represented by the "
             "OpaqueManagementData parameter." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementDataCapabilities.SupportedImportURISchemes" }]
      string ImportURI, 
         [IN, Description ( 
             "A token that represents a Lock placed on the data "
             "in the extent referenced by the "
             "OpaqueManagementData parameter, using the Lock() "
             "method." ), 
          OctetString]
      uint8 LockToken[], 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job);

      [Description ( 
          "Lock() allows a management client to atomically read or "
          "write an opaque management data storage extent larger "
          "than MaxReadLength or MaxWriteLength, respectively. A "
          "server that supports this method shall support the "
          "following pattern:\n"
          "1. Issue Lock() with Lock set to true to lock the "
          "CIM_OpaqueManagementData instance.\n"
          "2. Repeat Read() or Write() as many times as necessary "
          "to complete the transfer\n"
          "3. Issue Lock() with Lock set to false to unlock the "
          "CIM_OpaqueManagementData instance\n"
          "If Lock() with Lock set to true completes successfully, "
          "the server shall return a LockToken to the client. Until "
          "the lock is removed or expires, the server shall deny "
          "OpaqueManagementDataService method requests on the same "
          "CIM_OpaqueManagementData instance that do not contain "
          "the same LockToken value.\n"
          "Lock() shall not lock the properties of the "
          "OpaqueManagementData instance. The method shall return 0 "
          "if successful, 1 if not supported, and any other value "
          "if an error occurred." ), 
       ValueMap { "0", "1", "2", "3..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Vendor Specified" }]
   uint32 Lock(
         [Required, IN, Description ( 
             "The CIM_OpaqueManagementData instance that "
             "represents the extent that is the target of the "
             "operation." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "If true, lock the data from access by another "
             "management client. If false, release the data." )]
      boolean Lock, 
         [IN, OUT, Description ( 
             "A token that shall be returned to the client as "
             "output if Lock is True, and supplied by the client "
             "as input if Lock is False. In this way, only the "
             "client that set the Lock may remove it or delegate "
             "such responsibility to another client." ), 
          OctetString]
      uint8 LockToken[]);

      [Description ( 
          "Read() returns all or some of the bytes of opaque "
          "management data in the extent represented by the "
          "referenced instance of CIM_OpaqueManagementData." ), 
       ValueMap { "0", "1", "2", "3..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Vendor Specified" }]
   uint32 Read(
         [Required, IN, Description ( 
             "The CIM_OpaqueManagementData instance that "
             "represents the extent that is the target of the "
             "operation." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "Offset specifies the byte offset at which to start reading."
              ), 
          PUnit ( "byte" )]
      uint64 Offset, 
         [Required, IN, OUT, Description ( 
             "On entry, Length shall contain the number of bytes "
             "to be read, starting at the byte offset in the "
             "Offset property. On return, Length shall contain "
             "the number of bytes that were actually read." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementDataCapabilities.MaxReadLength" }, 
          PUnit ( "byte" )]
      uint64 Length, 
         [IN ( false ), OUT, Description ( 
             "On return, Data shall contain the bytes of opaque "
             "management data read from the extent represented "
             "by the OpaqueManagementData parameter." ), 
          OctetString]
      uint8 Data[], 
         [IN, Description ( 
             "A token that represents a Lock placed on the data "
             "in the extent referenced by the "
             "OpaqueManagementData parameter, using the Lock() "
             "method. Parameter shall be NULL if data is not "
             "locked." ), 
          OctetString]
      uint8 LockToken[]);

      [Description ( 
          "Transfers ownership of a CIM_OpaqueManagementData "
          "instance to the CIM_Identity instance referenced by the "
          "Identity parameter." ), 
       ValueMap { "0", "1", "2", "3..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Vendor Specified" }]
   uint32 ReassignOwnership(
         [Required, IN, Description ( 
             "Reference to the CIM_Identity instance that will "
             "become the new owner of the "
             "CIM_OpaqueManagementData instance referenced by "
             "the OpaqueManagementData parameter." )]
      CIM_Identity REF NewOwner, 
         [Required, IN, Description ( 
             "Reference to the CIM_OpaqueManagementData instance "
             "that is the target of ownership reassignment." )]
      CIM_OpaqueManagementData REF OpaqueManagementData);

      [Description ( 
          "Write() modifies all or some of the bytes in the extent "
          "represented by the referenced instance of "
          "CIM_OpaqueManagementData. Any data already present in "
          "the extent outside the range specified by Offset and "
          "Length shall remain unchanged by this operation." ), 
       ValueMap { "0", "1", "2", "3..4095", "4096", "4097..32767", 
          "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown/Unspecified Error", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Method Reserved", "Vendor Specified" }]
   uint32 Write(
         [Required, IN, Description ( 
             "The CIM_OpaqueManagementData instance that "
             "represents the extent that is the target of the "
             "operation." )]
      CIM_OpaqueManagementData REF OpaqueManagementData, 
         [Required, IN, Description ( 
             "Offset specifies the byte offset at which to start writing."
              ), 
          PUnit ( "byte" )]
      uint64 Offset, 
         [Required, IN, OUT, Description ( 
             "On entry, Length contains the number of bytes to "
             "be written, starting at the byte offset in the "
             "Offset. property. On return, Length contains the "
             "number of bytes that were actually written." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementDataCapabilities.MaxWriteLength" }, 
          PUnit ( "byte" )]
      uint64 Length, 
         [IN, Description ( 
             "If the value of the DataSize property of the "
             "instance referenced by the OpaqueManagementData "
             "parameter is greater than Offset + Length, then a "
             "value of TRUE shall indicate that the DataSize "
             "property value shall be reduced by this operation "
             "to Offset + Length, and a value of FALSE shall "
             "indicate that the DataSize property value shall "
             "remain unchanged by this operation. If the value "
             "of the DataSize property is not greater than "
             "Offset + Length, then this parameter shall be "
             "ignored." ), 
          ModelCorrespondence { 
             "CIM_OpaqueManagementData.DataSize" }]
      boolean Truncate, 
         [Required, IN, Description ( 
             "On entry, Data contains the bytes of opaque "
             "management data to be written into the extent "
             "represented by the OpaqueManagementData parameter." ), 
          OctetString]
      uint8 Data[], 
         [IN, Description ( 
             "A token that represents a Lock placed on the data "
             "in the extent referenced by the "
             "OpaqueManagementData parameter, using the Lock() "
             "method." ), 
          OctetString]
      uint8 LockToken[], 
         [IN ( false ), OUT, Description ( 
             "Reference to the job (may be null if job completed)."
              )]
      CIM_ConcreteJob REF Job);

};



class UNIX_OpaqueManagementDataService : CIM_OpaqueManagementDataService
{

};

