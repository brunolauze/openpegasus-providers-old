//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::StorageExtent" ), 
    Description ( 
       "BasedOn is an association describing how StorageExtents can be "
       "assembled from lower level Extents. For example, "
       "ProtectedSpaceExtents are parts of PhysicalExtents, while "
       "VolumeSets are assembled from one or more Physical or "
       "ProtectedSpaceExtents. As another example, CacheMemory can be "
       "defined independently and realized in a PhysicalElement or can "
       "be \'based on\' Volatile or NonVolatileStorageExtents." )]
class CIM_BasedOn : CIM_Dependency {

      [Override ( "Antecedent" ), 
       Description ( "The lower level StorageExtent." )]
   CIM_StorageExtent REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( "The higher level StorageExtent." )]
   CIM_StorageExtent REF Dependent;

      [Description ( 
          "StartingAddress indicates where in lower level storage, "
          "the higher level Extent begins." )]
   uint64 StartingAddress;

      [Description ( 
          "EndingAddress indicates where in lower level storage, "
          "the higher level Extent ends. This property is useful "
          "when mapping non-contiguous Extents into a higher level "
          "grouping." )]
   uint64 EndingAddress;

      [Description ( 
          "If there is an order to the BasedOn associations that "
          "describe how a higher level StorageExtent is assembled, "
          "the OrderIndex property indicates this. When an order "
          "exists, the instances of BasedOn with the same Dependent "
          "value (i.e., the same higher level Extent) should place "
          "unique values in the OrderIndex property. The lowest "
          "value implies the first member of the collection of "
          "lower level Extents, and increasing values imply "
          "successive members of the collection. If there is no "
          "ordered relationship, a value of zero should be "
          "specified. An example of the use of this property is to "
          "define a RAID-0 striped array of 3 disks. The resultant "
          "RAID array is a StorageExtent that is dependent on "
          "(BasedOn) the StorageExtents that describe each of the 3 "
          "disks. The OrderIndex of each BasedOn association from "
          "the disk Extents to the RAID array could be specified as "
          "1, 2 and 3 to indicate the order in which the disk "
          "Extents are used to access the RAID data." )]
   uint16 OrderIndex;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Association, Version ( "2.19.0" ), 
    ClassConstraint { "inv: self.Dependent.IsComposite = true" }, 
    UMLPackagePath ( "CIM::Device::StorageExtents" ), 
    Description ( 
       "This specialization defines how data is striped across "
       "StorageExtents. Additionally, it includes information on "
       "distribution of check data so that the \'usual case\' RAID "
       "devices can be created in one step." )]
class CIM_CompositeExtentBasedOn : CIM_BasedOn {

      [Override ( "Antecedent" ), 
       Min ( 1 ), 
       Description ( "The underlying StorageExtent." )]
   CIM_StorageExtent REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "The StorageExtent which is built on the StorageExtent." )]
   CIM_StorageExtent REF Dependent;

      [Required, Override ( "OrderIndex" ), 
       Description ( 
          "Order matters to composite extents. An example of the "
          "use of this property is when defining a RAID-0 striped "
          "array of 3 disks. The resultant RAID array is a "
          "composite extent that is dependent on (as described by "
          "CompositeExtentBasedOn) the StorageExtents that "
          "represent each of the 3 disks. The OrderIndex of each "
          "CompositeExtentBasedOn association from the disk Extents "
          "to the RAID array could be specified as 1, 2 and 3 to "
          "indicate the order in which the disk Extents are used to "
          "access the RAID data." ), 
       MappingStrings { "MIF.DMTF|Protected Space Extent|001.1" }]
   uint16 OrderIndex;

      [Description ( 
          "True if logical blocks in the underlying StorageExtents "
          "are mapped in decrementing order. This property "
          "corresponds to the INCDEC value in the SCSI SCC-2 Volume "
          "Set PS_Extent Descriptor." )]
   boolean LBAsMappedByDecrementing;

      [Description ( 
          "True if the logical block mapping algorithm includes "
          "check data bytes. This property corresponds to the "
          "NOCHKSKIP attribute in the SCC-2 Volume Set PS_Extent "
          "Descriptor." )]
   boolean LBAMappingIncludesCheckData;

      [Description ( 
          "The total number of blocks that will be consumed on the "
          "Dependent Extent. This is limited by the Antecedent\'s "
          "NumberOfBlocks, but is included explicitly to provide "
          "for the DMTF MIF mapping. In SCSI SCC, this is "
          "equivalent to the NUMBER OF LBA_PS(s) field in the "
          "Volume Set PS_Extent Descriptor." ), 
       MappingStrings { "MIF.DMTF|Protected Space Extent|001.3" }, 
       ModelCorrespondence { "CIM_StorageExtent.NumberOfBlocks" }]
   uint64 NumberOfBlocks;

      [Description ( 
          "The Dependent\'s BlockSize is limited by the "
          "Antecedent\'s. In SCSI SCC, this is equivalent to the "
          "NUMBER OF BYTES PER LBA_PS field in the RedundancyGroup "
          "P_Extent Descriptor." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|Protected Space Extent|001.4" }, 
       ModelCorrespondence { "CIM_StorageExtent.BlockSize" }, 
       PUnit ( "byte" )]
   uint64 BlockSize;

      [Description ( 
          "Number of bytes which form the stripe size for the "
          "Dependent StorageExtent. If the CompositeExtent is "
          "concatenated instead of striped, then "
          "UserDataStripeDepth should be set to zero." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|Protected Space Extent|001.6" }, 
       PUnit ( "byte" )]
   uint64 UserDataStripeDepth;

      [Description ( 
          "Number of bytes of user data to skip before starting the "
          "check data interleave." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|Physical Extent|001.6" }, 
       PUnit ( "byte" )]
   uint64 UnitsBeforeCheckDataInterleave;

      [Description ( 
          "Number of bytes to be reserved for check data." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|Physical Extent|001.7" }, 
       PUnit ( "byte" )]
   uint64 UnitsOfCheckData;

      [Description ( "Number of bytes to be reserved for user data." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|Physical Extent|001.8" }, 
       PUnit ( "byte" )]
   uint64 UnitsOfUserData;


};



class UNIX_CompositeExtentBasedOn : CIM_CompositeExtentBasedOn
{

};

