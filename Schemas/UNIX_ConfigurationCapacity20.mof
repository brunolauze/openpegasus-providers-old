//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.7.0" ), 
    UMLPackagePath ( "CIM::Physical::Misc" ), 
    Description ( 
       "PhysicalCapacity is an abstract class describing a "
       "PhysicalElement\'s minimum/maximum requirements and ability to "
       "support different types of hardware. For example, minimum and "
       "maximum memory requirements can be modeled as a subclass of "
       "CIM_PhysicalCapacity. \n"
       "\n"
       "Note that the items described in subclasses of "
       "PhysicalCapacity, for example the class ConfigurationCapacity, "
       "are either directly PhysicalElements (such as I/O slots or "
       "storage library magazines) or closely associated to "
       "PhysicalElements via the Realizes relationship (i.e., "
       "LogicalDevices such as batteries or processors)." )]
class CIM_PhysicalCapacity : CIM_ManagedElement {

      [Description ( 
          "The Name property defines the label by which the "
          "Physical Capacity object is known. When subclassed, the "
          "Name property can be overridden to be a Key property." ), 
       MaxLen ( 256 )]
   string Name;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Version ( "2.18.0" ), 
    UMLPackagePath ( "CIM::Physical::Misc" ), 
    Description ( 
       "ConfigurationCapacity provides information on the minimum and "
       "maximum numbers of power supplies, fans, disk drives, etc. "
       "that can be connected to or placed on/into a PhysicalElement "
       "(and the number that must be connected/added/removed at a "
       "time). The PhysicalElement whose configuration is described is "
       "identified using the ElementCapacity association, inherited "
       "from PhysicalCapacity. The object whose capacities are "
       "indicated (ie, the power supply or fan) is identified in the "
       "ObjectType and VendorCompatibilityStrings properties of this "
       "class. When ObjectType has a value of 25 (Multi-Purpose) then "
       "additional description of the object is provided in the "
       "VendorCompatibilityStrings property. Since the same min/max "
       "configurations can apply to multiple instances, this class is "
       "not defined as \'weak\'. \n"
       "Examples of the use of the ConfigurationCapacity class are to "
       "describe that a \'control unit\' Chassis may be connected to "
       "(at most) 4 other I/O chassis, or to describe what a "
       "StorageLibrary\'s cabinet may contain. Continuing the latter "
       "example, a particular StorageLibrary\'s cabinet might hold a "
       "minimum of 3 and a maximum of 9 TapeDrives, and a minimum of "
       "88 and a maximum of 264 StorageMediaLocations (\"Slots\"). "
       "This information would be described in two instances of "
       "ConfigurationCapacity, both associated to the StorageLibrary\'s "
       "PhysicalPackage. \n"
       "This class does NOT represent the tradeoffs that are likely to "
       "be required of one resource for another. It simply represents "
       "capacities. In the case of the StorageLibrary, there may be "
       "only 2 valid configurations - 9 TapeDrives with 88 Slots, or 3 "
       "TapeDrives with 264 Slots. This class only conveys that \'up "
       "to\' 9 Drives and \'up to\' 264 slots may be available and are "
       "supported." )]
class CIM_ConfigurationCapacity : CIM_PhysicalCapacity {

      [Key, Override ( "Name" ), 
       Description ( 
          "The inherited Name serves as a part of the Configuration "
          "Capacity object key." )]
   string Name;

      [Key, Description ( 
          "The type of object (power supply, fan, disk drive, ...) "
          "whose capacities are indicated. This information is part "
          "of the class\' key." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25" }, 
       Values { "Other", "Processors", "Power Supplies", "Fans", 
          "Batteries", "I/O Slots", "Memory Slots", 
          "MediaAccessDevices (Drives)", 
          "StorageMediaLocation Slots", 
          "StorageMediaLocation Magazines", 
          // 10                
          "StorageMediaLocation Panels", 
          "StorageMediaLocation InterLibrary Ports", 
          "StorageMediaLocation Limited Access Ports", "Doors", 
          "MediaTransferDevice Pickers", 
          "MediaTransferDevice Changers", "LabelReaders", 
          "Contained Chassis", "Connected Chassis", 
          "Connected Frames", 
          // 20                
          "Front Side I/O Slots", 
          "Back Side I/O Slots", "Cache Memory", "NVS Memory", 
          "Volatile Memory", "Multi-Purpose" }, 
       ModelCorrespondence { 
          "CIM_ConfigurationCapacity.OtherTypeDescription" }]
   uint16 ObjectType;

      [Description ( 
          "A string describing the object type - used when the "
          "ObjectType property is set to 0 (\"Other\"). OtherType "
          "Description should be set to NULL when ObjectType is any "
          "value other than 0." ), 
       MaxLen ( 64 ), 
       ModelCorrespondence { "CIM_ConfigurationCapacity.ObjectType" }]
   string OtherTypeDescription;

      [Description ( 
          "Minimum number of Elements of type, ObjectType, that "
          "must be installed." )]
   uint64 MinimumCapacity;

      [Description ( 
          "Maximum number of Elements of type, ObjectType, that may "
          "be installed." )]
   uint64 MaximumCapacity;

      [Description ( 
          "Increment in which Elements must be added or removed." )]
   uint32 Increment;

      [Description ( 
          "An array of strings that identifies the compatibility of "
          "the elements within the configuration capacity. This "
          "allows vendors to provide information to the system "
          "administrators by providing sufficient information to "
          "request the appropriate hardware that can populate the "
          "configuration. In order to ensure uniqueness within the "
          "NameSpace, each value defined by the vendor for use in "
          "the VendorCompatibilityStrings property SHOULD be "
          "constructed using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements." ), 
       ModelCorrespondence { 
          "CIM_PhysicalPackage.VendorCompatibilityStrings", 
          "CIM_Slot.VendorCompatibilityStrings" }]
   string VendorCompatibilityStrings[];


};



class UNIX_ConfigurationCapacity : CIM_ConfigurationCapacity
{

};

