//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Capabilities" ), 
    Description ( 
       "Capabilities is an abstract class whose subclasses describe "
       "abilities and/or potential for use. For example, one may "
       "describe the maximum number of VLANs that can be supported on "
       "a system using a subclass of Capabilities. Capabilities are "
       "tied to the elements which they describe using the "
       "ElementCapabilities association. Note that the cardinality of "
       "the ManagedElement reference is Min(1), Max(1). This "
       "cardinality mandates the instantiation of the "
       "ElementCapabilities association for the referenced instance of "
       "Capabilities. ElementCapabilities describes the existence "
       "requirements and context for the referenced instance of "
       "ManagedElement. Specifically, the ManagedElement MUST exist "
       "and provides the context for the Capabilities. Note that "
       "Capabilities do not indicate what IS configured or "
       "operational, but what CAN or CANNOT exist, be defined or be "
       "used. Note that it is possible to describe both supported and "
       "excluded abilities and functions (both capabilities and "
       "limitations) using this class." )]
class CIM_Capabilities : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user friendly name for this instance of "
          "Capabilities. In addition, the user friendly name can be "
          "used as a index property for a search of query. (Note: "
          "Name does not have to be unique within a namespace.)" )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Device::ProtocolController" ), 
    Description ( 
       "A subclass of Capabilities that defines the Masking-related "
       "capabilities of a ProtocolController." )]
class CIM_ProtocolControllerMaskingCapabilities : CIM_Capabilities {

      [Description ( 
          "A list of the valid values for "
          "StrorageHardwareID.IDType. iSCSI IDs MAY use one of "
          "three iSCSI formats - iqn, eui, or naa. This three "
          "letter format is the name prefix; so a single iSCSI type "
          "is provided here, the prefix can be used to further "
          "refine the format." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Port WWN", "Node WWN", "Host Name", 
          "iSCSI Name" }, 
       ArrayType ( "Indexed" )]
   uint16 ValidHardwareIdTypes[];

      [Description ( 
          "An array of strings describing types for valid "
          "StorageHardwareID.IDType. Used when the "
          "ValidHardwareIdTypes includes 1 (\"Other\")." ), 
       ArrayType ( "Indexed" )]
   string OtherValidHardwareIDTypes[];

      [Description ( 
          "An integer enumeration indicating the way that ports per "
          "view (ProtocolController) are handled by the underlying "
          "storage system." ), 
       ValueMap { "2", "3", "4" }, 
       Values { "One Port per View", "Multiple Ports per View", 
          "All Ports share the same View" }]
   uint16 PortsPerView = 2;

      [Description ( 
          "Set to true if this storage system allows the client to "
          "specify the DeviceNumber parameter when calling "
          "ControllerConfigurationService.AttachDevice() or specify "
          "the DeviceNumbers parameter when calling "
          "ControllerConfigurationService.ExposePaths(). Set to "
          "false if the implementation does not allow unit numbers "
          "to vary for a ProtocolController. However, if set to "
          "false and a Device is not the Dependent of a "
          "ProtocolControllerForUnit association, the client MUST "
          "provide a DeviceNumber parameter in "
          "ControllerConfigurationService.AttachDevice or "
          "ControllerConfigurationService.ExposePaths. If set to "
          "false and the Device is already the Dependent of a "
          "ProtocolControllerForUnit association, then the client "
          "can omit the DeviceNumber parameter (or supply the same "
          "value) in subsequent "
          "ControllerConfigurationService.AttachDevice calls." )]
   boolean ClientSelectableDeviceNumbers = true;

      [Description ( 
          "Set to true if this storage system supports the "
          "AttachDevice method." )]
   boolean AttachDeviceSupported;

      [Description ( 
          "Set to true if this storage system limits configurations "
          "to a single subject hardware ID per view. Otherwise, "
          "multiple hardware ID types can be used. The default is "
          "FALSE, that multiple ID types MAY be used in a single "
          "view." )]
   boolean OneHardwareIDPerView = false;

      [Description ( 
          "When set to false, different ProtocolContollers attached "
          "to a LogicalPort can expose the same unit numbers. If "
          "true, then this storage system requires unique unit "
          "numbers across all the ProtocolControllers connected to "
          "a LogicalPort." )]
   boolean UniqueUnitNumbersPerPort = false;

      [Description ( 
          "Set to true if this storage system allows a client to "
          "create a Privilege instance with PrivilegeGranted set to "
          "FALSE." )]
   boolean PrivilegeDeniedSupported = false;

      [Description ( 
          "If true, this property indicates that a "
          "Privilege/Identity pair MUST be specified when "
          "CreateProtocolControllerWithPorts() is called. If false, "
          "then the Privilege/Identity pair in "
          "CreateProtocolControllerWithPorts() MUST NOT be set." )]
   boolean ProtocolControllerRequiresAuthorizedIdentity = false;

      [Description ( 
          "If true, this property indicates that the Identity "
          "parameter of CreateProtocolConntrollerWithPorts() MUST "
          "contain a reference to a CIM_Collection (or subclass) or "
          "to a CIM_Identity (or subclass). If ExposePathsSupported "
          "is true, this property indicates the storage system "
          "supports SystemSpecificCollections of "
          "StorageHardwareIDs." )]
   boolean ProtocolControllerSupportsCollections = false;

      [Description ( 
          "Set to true if this storage system supports the "
          "ExposePaths and HidePaths methods." )]
   boolean ExposePathsSupported;

      [Description ( 
          "Set to true if this storage system supports the "
          "CreateProtocolControllerWithPorts method." )]
   boolean CreateProtocolControllerSupported;

      [Description ( 
          "The maximum number of ProtocolCOntrollerForUnit "
          "associations that can be associated with a single "
          "LogicalDevice (for example, StorageVolume). Zero "
          "indicates there is no limit." )]
   uint16 MaximumMapCount = 0;

      [Description ( 
          "Set to true if the instumentation allows a client to "
          "create a configuration where an SPC has no "
          "LogicalDevices associated via "
          "CIM_ProtocolControllerForUnit associations." )]
   boolean SPCAllowsNoLUs = false;

      [Description ( 
          "Set to true if the instumentation allows a client to "
          "create a configuration where an SPC has no target "
          "SCSIProtocolEndpoints associated via "
          "CIM_SAPAvailableForELement associations." )]
   boolean SPCAllowsNoTargets = false;

      [Description ( 
          "Set to true if the instumentation allows a client to "
          "create a configuration where an SPC has no "
          "StorageHardwareIDs associated via "
          "CIM_AuthorizedTarget/CIM_AuthorizedPrivilege/CIM_AuthorizedSubject."
           )]
   boolean SPCAllowsNoInitiators = false;

      [Description ( 
          "Set to true if it the instrumentation supports \'default "
          "view\' SPCs that exposes logical units to all initiators "
          "(so called \'promiscuous LUNs\'. Default view SPCs MUST "
          "have be associated to a CIM_StorageHardwareID instance "
          "with Name set to the null string. A target port MUST NOT "
          "be associated with more a single default view SPC. If "
          "PortsPerView is \'All Ports share the same View\', then "
          "at most one default view SPC MAY be associated with the "
          "target system. If SPCAllowsNoLUs is true, the "
          "instrumentation MAY instantiate a static default view "
          "instance or let the client create one as needed using "
          "ExposePaths. For other values of PortsPerView, all "
          "default view SPC MUST share the same null-Name "
          "CIM_StorageHardwareID instance." ), 
       ModelCorrespondence { 
          "CIM_ProtocolControllerMaskingCapabilities.PortsPerView" }]
   boolean SPCSupportsDefaultViews = true;


};



class UNIX_ProtocolControllerMaskingCapabilities : CIM_ProtocolControllerMaskingCapabilities
{

};

