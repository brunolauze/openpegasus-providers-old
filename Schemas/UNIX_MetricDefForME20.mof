//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Association, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Metrics::BaseMetric" ), 
    Description ( 
       "This association ties a CIM_BaseMetricDefinition to a "
       "CIM_ManagedElement to define metrics for the latter. The "
       "metrics definition is given context by the ManagedElement, "
       "which is why the definition is dependent on the element." )]
class CIM_MetricDefForME : CIM_Dependency {

      [Override ( "Antecedent" ), 
       Description ( 
          "The CIM_ManagedElement that can have metrics of this "
          "type associated with it." )]
   CIM_ManagedElement REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "A CIM_BaseMetricDefinition for a CIM_ManagedElement." )]
   CIM_BaseMetricDefinition REF Dependent;

      [Description ( 
          "MetricCollectionEnabled indicates whether the metric "
          "defined by the referenced CIM_BaseMetricDefinition is "
          "being collected for the referenced CIM_ManagedElement. A "
          "value of 2 \"Enabled\" shall indicate the metric is "
          "being collected. A value of 3 \"Disabled\" shall "
          "indicate the metric is not being collected. When "
          "collection of a metric is re-enabled, the metric is "
          "re-initialized such that any values for a current access "
          "metric reflect data collected after the time at which "
          "collection was re-enabled." ), 
       ValueMap { "2", "3", "4", "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Reserved", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 MetricCollectionEnabled = 2;


};



class UNIX_MetricDefForME : CIM_MetricDefForME
{

};

