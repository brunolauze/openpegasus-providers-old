//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.31.1" ), 
    UMLPackagePath ( "CIM::Device::Printing" ), 
    Description ( 
       "This class extends LogicalElement to abstract the concept of a "
       "PrinterElement that is a component (e.g., PrintMarker) of a "
       "scoping Printer (print device). This class defines common "
       "properties for key (InstanceID) and for correlation of status "
       "and event (alert) information between CIM and SNMP management "
       "interfaces (SNMPRowId). \n"
       "Note: A Printer shall be associated with at least one of every "
       "required component (e.g., PrintMarker) via an instance of the "
       "PrinterComponent class. A Printer may be associated with zero "
       "or more optional components (e.g., PrintSupply) via an "
       "instance of the ConcreteComponent class. See: Model in section "
       "2 of Printer MIB (RFC 3805) and section 3 of Finisher MIB (RFC "
       "3806)." )]
class CIM_PrinterElement : CIM_LogicalElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> shall include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> shall not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID shall appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity shall assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "entity that is creating or defining the InstanceID or "
          "that is a registered ID assigned to the business entity "
          "by a recognized global authority. (This requirement is "
          "similar to the <Schema Name>_<Class Name> structure of "
          "Schema class names.) In addition, to ensure uniqueness, "
          "<OrgID> shall not contain a colon (:). When using this "
          "algorithm, the first colon to appear in InstanceID shall "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity shall assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "shall be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Description ( 
          "A unique value used by a scoping Printer to identify "
          "this component (e.g., PrintMarker) of the scoping "
          "Printer. Although these values may change due to a "
          "reconfiguration of the Printer (e.g., the addition of "
          "new components to the Printer), values should remain "
          "stable across successive Printer power cycles. Note: "
          "This property is necessary to correlate status and event "
          "(alert) information between CIM and SNMP interfaces." ), 
       MinValue ( 1 ), 
       MaxValue ( 65535 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtCoverIndex", 
          "MIB.IETF|Printer-MIB.prtInputIndex", 
          "MIB.IETF|Printer-MIB.prtOutputIndex", 
          "MIB.IETF|Printer-MIB.prtMarkerIndex", 
          "MIB.IETF|Printer-MIB.prtMarkerSuppliesIndex", 
          "MIB.IETF|Printer-MIB.prtMediaPathIndex", 
          "MIB.IETF|Printer-MIB.prtChannelIndex", 
          "MIB.IETF|Printer-MIB.prtInterpreterIndex", 
          "MIB.IETF|Printer-MIB.prtConsoleLightIndex", 
          "MIB.IETF|Finisher-MIB.finDeviceIndex", 
          "MIB.IETF|Finisher-MIB.finSupplyIndex" }]
   uint32 SNMPRowId;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.31.1" ), 
    UMLPackagePath ( "CIM::Device::Printing" ), 
    Description ( 
       "This class represents the PrintInputTray component of a "
       "Printer (print device). It contains properties that describe a "
       "device capable of providing media for input to the printing "
       "process. Note: A PrintInputTray shall be associated with "
       "exactly one Printer via an instance of the PrinterComponent "
       "class. See: Model in section 2 of Printer MIB (RFC 3805)." ), 
    MappingStrings { "MIB.IETF|Printer-MIB.prtInputEntry" }]
class CIM_PrintInputTray : CIM_PrinterElement {

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of "
          "PrintInputTray. In addition, the user-friendly name can "
          "be used as an index property for a search or query. "
          "(Note: The name does not have to be unique within a "
          "namespace.) This name shall be generated as a factory "
          "default by the manufacturer and may be changed "
          "out-of-band to a site-specific name by the system "
          "administrator." ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputName" }, 
       ModelCorrespondence { "CIM_ManagedElement.ElementName" }]
   string ElementName;

      [Description ( 
          "Denotes whether or not this PrintInputTray is the "
          "default PrintInputTray for this Printer. If the default "
          "PrintInputTray feature is not supported for this "
          "Printer, then this property shall be null. If the "
          "default PrintInputTray feature is supported for this "
          "Printer, then this property shall be true for at most "
          "one instance of CIM_PrintInputTray on this Printer, "
          "i.e., the default may not be currently configured." ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputDefaultIndex" }]
   boolean IsDefault;

      [Description ( 
          "A free-form text description of this input tray in the "
          "localization specified by "
          "CIM_Printer.CurrentNaturalLanguage." ), 
       MaxLen ( 255 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputDescription", 
          "MIB.IETF|Printer-MIB.PrtLocalizedDescriptionStringTC" }, 
       ModelCorrespondence { "CIM_Printer.CurrentNaturalLanguage" }]
   string LocalizedDescription;

      [Description ( 
          "The type of technology (discriminated primarily "
          "according to feeder mechanism type) employed by the "
          "input tray." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", ".." }, 
       Values { "Other", "Unknown", "SheetFeedAutoRemovableTray", 
          "SheetFeedAutoNonRemovableTray", "SheetFeedManual", 
          "ContinuousRoll", "ContinuousFanFold", "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputType", 
          "MIB.IETF|IANA-PRINTER-MIB.PrtInputTypeTC" }, 
       ModelCorrespondence { 
          "CIM_PrintInputTray.OtherTypeDescription" }]
   uint32 Type;

      [Description ( 
          "A free-form string that describes the type of technology "
          "when the value of the Type property is equal to 1 "
          "(Other)." ), 
       MaxLen ( 255 ), 
       ModelCorrespondence { "CIM_PrintInputTray.Type" }]
   string OtherTypeDescription;

      [Description ( 
          "The unit of measurement for use in calculating and "
          "relaying capacity values for this input tray." ), 
       ValueMap { "1", "2", "3", "4", "8", "16", "17", "18", "19", 
          ".." }, 
       Values { "Other", "Unknown", "TenThousandthsOfInches", 
          "Micrometers", "Sheets", "Feet", "Meters", "Items", 
          "Percent", "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputCapacityUnit", 
          "MIB.IETF|Printer-MIB.PrtCapacityUnitTC" }, 
       ModelCorrespondence { "CIM_PrintInputTray.OtherCapacityUnit" }]
   uint32 CapacityUnit;

      [Description ( 
          "A free-form string that describes the capacity unit when "
          "the value of the CapacityUnit property is equal to 1 "
          "(Other)." ), 
       MaxLen ( 255 ), 
       ModelCorrespondence { "CIM_PrintInputTray.CapacityUnit" }]
   string OtherCapacityUnit;

      [Description ( 
          "The basis for the limit property MaxCapacity, that "
          "specifies whether a meaningful value is available. 1 "
          "(Other) means the input tray places no restrictions on "
          "capacity and MaxCapacity shall be null. 2 (Unknown) "
          "means the input tray cannot sense a meaningful value and "
          "MaxCapacity shall be null. 3 (Actual) means the input "
          "tray can sense a meaningful value and MaxCapacity shall "
          "be present." ), 
       ValueMap { "1", "2", "3", ".." }, 
       Values { "Other", "Unknown", "Actual", "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputMaxCapacity" }, 
       ModelCorrespondence { "CIM_PrintInputTray.MaxCapacity" }]
   uint16 MaxCapacityBasis;

      [Description ( 
          "The maximum capacity of the input tray in units "
          "specified by CIM_PrintInputTray.CapacityUnit. There is "
          "no convention associated with the media itself so this "
          "value reflects claimed capacity. If this input tray can "
          "reliably sense this value, the value is sensed by the "
          "input tray and cannot be changed by the system "
          "administrator; otherwise, the value may be changed "
          "out-of-band by the system administrator." ), 
       MinValue ( 0 ), 
       MaxValue ( 2147483647 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputMaxCapacity", 
          "MIB.IETF|Printer-MIB.prtInputCapacityUnit", 
          "MIB.IETF|Printer-MIB.PrtCapacityUnitTC" }, 
       ModelCorrespondence { "CIM_PrintInputTray.MaxCapacityBasis" }]
   uint32 MaxCapacity;

      [Description ( 
          "The basis for the gauge property CurrentLevel, that "
          "specifies whether a meaningful value is available. 1 "
          "(Other) means the input tray places no restrictions on "
          "capacity and CurrentLevel shall be null. 2 (Unknown) "
          "means the input tray cannot sense a meaningful value and "
          "CurrentLevel shall be null. 3 (Actual) means the input "
          "tray can sense a meaningful value and CurrentLevel shall "
          "be present. 4 (AtLeastOne) means that the input tray can "
          "only sense that at least one capacity unit remains "
          "(i.e., not empty) and CurrentLevel shall be present and "
          "shall contain the value zero or one." ), 
       ValueMap { "1", "2", "3", "4", ".." }, 
       Values { "Other", "Unknown", "Actual", "AtLeastOne", 
          "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputCurrentLevel" }, 
       ModelCorrespondence { "CIM_PrintInputTray.CurrentLevel" }]
   uint16 CurrentLevelBasis;

      [Description ( 
          "The current level of the input tray in units specified "
          "by CIM_PrintInputTray.CapacityUnit. If this input tray "
          "can reliably sense this value, the value is sensed by "
          "the input tray and cannot be changed by the system "
          "administrator; otherwise, the value may be changed "
          "out-of-band by the system administrator." ), 
       MinValue ( 0 ), 
       MaxValue ( 2147483647 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputCurrentLevel", 
          "MIB.IETF|Printer-MIB.prtInputCapacityUnit", 
          "MIB.IETF|Printer-MIB.PrtCapacityUnitTC" }, 
       ModelCorrespondence { "CIM_PrintInputTray.CurrentLevelBasis" }]
   uint32 CurrentLevel;

      [Description ( 
          "This property contains detailed availability information "
          "for this PrintInputTray, as follows: 1 (Other) means "
          "other detailed availability information is present in "
          "the OtherAvailabilityStatus property. 2 (Unknown) means "
          "detailed availability information for this "
          "PrintInputTray is unknown. 3 (AvailableIdle) means this "
          "PrintInputTray is available and idle, i.e., not "
          "currently in use. 4 (AvailableStandy) means this "
          "PrintInputTray is available but on standby, e.g., in a "
          "power saving mode. 5 (AvailableActive) means this "
          "PrintInputTray is available and active, i.e., currently "
          "in use. 6 (AvailableBusy) means this PrintInputTray is "
          "available but busy, i.e., not immediately available for "
          "its primary function. 7 (UnavailableOnRequest) means "
          "this PrintInputTray is not available and is on request, "
          "i.e., needs human intervention. 8 (UnavailableBroken) "
          "means this PrintInputTray is not available and is "
          "broken, e.g., needs repair/replacement." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", ".." }, 
       Values { "Other", "Unknown", "AvailableIdle", 
          "AvailableStandby", "AvailableActive", "AvailableBusy", 
          "UnavailableOnRequest", "UnavailableBroken", 
          "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.PrtSubUnitStatusTC" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperatingStatus", 
          "CIM_PrintInputTray.OtherAvailabilityStatus" }]
   uint32 AvailabilityStatus;

      [Description ( 
          "A free-form string that describes the detailed "
          "availability of this PrintInputTray when the value of "
          "the AvailabilityStatus property is equal to 1 (Other)." ), 
       MaxLen ( 255 ), 
       ModelCorrespondence { "CIM_PrintInputTray.AvailabilityStatus" }]
   string OtherAvailabilityStatus;

      [Description ( 
          "If true, there are currently non-critical alerts on this "
          "input tray." ), 
       MappingStrings { "MIB.IETF|Printer-MIB.PrtSubUnitStatusTC" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus" }]
   boolean NonCriticalAlertsPresent;

      [Description ( 
          "If true, there are currently critical alerts on this input tray."
           ), 
       MappingStrings { "MIB.IETF|Printer-MIB.PrtSubUnitStatusTC" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus" }]
   boolean CriticalAlertsPresent;

      [Description ( 
          "This property provides the value of the PWG standard or "
          "custom media size name of the media that is (or, if "
          "empty, was or will be) in this input tray. The values of "
          "this property shall conform to the requirements of the "
          "PWG Media Standardized Names specification [PWG5101.1], "
          "which defines the normative values for this property. If "
          "this input tray can reliably sense this value, the value "
          "is sensed by the input tray and cannot be changed by the "
          "system administrator; otherwise, the value may be "
          "changed out-of-band by the system administrator. The "
          "empty value means unknown." ), 
       MaxLen ( 63 ), 
       MappingStrings { "PWG5101-1.PWG|Media Standardized Names", 
          "MIB.IETF|Printer-MIB.prtInputMediaDimFeedDirDeclared", 
          "MIB.IETF|Printer-MIB.prtInputMediaDimXFeedDirDeclared" }]
   string MediaSizeName;

      [Description ( 
          "The descriptive name of the media contained in this "
          "input tray. This media name is to be used by a client to "
          "format and localize a string for display to a human "
          "operator. This media name is not processed by the "
          "printer. It is used to provide information not "
          "expressible in terms of the other media attributes "
          "(e.g., CIM_PrintInputTray.MediaWeight and "
          "CIM_PrintInputTray.MediaType)." ), 
       MaxLen ( 63 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputMediaName" }]
   string MediaName;

      [Description ( 
          "The basis for the media property MediaWeight, that "
          "specifies whether a meaningful value is available. 2 "
          "(Unknown) means the input tray cannot sense a meaningful "
          "value and MediaWeight shall be null. 3 (Actual) means "
          "the input tray can sense a meaningful value and "
          "MediaWeight shall be present." ), 
       ValueMap { "2", "3", ".." }, 
       Values { "Unknown", "Actual", "DMTF Reserved" }, 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputMediaWeight" }, 
       ModelCorrespondence { "CIM_PrintInputTray.MediaWeight" }]
   uint16 MediaWeightBasis;

      [Description ( 
          "The weight of the media associated with this input tray "
          "in grams per square meter." ), 
       MinValue ( 0 ), 
       MaxValue ( 2147483647 ), 
       MappingStrings { "MIB.IETF|Printer-MIB.prtInputMediaWeight" }, 
       ModelCorrespondence { "CIM_PrintInputTray.MediaWeightBasis" }, 
       Punit ( "gram / (meter * meter)" )]
   uint32 MediaWeight;

      [Description ( 
          "The name of the type of media associated with this input "
          "tray. The values of this property should conform to the "
          "requirements of the PWG Media Standardized Names "
          "specification [PWG5101.1], which defines the normative "
          "values for this property. This media type name need not "
          "be processed by the printer; it might simply be "
          "displayed to an operator." ), 
       MaxLen ( 63 ), 
       MappingStrings { "PWG5101-1.PWG|Media Standardized Names", 
          "MIB.IETF|Printer-MIB.prtInputMediaType" }]
   string MediaType;

      [Description ( 
          "The name of the color of the media associated with this "
          "input tray. The values of this property should conform "
          "to the requirements of the PWG Media Standardized Names "
          "specification [PWG5101.1], which defines the normative "
          "values for this property." ), 
       MaxLen ( 63 ), 
       MappingStrings { "PWG5101-1.PWG|Media Standardized Names", 
          "MIB.IETF|Printer-MIB.prtInputMediaColor" }]
   string MediaColor;


};



class UNIX_PrintInputTray : CIM_PrintInputTray
{

};

