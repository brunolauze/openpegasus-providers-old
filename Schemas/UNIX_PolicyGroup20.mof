//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Policy" ), 
    Description ( 
       "An abstract class defining the common properties of the policy "
       "managed elements derived from CIM_Policy. The subclasses are "
       "used to create rules and groups of rules that work together to "
       "form a coherent set of policies within an administrative "
       "domain or set of domains." )]
class CIM_Policy : CIM_ManagedElement {

      [Description ( 
          "A user-friendly name of this policy-related object." )]
   string CommonName;

      [Description ( 
          "An array of keywords for characterizing / categorizing "
          "policy objects. Keywords are of one of two types: \n"
          "- Keywords defined in this and other MOFs, or in DMTF "
          "white papers. These keywords provide a vendor- "
          "independent, installation-independent way of "
          "characterizing policy objects. \n"
          "- Installation-dependent keywords for characterizing "
          "policy objects. Examples include \'Engineering\', "
          "\'Billing\', and \'Review in December 2000\'. \n"
          "This MOF defines the following keywords: \'UNKNOWN\', "
          "\'CONFIGURATION\', \'USAGE\', \'SECURITY\', \'SERVICE\', "
          "\'MOTIVATIONAL\', \'INSTALLATION\', and \'EVENT\'. These "
          "concepts are self-explanatory and are further discussed "
          "in the SLA/Policy White Paper. One additional keyword is "
          "defined: \'POLICY\'. The role of this keyword is to "
          "identify policy-related instances that may not be "
          "otherwise identifiable, in some implementations. The "
          "keyword \'POLICY\' is NOT mutually exclusive of the "
          "other keywords specified above." )]
   string PolicyKeywords[];


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::Policy" ), 
    Description ( 
       "PolicySet is an abstract class that represents a set of "
       "policies that form a coherent set. The set of contained "
       "policies has a common decision strategy and a common set of "
       "policy roles (defined via the PolicySetInRole Collection "
       "association). Subclasses include PolicyGroup and PolicyRule." )]
class CIM_PolicySet : CIM_Policy {

      [Description ( 
          "PolicyDecisionStrategy defines the evaluation method "
          "used for policies contained in the PolicySet. There are "
          "two values currently defined: \n"
          "- \'First Matching\' (1) executes the actions of the "
          "first rule whose conditions evaluate to TRUE. The "
          "concept of \'first\' is determined by examining the "
          "priority of the rule within the policy set (i.e., by "
          "examining the property, PolicySetComponent.Priority). "
          "Note that this ordering property MUST be maintained when "
          "processing the PolicyDecisionStrategy. \n"
          "- \'All\' (2) executes the actions of ALL rules whose "
          "conditions evaluate to TRUE, in the set. As noted above, "
          "the order of processing of the rules is defined by the "
          "property, PolicySetComponent.Priority (and within a "
          "rule, the ordering of the actions is defined by the "
          "property, PolicyActionStructure.ActionOrder). Note that "
          "when this strategy is defined, processing MUST be "
          "completed of ALL rules whose conditions evaluate to "
          "TRUE, regardless of errors in the execution of the rule "
          "actions." ), 
       ValueMap { "1", "2" }, 
       Values { "First Matching", "All" }]
   uint16 PolicyDecisionStrategy;

      [Deprecated { "CIM_PolicySetInRoleCollection" }, 
       Description ( 
          "The PolicyRoles property represents the roles associated "
          "with a PolicySet. All contained PolicySet instances "
          "inherit the values of the PolicyRoles of the aggregating "
          "PolicySet but the values are not copied. A contained "
          "PolicySet instance may, however, add additional "
          "PolicyRoles to those it inherits from its aggregating "
          "PolicySet(s). Each value in PolicyRoles multi-valued "
          "property represents a role for which the PolicySet "
          "applies, i.e., the PolicySet should be used by any "
          "enforcement point that assumes any of the listed "
          "PolicyRoles values. \n"
          "\n"
          "Although not officially designated as \'role "
          "combinations\', multiple roles may be specified using "
          "the form: \n"
          "<RoleName>[&&<RoleName>]* \n"
          "where the individual role names appear in alphabetical "
          "order (according to the collating sequence for UCS-2). "
          "Implementations may treat PolicyRoles values that are "
          "specified as \'role combinations\' as simple strings. \n"
          "\n"
          "This property is deprecated in lieu of the use of an "
          "association, CIM_PolicySetInRoleCollection. The latter "
          "is a more explicit and less error-prone approach to "
          "modeling that a PolicySet has one or more PolicyRoles." )]
   string PolicyRoles[];

      [Description ( 
          "Indicates whether this PolicySet is administratively "
          "enabled, administratively disabled, or enabled for "
          "debug. The \"EnabledForDebug\" property value is "
          "deprecated and, when it or any value not understood by "
          "the receiver is specified, the receiving enforcement "
          "point treats the PolicySet as \"Disabled\". To determine "
          "if a PolicySet is \"Enabled\", the containment hierarchy "
          "specified by the PolicySetComponent aggregation is "
          "examined and the Enabled property values of the "
          "hierarchy are ANDed together. Thus, for example, "
          "everything aggregated by a PolicyGroup may be disabled "
          "by setting the Enabled property in the PolicyGroup "
          "instance to \"Disabled\" without changing the Enabled "
          "property values of any of the aggregated instances. The "
          "default value is 1 (\"Enabled\")." ), 
       ValueMap { "1", "2", "3" }, 
       Values { "Enabled", "Disabled", "Enabled For Debug" }]
   uint16 Enabled = 1;


};


// Copyright (c) 2005 DMTF.  All rights reserved
   [Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Policy" ), 
    Description ( 
       "An aggregation of PolicySet instances (PolicyGroups and/or "
       "PolicyRules) that have the same decision strategy and inherit "
       "policy roles. PolicyGroup instances are defined and named "
       "relative to the CIM_System that provides their context." )]
class CIM_PolicyGroup : CIM_PolicySet {

      [Key, Description ( "The scoping System\'s CreationClassName." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.CreationClassName" )]
   string SystemCreationClassName;

      [Key, Description ( "The scoping System\'s Name." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.Name" )]
   string SystemName;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this "
          "property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Description ( 
          "A user-friendly name of this PolicyGroup." ), 
       MaxLen ( 256 )]
   string PolicyGroupName;


};



class UNIX_PolicyGroup : CIM_PolicyGroup
{

};

