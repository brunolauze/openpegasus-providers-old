//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Event" ), 
    Description ( 
       "The description of a CIM Listener destination. A CIM_Listener "
       "is an entity capable of receiving CIM Export Messages (e.g., "
       "Indications or responses to an asynchronous CIM Operation)." )]
class CIM_ListenerDestination : CIM_ManagedElement {

      [Key, Description ( 
          "A System\'s CreationClassName. A CIM Listener "
          "destination is defined in context of a CIM_System (e.g., "
          "the sending system." ), 
       MaxLen ( 256 )]
   string SystemCreationClassName;

      [Key, Description ( 
          "A System\'s Name. A CIM Listener destination is defined "
          "in context of a CIM_System (e.g., the sending system." ), 
       MaxLen ( 256 )]
   string SystemName;

      [Key, Description ( 
          "Indicates the name of the class or the subclass used in "
          "the creation of an instance. When used with the other "
          "key properties of this class, it allows all instances of "
          "this class and its subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Description ( 
          "Indicates the name of the CIM Listener destination." ), 
       MaxLen ( 256 )]
   string Name;

      [Description ( 
          "Describes the Persistence Type of the destination "
          "defined by this instance. If the value of "
          "PersistenceType is not specified, the value of "
          "PersistenceType MUST be treated as 2 (\"Permanent\"). A "
          "value of 2 (\"Permanent\") declares that the destination "
          "is always expected to be available (e.g., system log "
          "file). Inability to access this destination MUST be "
          "treated as an error condition. A value of 3 "
          "(\"Transient\") indicates that the destination is "
          "short-lived. Inability to access the destination MAY be "
          "treated as a normal termination condition. Subscriptions "
          "with \"Transient\" destinations MAY be deleted when the "
          "destination terminates or is no longer available." ), 
       ValueMap { "1", "2", "3" }, 
       Values { "Other", "Permanent", "Transient" }, 
       ModelCorrespondence { 
          "CIM_ListenerDestination.OtherPersistenceType" }]
   uint16 PersistenceType;

      [Description ( 
          "A string describing (\"Other\") values for "
          "PersistenceType. This value MUST be set to a non NULL "
          "value when the PersistenceType is 1 (\"Other\"). For all "
          "other values of PersistenceType, the value of "
          "OtherPersistenceType MUST be NULL." ), 
       ModelCorrespondence { 
          "CIM_ListenerDestination.PersistenceType" }]
   string OtherPersistenceType;

      [Description ( 
          "The destination IETF URI to which Export Messages are to "
          "be delivered. The scheme in the URI must be supported by "
          "theprotocol selected in the Protocol property." )]
   string Destination;

      [Description ( 
          "A free-form string providing a description of the "
          "supported protocols when 1, \"Other\", is specified for "
          "the Protocol." ), 
       ModelCorrespondence { "CIM_ListenerDestination.Protocol" }]
   string OtherProtocol;

      [Description ( 
          "Protocol describes an encoding and protocol which will "
          "be used to deliver the indication. If Other is used, the "
          "value for OtherProtocol must not be null.\n"
          "If a protocol is not specified, 2 \"CIM-XML\" must be "
          "assumed." ), 
       ValueMap { "1", "2", "3", "4", "5", ".." }, 
       Values { "Other", "CIM-XML", "SM CLP", "WS-Management", 
          "WSDM", "DMTF Reserved" }, 
       ModelCorrespondence { "CIM_ListenerDestination.OtherProtocol" }]
   uint16 Protocol = 2;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "CIM_ListenerDestination" }, 
    Abstract, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::Event" ), 
    Description ( 
       "CIM_IndicationHandler is an abstract superclass describing how "
       "an Indication is to be processd/delivered/\'handled\'. This "
       "may define a destination and protocol for delivering "
       "Indications, or it may define a process to invoke. This class "
       "is derived from CIM_ManagedElement to allow modeling the "
       "dependency of the Handler on a specific service." )]
class CIM_IndicationHandler : CIM_ListenerDestination {

      [Deprecated { "No value" }, 
       Description ( 
          "The name of the entity that created and/or maintains this Handler."
           )]
   string Owner;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Deprecated { "CIM_ListenerDestinationCIMXML" }, 
    Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::Event" ), 
    Description ( 
       "CIM_IndicationHandlerCIMXML describes the destination for "
       "Indications to be delivered via CIM-XML." )]
class CIM_IndicationHandlerCIMXML : CIM_IndicationHandler {

      [Deprecated { "CIM_ListenerDestinationCIMXML.Destination" }, 
       Required, Override ( "Destination" ), 
       Description ( 
          "The destination URL to which CIM-XML Indication messages "
          "are to be delivered. The scheme prefix MUST be "
          "consistent with the DMTF CIM-XML Specifications. If a "
          "scheme prefix is not specified, the scheme \"http:\" "
          "MUST be assumed." )]
   string Destination;


};



class UNIX_IndicationHandlerCIMXML : CIM_IndicationHandlerCIMXML
{

};

