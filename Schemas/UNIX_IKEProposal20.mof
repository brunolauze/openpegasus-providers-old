//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2012 DMTF.  All rights reserved.
   [Abstract, Version ( "2.33.0" ), 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "CIM_SettingData is used to represent configuration and and "
       "operational parameters for CIM_ManagedElement instances. There "
       "are a number of different uses of CIM_SettingData supported in "
       "the model today. Additional uses may be defined in the future.\n"
       "Instances of CIM_SettingData may represent Aspects of a "
       "CIM_ManagedElement instance. This is modeled using the "
       "CIM_SettingsDefineState association. CIM_SettingData may be "
       "used to define capabilities when associated to an instance of "
       "CIM_Capabilities through the CIM_SettingsDefineCapabilities "
       "association. \n"
       "Instances of CIM_SettingData may represent different types of "
       "configurations for a CIM_ManagedElement, including persistent "
       "configurations, in progress configuration changes, or "
       "requested configurations. The CIM_ElementSettingData "
       "association is used to model the relationship between a "
       "CIM_SettingData instance and the CIM_ManagedElement for which "
       "it is a configuration. \n"
       "When an instance of CIM_SettingData represents a "
       "configuration, the current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations." )]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. To ensure uniqueness within the "
          "NameSpace, the value of InstanceID should be constructed "
          "using the following \"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If the above \"preferred\" "
          "algorithm is not used, the defining entity must assure "
          "that the resulting InstanceID is not reused across any "
          "InstanceIDs produced by this or other providers for the "
          "NameSpace of this instance. \n"
          "For DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user-friendly name for this instance of SettingData. "
          "In addition, the user-friendly name can be used as an "
          "index property for a search or query. (Note: The name "
          "does not have to be unique within a namespace.)" )]
   string ElementName;

      [Description ( 
          "Enumeration indicating the type of setting. 0 \"Not "
          "Changeable - Persistent\" indicates the instance of "
          "SettingData represents primordial settings and shall not "
          "be modifiable. 1 \"Changeable - Transient\" indicates "
          "the SettingData represents modifiable settings that are "
          "not persisted. Establishing persistent settings from "
          "transient settings may be supported. 2 \"Changeable - "
          "Persistent\" indicates the SettingData represents a "
          "persistent configuration that may be modified. 3 \"Not "
          "Changeable - Transient\" indicates the SettingData "
          "represents a snapshot of the settings of the associated "
          "ManagedElement and is not persistent." ), 
       ValueMap { "0", "1", "2", "3" }, 
       Values { "Not Changeable - Persistent", 
          "Changeable - Transient", "Changeable - Persistent", 
          "Not Changeable - Transient" }]
   uint16 ChangeableType;

      [Description ( 
          "An instance of CIM_SettingData may correspond to a "
          "well-known configuration that exists for an associated "
          "CIM_ManagedElement. If the ConfigurationName property is "
          "non-NULL, the instance of CIM_SettingData shall "
          "correspond to a well-known configuration for a Managed "
          "Element, the value of the ConfigurationName property "
          "shall be the name of the configuration, and the "
          "ChangeableType property shall have the value 0 or 2. A "
          "value of NULL for the ConfigurationName property shall "
          "mean that the instance of CIM_SettingData does not "
          "correspond to a well-known configuration for a Managed "
          "Element or that this information is unknown." )]
   string ConfigurationName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::Settings" ), 
    Description ( 
       "The ScopedSettingData class represents the general concept of "
       "SettingData, which is scoped or contained by a ManagedElement "
       "(that is, settings that are specifically defined for a system, "
       "device, and so on). ScopedSettingData is tied to a "
       "ManagedElement using the ScopedSetting association. Note that "
       "the cardinality of the ManagedElement reference is Min(1), "
       "Max(1). This cardinality mandates the instantiation of the "
       "ScopedSetting association for the referenced instance of "
       "ScopedSettingData. ScopedSetting describes the existence "
       "requirements and context for the referenced instance of "
       "ManagedElement. Specifically, the ManagedElement must exist "
       "and it provides the context for the ScopedSettingData." )]
class CIM_ScopedSettingData : CIM_SettingData {


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::IPsecPolicy" ), 
    Description ( 
       "SAProposal is a base class defining the common properties of, "
       "and anchoring common associations for, IPsec phase 1 and phase "
       "2 proposals. It is defined as a kind of ScopedSettingData "
       "(scoped by a ComputerSystem or AdminDomain), since its "
       "subclasses define sets of IPsec properties that MUST be "
       "applied together, if negotiated. This subclassing is different "
       "than that defined in IETF\'s IPSP Policy draft - where it is "
       "subclassed from Policy. The definition as SettingData is more "
       "consistent with the application of the properties as a set, to "
       "the negotiated Security Association. To indicate that \'this\' "
       "proposaltransform is negotiated for a Security Association, "
       "use the ElementSettingData to associate the proposal and the "
       "SA." ), 
    MappingStrings { "IPSP Policy Model.IETF|SAProposal" }]
class CIM_SAProposal : CIM_ScopedSettingData {


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::IPsecPolicy" ), 
    Description ( 
       "IKEProposal contains the parameters necessary to drive the "
       "phase 1 IKE negotiation." ), 
    MappingStrings { "IPSP Policy Model.IETF|IKEProposal" }]
class CIM_IKEProposal : CIM_SAProposal {

      [Description ( 
          "MaxLifetimeSeconds specifies the maximum time the IKE "
          "message sender proposes for an SA to be considered valid "
          "after it has been created. A value of zero indicates "
          "that the default of 8 hours be used. A non-zero value "
          "indicates the maximum seconds lifetime." ), 
       Units ( "Seconds" ), 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.MaxLifetimeSeconds" }, 
       ModelCorrespondence { 
          "CIM_SecurityAssociationEndpoint.LifetimeSeconds" }, 
       PUnit ( "second" )]
   uint64 MaxLifetimeSeconds;

      [Description ( 
          "MaxLifetimeKilobytes specifies the maximum kilobyte "
          "lifetime the IKE message sender proposes for an SA to be "
          "considered valid after it has been created. A value of "
          "zero (the default) indicates that there should be no "
          "maximum kilobyte lifetime. A non-zero value specifies "
          "the desired kilobyte lifetime." ), 
       Units ( "KiloBytes" ), 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.MaxLifetimeKilobytes" }, 
       ModelCorrespondence { 
          "CIM_SecurityAssociationEndpoint.LifetimeKilobytes" }, 
       PUnit ( "byte * 10^3" )]
   uint64 MaxLifetimeKilobytes;

      [Description ( 
          "CipherAlgorithm is an enumeration that specifies the "
          "proposed encryption algorithm. The list of algorithms "
          "was generated from Appendix A of RFC2409. Note that the "
          "enumeration is different than the RFC list and aligns "
          "with the values in IKESAEndpoint.CipherAlgorithm." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8..65000", 
          "65001..65535" }, 
       Values { "Other", "DES", "IDEA", "Blowfish", "RC5", "3DES", 
          "CAST", "DMTF/IANA Reserved", "Vendor Reserved" }, 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.CipherAlgorithm", 
          "RFC2409.IETF|Appendix A" }, 
       ModelCorrespondence { "CIM_IKESAEndpoint.CipherAlgorithm", 
          "CIM_IKEProposal.OtherCipherAlgorithm" }]
   uint16 CipherAlgorithm;

      [Description ( 
          "Description of the encryption algorithm when the value 1 "
          "(\"Other\") is specified for the property, "
          "CipherAlgorithm." ), 
       ModelCorrespondence { 
          "CIM_IKESAEndpoint.OtherCipherAlgorithm", 
          "CIM_IKEProposal.CipherAlgorithm" }]
   string OtherCipherAlgorithm;

      [Description ( 
          "HashAlgorithm is an enumeration that specifies the "
          "proposed hash function. The list of algorithms was "
          "generated from Appendix A of RFC2409. Note that the "
          "enumeration is different than the RFC list and aligns "
          "with the values in IKESAEndpoint.HashAlgorithm." ), 
       ValueMap { "1", "2", "3", "4", "5..65000", "65001..65535" }, 
       Values { "Other", "MD5", "SHA-1", "Tiger", 
          "DMTF/IANA Reserved", "Vendor Reserved" }, 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.HashAlgorithm", 
          "RFC2409.IETF|Appendix A" }, 
       ModelCorrespondence { "CIM_IKESAEndpoint.HashAlgorithm", 
          "CIM_IKEProposal.OtherHashAlgorithm" }]
   uint16 HashAlgorithm;

      [Description ( 
          "Description of the hash function when the value 1 "
          "(\"Other\") is specified for the property, "
          "HashAlgorithm." ), 
       ModelCorrespondence { "CIM_IKESAEndpoint.OtherHashAlgorithm", 
          "CIM_IKEProposal.HashAlgorithm" }]
   string OtherHashAlgorithm;

      [Description ( 
          "AuthenticationMethod is an enumeration that specifies "
          "the proposed authentication. The list of methods was "
          "generated from Appendix A of RFC2409. Note that the "
          "enumeration is different than the RFC list and aligns "
          "with the values in IKESAEndpoint.AuthenticationMethod. "
          "There is one change to the list - the value 65000 has "
          "special meaning. It is a special value that indicates "
          "that this particular proposal should be repeated once "
          "for each authentication method corresponding to "
          "credentials installed on the machine. For example, if "
          "the system has a pre-shared key and an public-key "
          "certificate, a proposal list would be constructed which "
          "includes a proposal that specifies a pre-shared key and "
          "a proposal for any of the public-key certificates." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7..64999", "65000", 
          "65001..65535" }, 
       Values { "Other", "Pre-shared Key", "DSS Signatures", 
          "RSA Signatures", "Encryption with RSA", 
          "Revised Encryption with RSA", "DMTF/IANA Reserved", 
          "Any", "Vendor Reserved" }, 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.AuthenticationMethod", 
          "RFC2409.IETF|Appendix A" }, 
       ModelCorrespondence { 
          "CIM_IKESAEndpoint.AuthenticationMethod", 
          "CIM_IKEProposal.OtherAuthenticationMethod" }]
   uint16 AuthenticationMethod;

      [Description ( 
          "Description of the method when the value 1 (\"Other\") "
          "is specified for the property, AuthenticationMethod." ), 
       ModelCorrespondence { 
          "CIM_IKESAEndpoint.OtherAuthenticationMethod", 
          "CIM_IKEProposal.AuthenticationMethod" }]
   string OtherAuthenticationMethod;

      [Description ( 
          "The property GroupId specifies the proposed phase 1 "
          "security association key exchange group. This property "
          "is ignored for all aggressive mode exchanges "
          "(IKEAction.ExchangeMode = 4). If the GroupID number is "
          "from the vendor-specific range (32768-65535), the "
          "property VendorID qualifies the group number. Well-known "
          "group identifiers from RFC2412, Appendix E, are: Group "
          "1=\'768 bit prime\', Group 2=\'1024 bit prime\', Group 3 "
          "=\'Elliptic Curve Group with 155 bit field element\', "
          "Group 4= \'Large Elliptic Curve Group with 185 bit field "
          "element\', and Group 5=\'1536 bit prime\'." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "No Group/Non-Diffie-Hellman Exchange", 
          "DH-768 bit prime", "DH-1024 bit prime", 
          "EC2N-155 bit field element", 
          "EC2N-185 bit field element", "DH-1536 bit prime", 
          "Standard Group - Reserved", "Vendor Reserved" }, 
       MappingStrings { 
          "IPSP Policy Model.IETF|IKEProposal.GroupID", 
          "RFC2412.IETF|Appendix E" }, 
       ModelCorrespondence { "CIM_IKESAEndpoint.GroupID", 
          "CIM_IKEProposal.VendorID" }]
   uint16 GroupId;

      [Description ( 
          "VendorID identifies the vendor when the value of GroupID "
          "is in the vendor-specific range, 32768 to 65535." ), 
       ModelCorrespondence { "CIM_IKESAEndpoint.VendorID", 
          "CIM_IKEProposal.GroupId" }]
   string VendorID;


};



class UNIX_IKEProposal : CIM_IKEProposal
{

};

