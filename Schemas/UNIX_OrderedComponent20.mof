//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Aggregation, Version ( "2.7.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Component is a generic association used to establish \'part "
       "of\' relationships between Managed Elements. For example, it "
       "could be used to define the components or parts of a System." )]
class CIM_Component {

      [Key, Aggregate, Description ( 
          "The parent element in the association." )]
   CIM_ManagedElement REF GroupComponent;

      [Key, Description ( "The child element in the association." )]
   CIM_ManagedElement REF PartComponent;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Association, Aggregation, Version ( "2.19.1" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_OrderedComponent is a generic association used to "
       "establish \'part of\' relationships between ManagedElements. "
       "It arranges the PartComponents in a specific assigned order. "
       "The semantics of the order depends on the context and use by "
       "the referencing classes. For example, if this association is "
       "used to arrange settings in a hierarchical order, then this "
       "specifies the sequence in which the settings are applied." )]
class CIM_OrderedComponent : CIM_Component {

      [Description ( 
          "AssignedSequence is an unsigned integer \'n\' that "
          "indicates the relative order of ManagedElement "
          "instances. When \'n\' is a positive integer, it "
          "indicates a place in the sequence of members, with "
          "smaller integers indicating earlier positions in the "
          "sequence. The special value \'0\' indicates \'don\'t "
          "care\'. If two or more members have the same non-zero "
          "sequence number, then the ordering between those members "
          "is irrelevant, but they must all be ordered at the "
          "appropriate place in the overall sequence. \n"
          "\n"
          "A series of examples will make ordering of members "
          "clearer: \n"
          "If all members have the same sequence number, \n"
          "regardless of whether it is \'0\' or non-zero, any \n"
          "order is acceptable. \n"
          "o The values: \n"
          "1:MEMBER A \n"
          "2:MEMBER B \n"
          "1:MEMBER C \n"
          "3:MEMBER D \n"
          "indicate two acceptable orders: A,C,B,D or C,A,B,D, \n"
          "since A and C can be ordered in either sequence, but \n"
          "only at the \'1\' position. \n"
          "\n"
          "Note that the non-zero sequence numbers need not start "
          "with \'1\', and they need not be consecutive. All that "
          "matters is their relative magnitude." )]
   uint64 AssignedSequence;


};



class UNIX_OrderedComponent : CIM_OrderedComponent
{

};

