//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.8.0" ), 
    UMLPackagePath ( "CIM::Device::Memory" ), 
    Description ( 
       "LogicalElements may have Memory installed on them or otherwise "
       "associated with them - such as CacheMemory. This is made "
       "explicit in this association." )]
class CIM_AssociatedMemory : CIM_Dependency {

      [Override ( "Antecedent" ), 
       Description ( 
          "Memory installed on or associated with a Device." )]
   CIM_Memory REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( "The LogicalElement." )]
   CIM_LogicalElement REF Dependent;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Association, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Device::Memory" ), 
    Description ( 
       "Indicates that the Memory provides Cache to the Dependent "
       "Logical Element." )]
class CIM_AssociatedCacheMemory : CIM_AssociatedMemory {

      [Description ( 
          "Defines whether this is the Primary (value=3), Secondary "
          "(value=4) or Tertiary (value=5) Cache. Also, \"Other\" "
          "(1), \"Unknown\" (0) and \"Not Applicable\" (2) can be "
          "defined." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Not Applicable", "Primary", 
          "Secondary", "Tertiary" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.2" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherLevelDescription" }]
   uint16 Level;

      [Description ( 
          "A string describing the cache level when the Level value "
          "is 1, \"Other\"." ), 
       ModelCorrespondence { "CIM_AssociatedCacheMemory.Level" }]
   string OtherLevelDescription;

      [Description ( 
          "Defines whether this is write-back (value=2) or "
          "write-through (value=3) Cache, or whether this "
          "information \"Varies with Address\" (4) or is defined "
          "individually for each I/O (5). Also, \"Other\" (1) and "
          "\"Unknown\" (0) can be specified." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Write Back", "Write Through", 
          "Varies with Address", "Determination Per I/O" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.5" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherWritePolicyDescription" }]
   uint16 WritePolicy;

      [Description ( 
          "A string describing the Write Policy when the "
          "WritePolicy value is 1, \"Other\"." ), 
       ModelCorrespondence { "CIM_AssociatedCacheMemory.WritePolicy" }]
   string OtherWritePolicyDescription;

      [Description ( 
          "Defines whether this is for instruction caching "
          "(value=2), data caching (value=3) or both (value=4, "
          "\"Unified\"). Also, \"Other\" (1) and \"Unknown\" (0) "
          "can be defined." ), 
       ValueMap { "0", "1", "2", "3", "4" }, 
       Values { "Unknown", "Other", "Instruction", "Data", "Unified" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.9" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherCacheTypeDescription" }]
   uint16 CacheType;

      [Description ( 
          "A string describing the Cache Type when the CacheType "
          "value is 1, \"Other\"." ), 
       ModelCorrespondence { "CIM_AssociatedCacheMemory.CacheType" }]
   string OtherCacheTypeDescription;

      [Description ( 
          "Size, in bytes, of a single cache bucket or line." ), 
       Units ( "Bytes" ), 
       MappingStrings { "MIF.DMTF|System Cache|006.10" }, 
       PUnit ( "byte" )]
   uint32 LineSize;

      [Description ( 
          "An integer enumeration describing the algorithm to "
          "determine which cache lines or buckets should be "
          "re-used." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8" }, 
       Values { "Unknown", "Other", "Unknown", 
          "Least Recently Used (LRU)", "First In First Out (FIFO)", 
          "Last In First Out (LIFO)", "Least Frequently Used (LFU)", 
          "Most Frequently Used (MFU)", 
          "Data Dependent Multiple Algorithms" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.12" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherReplacementPolicyDescription" }]
   uint16 ReplacementPolicy;

      [Description ( 
          "A string describing the Cache replacement policy when "
          "the ReplacementPolicy value is 1, \"Other\"." ), 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.ReplacementPolicy" }]
   string OtherReplacementPolicyDescription;

      [Description ( 
          "Policy that shall be employed by the Cache for handling "
          "read requests. For example, \"Read\", \"Read-Ahead\" or "
          "both can be specified using the values, 2, 3 or 4, "
          "respectively. If the read policy is determined "
          "individually (ie, for each request), then the value 5 "
          "(\"Determination per I/O\") should be specified. \"Other\" "
          "(1) and \"Unknown\" (0) are also valid values." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Read", "Read-Ahead", 
          "Read and Read-Ahead", "Determination Per I/O" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.13" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherReadPolicyDescription" }]
   uint16 ReadPolicy;

      [Description ( 
          "A string describing the read policy when the ReadPolicy "
          "value is 1, \"Other\"." ), 
       ModelCorrespondence { "CIM_AssociatedCacheMemory.ReadPolicy" }]
   string OtherReadPolicyDescription;

      [Description ( 
          "Maximum amount of time, in seconds, dirty lines or "
          "buckets may remain in the Cache before they are flushed. "
          "A value of zero indicated that a cache flush is not "
          "controlled by a flushing timer." ), 
       Units ( "Seconds" ), 
       MappingStrings { "MIF.DMTF|System Cache|006.14" }, 
       PUnit ( "second" )]
   uint32 FlushTimer;

      [Description ( 
          "An integer enumeration defining the system cache "
          "associativity. For example, 5 indicates a fully "
          "associative cache." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13" }, 
       Values { "Unknown", "Other", "Direct Mapped", 
          "2-way Set-Associative", "4-way Set-Associative", 
          "Fully Associative", "8-way Set-Associative", 
          "16-way Set-Associative", "12-way Set Associative", 
          "24-way Set Associative", "32-way Set Associative", 
          "48-way Set Associative", "64-way Set Associative", 
          "20-way Set Associative" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.15" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherAssociativityDescription" }]
   uint16 Associativity;

      [Description ( 
          "A string describing the cache associativity when the "
          "Associativity value is 1, \"Other\"." ), 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.Associativity" }]
   string OtherAssociativityDescription;


};



class UNIX_AssociatedCacheMemory : CIM_AssociatedCacheMemory
{

};

