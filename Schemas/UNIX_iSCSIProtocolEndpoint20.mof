//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Abstract, Version ( "2.28.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards." )]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description ( 
          "A datetime value that indicates when the object was "
          "installed. Lack of a value does not indicate that the "
          "object is not installed." ), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known. When subclassed, the Name property can be "
          "overridden to be a Key property." ), 
       MaxLen ( 1024 )]
   string Name;

      [Description ( 
          "Indicates the current statuses of the element. Various "
          "operational statuses are defined. Many of the "
          "enumeration\'s values are self-explanatory. However, a "
          "few are not and are described here in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the "
          "near future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded so that a client can tell if the "
          "complete operation Completed with OK (passed), Completed "
          "with Error (failed), or Completed with Degraded (the "
          "operation finished, but it did not complete OK or did "
          "not report an error). \n"
          "\"Power Mode\" indicates that the element has additional "
          "power model information contained in the Associated "
          "PowerManagementService association. \n"
          "\"Relocating\" indicates the element is being relocated.\n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an "
          "array property, and to provide a migration path from "
          "today\'s environment to the future. This change was not "
          "made earlier because it required the deprecated "
          "qualifier. Due to the widespread use of the existing "
          "Status property in management applications, it is "
          "strongly recommended that providers or instrumentation "
          "provide both the Status and OperationalStatus "
          "properties. Further, the first value of "
          "OperationalStatus should contain the primary status for "
          "the element. When instrumented, Status (because it is "
          "single-valued) should also provide the primary status of "
          "the element." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "..", "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed", 
          "Predictive Failure", "Error", "Non-Recoverable Error", 
          "Starting", "Stopping", "Stopped", "In Service", 
          "No Contact", "Lost Communication", "Aborted", "Dormant", 
          "Supporting Entity in Error", "Completed", "Power Mode", 
          "Relocating", "DMTF Reserved", "Vendor Reserved" }, 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description ( 
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value "
          "assigned to OperationalStatus, then this property may "
          "contain an explanation as to why an object is being "
          "stopped. Note that entries in this array are correlated "
          "with those at the same array index in OperationalStatus." ), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description ( 
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in "
          "its enumeration. This change is made for 3 reasons: \n"
          "1) Status is more correctly defined as an array. This "
          "definition overcomes the limitation of describing status "
          "using a single value, when it is really a multi-valued "
          "property (for example, an element might be OK AND "
          "Stopped. \n"
          "2) A MaxLen of 10 is too restrictive and leads to "
          "unclear enumerated values. \n"
          "3) The change to a uint16 data type was discussed when "
          "CIM V2.0 was defined. However, existing V1.0 "
          "implementations used the string property and did not "
          "want to modify their code. Therefore, Status was "
          "grandfathered into the Schema. Use of the deprecated "
          "qualifier allows the maintenance of the existing "
          "property, but also permits an improved definition using "
          "OperationalStatus." ), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail", 
          "Starting", "Stopping", "Service", "Stressed", 
          "NonRecover", "No Contact", "Lost Comm", "Stopped" }, 
       MaxLen ( 10 )]
   string Status;

      [Description ( 
          "Indicates the current health of the element. This "
          "attribute expresses the health of this element but not "
          "necessarily that of its subcomponents. The possible "
          "values are 0 to 30, where 5 means the element is "
          "entirely healthy and 30 means the element is completely "
          "non-functional. The following continuum is defined: \n"
          "\"Non-recoverable Error\" (30) - The element has "
          "completely failed, and recovery is not possible. All "
          "functionality provided by this element has been lost. \n"
          "\"Critical Failure\" (25) - The element is "
          "non-functional and recovery might not be possible. \n"
          "\"Major Failure\" (20) - The element is failing. It is "
          "possible that some or all of the functionality of this "
          "component is degraded or not working. \n"
          "\"Minor Failure\" (15) - All functionality is available "
          "but some might be degraded. \n"
          "\"Degraded/Warning\" (10) - The element is in working "
          "order and all functionality is provided. However, the "
          "element is not working to the best of its abilities. For "
          "example, the element might not be operating at optimal "
          "performance or it might be reporting recoverable errors. \n"
          "\"OK\" (5) - The element is fully functional and is "
          "operating within normal operational parameters and "
          "without error. \n"
          "\"Unknown\" (0) - The implementation cannot report on "
          "HealthState at this time. \n"
          "DMTF has reserved the unused portion of the continuum "
          "for additional HealthStates in the future." ), 
       ValueMap { "0", "5", "10", "15", "20", "25", "30", "..", 
          "32768..65535" }, 
       Values { "Unknown", "OK", "Degraded/Warning", 
          "Minor failure", "Major failure", "Critical failure", 
          "Non-recoverable error", "DMTF Reserved", "Vendor Specific" }]
   uint16 HealthState;

      [Description ( 
          "CommunicationStatus indicates the ability of the "
          "instrumentation to communicate with the underlying "
          "ManagedElement. CommunicationStatus consists of one of "
          "the following values: Unknown, None, Communication OK, "
          "Lost Communication, or No Contact. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"Communication OK \" indicates communication is "
          "established with the element, but does not convey any "
          "quality of service. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the Managed "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable." ), 
       ValueMap { "0", "1", "2", "3", "4", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Communication OK", 
          "Lost Communication", "No Contact", "DMTF Reserved", 
          "Vendor Reserved" }]
   uint16 CommunicationStatus;

      [Description ( 
          "DetailedStatus compliments PrimaryStatus with additional "
          "status detail. It consists of one of the following "
          "values: Not Available, No Additional Information, "
          "Stressed, Predictive Failure, Error, Non-Recoverable "
          "Error, SupportingEntityInError. Detailed status is used "
          "to expand upon the PrimaryStatus of the element. \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Not Available\" indicates that the implementation "
          "(provider) is capable of returning a value for this "
          "property, but not ever for this particular piece of "
          "hardware/software or the property is intentionally not "
          "used because it adds no meaningful information (as in "
          "the case of a property that is intended to add "
          "additional info to another property). \n"
          "\"No Additional Information\" indicates that the element "
          "is functioning normally as indicated by PrimaryStatus = "
          "\"OK\". \n"
          "\"Stressed\" indicates that the element is functioning, "
          "but needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, and so on. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning normally but a failure is predicted in the "
          "near future. \n"
          "\"Non-Recoverable Error \" indicates that this element "
          "is in an error condition that requires human "
          "intervention. \n"
          "\"Supporting Entity in Error\" indicates that this "
          "element might be \"OK\" but that another element, on "
          "which it is dependent, is in error. An example is a "
          "network service or endpoint that cannot function due to "
          "lower-layer networking problems." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "..", "0x8000.." }, 
       Values { "Not Available", "No Additional Information", 
          "Stressed", "Predictive Failure", "Non-Recoverable Error", 
          "Supporting Entity in Error", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.PrimaryStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 DetailedStatus;

      [Description ( 
          "OperatingStatus provides a current status value for the "
          "operational condition of the element and can be used for "
          "providing more detail with respect to the value of "
          "EnabledState. It can also provide the transitional "
          "states when an element is transitioning from one state "
          "to another, such as when an element is transitioning "
          "between EnabledState and RequestedState, as well as "
          "other transitional conditions.\n"
          "OperatingStatus consists of one of the following values: "
          "Unknown, Not Available, In Service, Starting, Stopping, "
          "Stopped, Aborted, Dormant, Completed, Migrating, "
          "Emmigrating, Immigrating, Snapshotting. Shutting Down, "
          "In Test \n"
          "A Null return indicates the implementation (provider) "
          "does not implement this property. \n"
          "\"Unknown\" indicates the implementation is in general "
          "capable of returning this property, but is unable to do "
          "so at this time. \n"
          "\"None\" indicates that the implementation (provider) is "
          "capable of returning a value for this property, but not "
          "ever for this particular piece of hardware/software or "
          "the property is intentionally not used because it adds "
          "no meaningful information (as in the case of a property "
          "that is intended to add additional info to another "
          "property). \n"
          "\"Servicing\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"Starting\" describes an element being initialized. \n"
          "\"Stopping\" describes an element being brought to an "
          "orderly stop. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the "
          "latter implies an abrupt stop where the state and "
          "configuration of the element might need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Completed\" indicates that the element has completed "
          "its operation. This value should be combined with either "
          "OK, Error, or Degraded in the PrimaryStatus so that a "
          "client can tell if the complete operation Completed with "
          "OK (passed), Completed with Error (failed), or Completed "
          "with Degraded (the operation finished, but it did not "
          "complete OK or did not report an error). \n"
          "\"Migrating\" element is being moved between host "
          "elements. \n"
          "\"Immigrating\" element is being moved to new host "
          "element. \n"
          "\"Emigrating\" element is being moved away from host "
          "element. \n"
          "\"Shutting Down\" describes an element being brought to "
          "an abrupt stop. \n"
          "\"In Test\" element is performing test functions. \n"
          "\"Transitioning\" describes an element that is between "
          "states, that is, it is not fully available in either its "
          "previous state or its next state. This value should be "
          "used if other values indicating a transition to a "
          "specific state are not applicable.\n"
          "\"In Service\" describes an element that is in service "
          "and operational." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "..", "0x8000.." }, 
       Values { "Unknown", "Not Available", "Servicing", "Starting", 
          "Stopping", "Stopped", "Aborted", "Dormant", "Completed", 
          "Migrating", "Emigrating", "Immigrating", "Snapshotting", 
          "Shutting Down", "In Test", "Transitioning", "In Service", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 OperatingStatus;

      [Description ( 
          "PrimaryStatus provides a high level status value, "
          "intended to align with Red-Yellow-Green type "
          "representation of status. It should be used in "
          "conjunction with DetailedStatus to provide high level "
          "and detailed health status of the ManagedElement and its "
          "subcomponents. \n"
          "PrimaryStatus consists of one of the following values: "
          "Unknown, OK, Degraded or Error. \"Unknown\" indicates "
          "the implementation is in general capable of returning "
          "this property, but is unable to do so at this time. \n"
          "\"OK\" indicates the ManagedElement is functioning "
          "normally. \n"
          "\"Degraded\" indicates the ManagedElement is functioning "
          "below normal. \n"
          "\"Error\" indicates the ManagedElement is in an Error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
       Values { "Unknown", "OK", "Degraded", "Error", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.DetailedStatus", 
          "CIM_ManagedSystemElement.HealthState" }]
   uint16 PrimaryStatus;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices." )]
class CIM_LogicalElement : CIM_ManagedSystemElement {


};


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.22.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "This class extends LogicalElement to abstract the concept of "
       "an element that is enabled and disabled, such as a "
       "LogicalDevice or a ServiceAccessPoint." )]
class CIM_EnabledLogicalElement : CIM_LogicalElement {

      [Description ( 
          "EnabledState is an integer enumeration that indicates "
          "the enabled and disabled states of an element. It can "
          "also indicate the transitions between these requested "
          "states. For example, shutting down (value=4) and "
          "starting (value=10) are transient states between enabled "
          "and disabled. The following text briefly summarizes the "
          "various enabled and disabled states: \n"
          "Enabled (2) indicates that the element is or could be "
          "executing commands, will process any queued commands, "
          "and queues new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "Shutting Down (4) indicates that the element is in the "
          "process of going to a Disabled state. \n"
          "Not Applicable (5) indicates the element does not "
          "support being enabled or disabled. \n"
          "Enabled but Offline (6) indicates that the element might "
          "be completing commands, and will drop any new requests. \n"
          "Test (7) indicates that the element is in a test state. \n"
          "Deferred (8) indicates that the element might be "
          "completing commands, but will queue any new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in "
          "a restricted mode.\n"
          "Starting (10) indicates that the element is in the "
          "process of going to an Enabled state. New requests are "
          "queued." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11..32767", "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled", 
          "Shutting Down", "Not Applicable", "Enabled but Offline", 
          "In Test", "Deferred", "Quiesce", "Starting", 
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.OtherEnabledState" }]
   uint16 EnabledState = 5;

      [Description ( 
          "A string that describes the enabled or disabled state of "
          "the element when the EnabledState property is set to 1 "
          "(\"Other\"). This property must be set to null when "
          "EnabledState is any value other than 1." ), 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   string OtherEnabledState;

      [Description ( 
          "RequestedState is an integer enumeration that indicates "
          "the last requested or desired state for the element, "
          "irrespective of the mechanism through which it was "
          "requested. The actual state of the element is "
          "represented by EnabledState. This property is provided "
          "to compare the last requested and current enabled or "
          "disabled states. Note that when EnabledState is set to 5 "
          "(\"Not Applicable\"), then this property has no meaning. "
          "Refer to the EnabledState property description for "
          "explanations of the values in the RequestedState "
          "enumeration. \n"
          "\"Unknown\" (0) indicates the last requested state for "
          "the element is unknown.\n"
          "Note that the value \"No Change\" (5) has been "
          "deprecated in lieu of indicating the last requested "
          "state is \"Unknown\" (0). If the last requested or "
          "desired state is unknown, RequestedState should have the "
          "value \"Unknown\" (0), but may have the value \"No "
          "Change\" (5).Offline (6) indicates that the element has "
          "been requested to transition to the Enabled but Offline "
          "EnabledState. \n"
          "It should be noted that there are two new values in "
          "RequestedState that build on the statuses of "
          "EnabledState. These are \"Reboot\" (10) and \"Reset\" "
          "(11). Reboot refers to doing a \"Shut Down\" and then "
          "moving to an \"Enabled\" state. Reset indicates that the "
          "element is first \"Disabled\" and then \"Enabled\". The "
          "distinction between requesting \"Shut Down\" and "
          "\"Disabled\" should also be noted. Shut Down requests an "
          "orderly transition to the Disabled state, and might "
          "involve removing power, to completely erase any existing "
          "state. The Disabled state requests an immediate "
          "disabling of the element, such that it will not execute "
          "or accept any commands or processing requests. \n"
          "\n"
          "This property is set as the result of a method "
          "invocation (such as Start or StopService on "
          "CIM_Service), or can be overridden and defined as "
          "WRITEable in a subclass. The method approach is "
          "considered superior to a WRITEable property, because it "
          "allows an explicit invocation of the operation and the "
          "return of a result code. \n"
          "\n"
          "If knowledge of the last RequestedState is not supported "
          "for the EnabledLogicalElement, the property shall be "
          "NULL or have the value 12 \"Not Applicable\"." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "..", "32768..65535" }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Deferred", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved", 
          "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 RequestedState = 12;

      [Write, Description ( 
          "An enumerated value indicating an administrator\'s "
          "default or startup configuration for the Enabled State "
          "of an element. By default, the element is \"Enabled\" "
          "(value=2)." ), 
       ValueMap { "2", "3", "5", "6", "7", "9", "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Not Applicable", 
          "Enabled but Offline", "No Default", "Quiesce", 
          "DMTF Reserved", "Vendor Reserved" }]
   uint16 EnabledDefault = 2;

      [Description ( 
          "The date or time when the EnabledState of the element "
          "last changed. If the state of the element has not "
          "changed and this property is populated, then it must be "
          "set to a 0 interval value. If a state change was "
          "requested, but rejected or not yet processed, the "
          "property must not be updated." )]
   datetime TimeOfLastStateChange;

      [Description ( 
          "AvailableRequestedStates indicates the possible values "
          "for the RequestedState parameter of the method "
          "RequestStateChange, used to initiate a state change. The "
          "values listed shall be a subset of the values contained "
          "in the RequestedStatesSupported property of the "
          "associated instance of "
          "CIM_EnabledLogicalElementCapabilities where the values "
          "selected are a function of the current state of the "
          "CIM_EnabledLogicalElement. This property may be non-null "
          "if an implementation is able to advertise the set of "
          "possible values as a function of the current state. This "
          "property shall be null if an implementation is unable to "
          "determine the set of possible values as a function of "
          "the current state." ), 
       ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11", ".." }, 
       Values { "Enabled", "Disabled", "Shut Down", "Offline", 
          "Test", "Defer", "Quiesce", "Reboot", "Reset", 
          "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported" }]
   uint16 AvailableRequestedStates[];

      [Description ( 
          "TransitioningToState indicates the target state to which "
          "the instance is transitioning. \n"
          "A value of 5 \"No Change\" shall indicate that no "
          "transition is in progress.A value of 12 \"Not "
          "Applicable\" shall indicate the implementation does not "
          "support representing ongoing transitions. \n"
          "A value other than 5 or 12 shall identify the state to "
          "which the element is in the process of transitioning." ), 
       ValueMap { "0", "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", ".." }, 
       Values { "Unknown", "Enabled", "Disabled", "Shut Down", 
          "No Change", "Offline", "Test", "Defer", "Quiesce", 
          "Reboot", "Reset", "Not Applicable", "DMTF Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestStateChange", 
          "CIM_EnabledLogicalElement.RequestedState", 
          "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 TransitioningToState = 12;


      [Description ( 
          "Requests that the state of the element be changed to the "
          "value specified in the RequestedState parameter. When "
          "the requested state change takes place, the EnabledState "
          "and RequestedState of the element will be the same. "
          "Invoking the RequestStateChange method multiple times "
          "could result in earlier requests being overwritten or "
          "lost. \n"
          "A return code of 0 shall indicate the state change was "
          "successfully initiated. \n"
          "A return code of 3 shall indicate that the state "
          "transition cannot complete within the interval specified "
          "by the TimeoutPeriod parameter. \n"
          "A return code of 4096 (0x1000) shall indicate the state "
          "change was successfully initiated, a ConcreteJob has "
          "been created, and its reference returned in the output "
          "parameter Job. Any other return code indicates an error "
          "condition." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096", 
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported", 
          "Unknown or Unspecified Error", 
          "Cannot complete within Timeout Period", "Failed", 
          "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Method Parameters Checked - Job Started", 
          "Invalid State Transition", 
          "Use of Timeout Parameter Not Supported", "Busy", 
          "Method Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.RequestedState" }]
   uint32 RequestStateChange(
         [IN, Description ( 
             "The state requested for the element. This "
             "information will be placed into the RequestedState "
             "property of the instance if the return code of the "
             "RequestStateChange method is 0 (\'Completed with "
             "No Error\'), or 4096 (0x1000) (\'Job Started\'). "
             "Refer to the description of the EnabledState and "
             "RequestedState properties for the detailed "
             "explanations of the RequestedState values." ), 
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", 
             "11", "..", "32768..65535" }, 
          Values { "Enabled", "Disabled", "Shut Down", "Offline", 
             "Test", "Defer", "Quiesce", "Reboot", "Reset", 
             "DMTF Reserved", "Vendor Reserved" }, 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElement.RequestedState" }]
      uint16 RequestedState, 
         [IN ( false ), OUT, Description ( 
             "May contain a reference to the ConcreteJob created "
             "to track the state transition initiated by the "
             "method invocation." )]
      CIM_ConcreteJob REF Job, 
         [IN, Description ( 
             "A timeout period that specifies the maximum amount "
             "of time that the client expects the transition to "
             "the new state to take. The interval format must be "
             "used to specify the TimeoutPeriod. A value of 0 or "
             "a null parameter indicates that the client has no "
             "time requirements for the transition. \n"
             "If this property does not contain 0 or null and "
             "the implementation does not support this "
             "parameter, a return code of \'Use Of Timeout "
             "Parameter Not Supported\' shall be returned." )]
      datetime TimeoutPeriod);

};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "CIM_ServiceAccessPoint represents the ability to utilize or "
       "invoke a Service. Access points represent that a Service is "
       "made available for other entities to use." )]
class CIM_ServiceAccessPoint : CIM_EnabledLogicalElement {

      [Key, Description ( 
          "The CreationClassName of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.CreationClassName" )]
   string SystemCreationClassName;

      [Key, Description ( "The Name of the scoping System." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_System.Name" )]
   string SystemName;

      [Key, Description ( 
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this "
          "property allows all instances of this class and its "
          "subclasses to be uniquely identified." ), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), 
       Description ( 
          "The Name property uniquely identifies the "
          "ServiceAccessPoint and provides an indication of the "
          "functionality that is managed. This functionality is "
          "described in more detail in the Description property of "
          "the object." ), 
       MaxLen ( 256 )]
   string Name;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.15.0" ), 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "A communication point from which data can be sent or received. "
       "ProtocolEndpoints link system or computer interfaces to "
       "LogicalNetworks." )]
class CIM_ProtocolEndpoint : CIM_ServiceAccessPoint {

      [Override ( "Description" ), 
       MappingStrings { "MIB.IETF|IF-MIB.ifDescr" }]
   string Description;

      [Override ( "OperationalStatus" ), 
       MappingStrings { "MIB.IETF|IF-MIB.ifOperStatus" }]
   uint16 OperationalStatus[];

      [Override ( "EnabledState" ), 
       MappingStrings { "MIB.IETF|IF-MIB.ifAdminStatus" }]
   uint16 EnabledState;

      [Override ( "TimeOfLastStateChange" ), 
       MappingStrings { "MIB.IETF|IF-MIB.ifLastChange" }]
   datetime TimeOfLastStateChange;

      [Override ( "Name" ), 
       Description ( 
          "A string that identifies this ProtocolEndpoint with "
          "either a port or an interface on a device. To ensure "
          "uniqueness, the Name property should be prepended or "
          "appended with information from the Type or "
          "OtherTypeDescription properties. The method selected is "
          "described in the NameFormat property of this class." ), 
       MaxLen ( 256 )]
   string Name;

      [Description ( 
          "NameFormat contains the naming heuristic that is "
          "selected to ensure that the value of the Name property "
          "is unique. For example, you might choose to prepend the "
          "name of the port or interface with the Type of "
          "ProtocolEndpoint (for example, IPv4) of this instance "
          "followed by an underscore." ), 
       MaxLen ( 256 )]
   string NameFormat;

      [Deprecated { "CIM_ProtocolEndpoint.ProtocolIFType" }, 
       Description ( 
          "Note: This property is deprecated in lieu of the "
          "ProtocolIFType enumeration. This deprecation was done to "
          "have better alignment between the IF-MIB of the IETF and "
          "this CIM class. \n"
          "Deprecated description: ProtocolType is an enumeration "
          "that provides information to categorize and classify "
          "different instances of this class. For most instances, "
          "information in this enumeration and the definition of "
          "the subclass overlap. However, there are several cases "
          "where a specific subclass of ProtocolEndpoint is not "
          "required (for example, there is no Fibre Channel "
          "subclass of ProtocolEndpoint). Therefore, this property "
          "is needed to define the type of Endpoint." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27" }, 
       Values { "Unknown", "Other", "IPv4", "IPv6", "IPX", 
          "AppleTalk", "DECnet", "SNA", "CONP", "CLNP", "VINES", 
          "XNS", "ATM", "Frame Relay", "Ethernet", "TokenRing", 
          "FDDI", "Infiniband", "Fibre Channel", 
          "ISDN BRI Endpoint", "ISDN B Channel Endpoint", 
          "ISDN D Channel Endpoint", 
          // 22                          
          "IPv4/v6", 
          "BGP", "OSPF", "MPLS", "UDP", "TCP" }, 
       ModelCorrespondence { 
          "CIM_ProtocolEndpoint.OtherTypeDescription" }]
   uint16 ProtocolType;

      [Description ( 
          "ProtocolIFType is an enumeration that is synchronized "
          "with the IANA ifType MIB. The ifType MIB is maintained "
          "at the URL, "
          "http://www.iana.org/assignments/ianaiftype-mib. Also, "
          "additional values defined by the DMTF are included. The "
          "property is used to categorize and classify instances of "
          "the ProtocolEndpoint class. Note that if the "
          "ProtocolIFType is set to 1 (Other), then the type "
          "information should be provided in the "
          "OtherTypeDescription string property." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
          "10", "11", "12", "13", "14", "15", "16", "17", "18", 
          "19", "20", "21", "22", "23", "24", "25", "26", "27", 
          "28", "29", "30", "31", "32", "33", "34", "35", "36", 
          "37", "38", "39", "40", "41", "42", "43", "44", "45", 
          "46", "47", "48", "49", "50", "51", "52", "53", "54", 
          "55", "56", "57", "58", "59", "60", "61", "62", "63", 
          "64", "65", "66", "67", "68", "69", "70", "71", "72", 
          "73", "74", "75", "76", "77", "78", "79", "80", "81", 
          "82", "83", "84", "85", "86", "87", "88", "89", "90", 
          "91", "92", "93", "94", "95", "96", "97", "98", "99", 
          "100", "101", "102", "103", "104", "105", "106", "107", 
          "108", "109", "110", "111", "112", "113", "114", "115", 
          "116", "117", "118", "119", "120", "121", "122", "123", 
          "124", "125", "126", "127", "128", "129", "130", "131", 
          "132", "133", "134", "135", "136", "137", "138", "139", 
          "140", "141", "142", "143", "144", "145", "146", "147", 
          "148", "149", "150", "151", "152", "153", "154", "155", 
          "156", "157", "158", "159", "160", "161", "162", "163", 
          "164", "165", "166", "167", "168", "169", "170", "171", 
          "172", "173", "174", "175", "176", "177", "178", "179", 
          "180", "181", "182", "183", "184", "185", "186", "187", 
          "188", "189", "190", "191", "192", "193", "194", "195", 
          "196", "197", "198", "199", "200", "201", "202", "203", 
          "204", "205", "206", "207", "208", "209", "210", "211", 
          "212", "213", "214", "215", "216", "217", "218", "219", 
          "220", "221", "222", "223", "224", "225..4095", "4096", 
          "4097", "4098", "4099", "4100", "4101", "4102", "4103", 
          "4104", "4105", "4106", "4107", "4108", "4109", "4110", 
          "4111", "4112", "4113", "4114", "4115", "4200", "4201", 
          "4202", "4203", "4204", "4205", "4300", "4400", "4401", 
          "4402", "4403", "4404", "4405", "4406", "..", "32768.." }, 
       Values { "Unknown", "Other", "Regular 1822", "HDH 1822", 
          "DDN X.25", "RFC877 X.25", "Ethernet CSMA/CD", 
          "ISO 802.3 CSMA/CD", "ISO 802.4 Token Bus", 
          "ISO 802.5 Token Ring", "ISO 802.6 MAN", "StarLAN", 
          "Proteon 10Mbit", "Proteon 80Mbit", "HyperChannel", 
          "FDDI", "LAP-B", "SDLC", "DS1", "E1", "Basic ISDN", 
          "Primary ISDN", "Proprietary Point-to-Point Serial", 
          "PPP", "Software Loopback", "EON", "Ethernet 3Mbit", 
          "NSIP", "SLIP", "Ultra", "DS3", "SIP", "Frame Relay", 
          "RS-232", "Parallel", "ARCNet", "ARCNet Plus", "ATM", 
          "MIO X.25", "SONET", "X.25 PLE", "ISO 802.211c", 
          "LocalTalk", "SMDS DXI", "Frame Relay Service", "V.35", 
          "HSSI", "HIPPI", "Modem", "AAL5", "SONET Path", 
          "SONET VT", "SMDS ICIP", "Proprietary Virtual/Internal", 
          "Proprietary Multiplexor", "IEEE 802.12", "Fibre Channel", 
          "HIPPI Interface", "Frame Relay Interconnect", 
          "ATM Emulated LAN for 802.3", 
          "ATM Emulated LAN for 802.5", "ATM Emulated Circuit", 
          "Fast Ethernet (100BaseT)", "ISDN", "V.11", "V.36", 
          "G703 at 64K", "G703 at 2Mb", "QLLC", 
          "Fast Ethernet 100BaseFX", "Channel", "IEEE 802.11", 
          "IBM 260/370 OEMI Channel", "ESCON", 
          "Data Link Switching", "ISDN S/T Interface", 
          "ISDN U Interface", "LAP-D", "IP Switch", 
          "Remote Source Route Bridging", "ATM Logical", "DS0", 
          "DS0 Bundle", "BSC", "Async", "Combat Net Radio", 
          "ISO 802.5r DTR", "Ext Pos Loc Report System", 
          "AppleTalk Remote Access Protocol", 
          "Proprietary Connectionless", "ITU X.29 Host PAD", 
          "ITU X.3 Terminal PAD", "Frame Relay MPI", "ITU X.213", 
          "ADSL", "RADSL", "SDSL", "VDSL", "ISO 802.5 CRFP", 
          "Myrinet", "Voice Receive and Transmit", 
          "Voice Foreign Exchange Office", 
          "Voice Foreign Exchange Service", "Voice Encapsulation", 
          "Voice over IP", "ATM DXI", "ATM FUNI", "ATM IMA", 
          "PPP Multilink Bundle", "IP over CDLC", "IP over CLAW", 
          "Stack to Stack", "Virtual IP Address", "MPC", 
          "IP over ATM", "ISO 802.5j Fibre Token Ring", "TDLC", 
          "Gigabit Ethernet", "HDLC", "LAP-F", "V.37", "X.25 MLP", 
          "X.25 Hunt Group", "Transp HDLC", "Interleave Channel", 
          "FAST Channel", "IP (for APPN HPR in IP Networks)", 
          "CATV MAC Layer", "CATV Downstream", "CATV Upstream", 
          "Avalon 12MPP Switch", "Tunnel", "Coffee", 
          "Circuit Emulation Service", "ATM SubInterface", 
          "Layer 2 VLAN using 802.1Q", "Layer 3 VLAN using IP", 
          "Layer 3 VLAN using IPX", "Digital Power Line", 
          "Multimedia Mail over IP", "DTM", "DCN", "IP Forwarding", 
          "MSDSL", "IEEE 1394", "IF-GSN/HIPPI-6400", 
          "DVB-RCC MAC Layer", "DVB-RCC Downstream", 
          "DVB-RCC Upstream", "ATM Virtual", "MPLS Tunnel", "SRP", 
          "Voice over ATM", "Voice over Frame Relay", "ISDL", 
          "Composite Link", "SS7 Signaling Link", 
          "Proprietary P2P Wireless", "Frame Forward", 
          "RFC1483 Multiprotocol over ATM", "USB", 
          "IEEE 802.3ad Link Aggregate", "BGP Policy Accounting", 
          "FRF .16 Multilink FR", "H.323 Gatekeeper", "H.323 Proxy", 
          "MPLS", "Multi-Frequency Signaling Link", "HDSL-2", 
          "S-HDSL", "DS1 Facility Data Link", 
          "Packet over SONET/SDH", "DVB-ASI Input", 
          "DVB-ASI Output", "Power Line", 
          "Non Facility Associated Signaling", "TR008", "GR303 RDT", 
          "GR303 IDT", "ISUP", "Proprietary Wireless MAC Layer", 
          "Proprietary Wireless Downstream", 
          "Proprietary Wireless Upstream", "HIPERLAN Type 2", 
          "Proprietary Broadband Wireless Access Point to Mulipoint", 
          "SONET Overhead Channel", 
          "Digital Wrapper Overhead Channel", 
          "ATM Adaptation Layer 2", "Radio MAC", "ATM Radio", 
          "Inter Machine Trunk", "MVL DSL", "Long Read DSL", 
          "Frame Relay DLCI Endpoint", "ATM VCI Endpoint", 
          "Optical Channel", "Optical Transport", "Proprietary ATM", 
          "Voice over Cable", "Infiniband", "TE Link", "Q.2931", 
          "Virtual Trunk Group", "SIP Trunk Group", "SIP Signaling", 
          "CATV Upstream Channel", "Econet", "FSAN 155Mb PON", 
          "FSAN 622Mb PON", "Transparent Bridge", "Line Group", 
          "Voice E&M Feature Group", "Voice FGD EANA", "Voice DID", 
          "MPEG Transport", "6To4", "GTP", "Paradyne EtherLoop 1", 
          "Paradyne EtherLoop 2", "Optical Channel Group", 
          "HomePNA", "GFP", "ciscoISLvlan", "actelisMetaLOOP", 
          "Fcip", "IANA Reserved", "IPv4", "IPv6", "IPv4/v6", "IPX", 
          "DECnet", "SNA", "CONP", "CLNP", "VINES", "XNS", 
          "ISDN B Channel Endpoint", "ISDN D Channel Endpoint", 
          "BGP", "OSPF", "UDP", "TCP", "802.11a", "802.11b", 
          "802.11g", "802.11h", "NFS", "CIFS", "DAFS", "WebDAV", 
          "HTTP", "FTP", "NDMP", "Telnet", "SSH", "SM CLP", "SMTP", 
          "LDAP", "RDP", "HTTPS", "DMTF Reserved", "Vendor Reserved" }, 
       MappingStrings { "MIB.IETF|IF-MIB.ifType" }, 
       ModelCorrespondence { 
          "CIM_ProtocolEndpoint.OtherTypeDescription" }]
   uint16 ProtocolIFType;

      [Description ( 
          "A string that describes the type of ProtocolEndpoint "
          "when the Type property of this class (or any of its "
          "subclasses) is set to 1 (Other). This property should be "
          "set to null when the Type property is any value other "
          "than 1." ), 
       MaxLen ( 64 ), 
       ModelCorrespondence { "CIM_ProtocolEndpoint.ProtocolType", 
          "CIM_ProtocolEndpoint.ProtocolIFType" }]
   string OtherTypeDescription;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.11.0" ), 
    UMLPackagePath ( "CIM::Network::ProtocolEndpoints" ), 
    Description ( 
       "A SCSIProtocolEndpoint represents the protocol (command) "
       "aspects of a logical SCSI port, independent of the "
       "connection/transport. SCSIProtocolEndpoint is either directly "
       "or indirectly associated to one or more instances of "
       "LogicalPort (via PortImplementsEndpoint) depending on the "
       "underlying transport. Indirect associations aggregate one or "
       "more LogicalPorts using intermediate ProtocolEndpoints (iSCSI, "
       "etc). SCSIProtocolEndpoint is also associated to a "
       "SCSIProtocolController, representing the SCSI device." )]
class CIM_SCSIProtocolEndpoint : CIM_ProtocolEndpoint {

      [Override ( "Name" ), 
       Description ( 
          "The SCSI identifier for the target or initiator device, "
          "in the format appropriate for the ConnectionType. If a "
          "ConnectionType specific subclass is defined, the "
          "subclass may override Name to define the format. For "
          "other ConnectionTypes, the format (and content) should "
          "match that of PermamnentAddress of the corresponding "
          "LogicalPort." ), 
       MaxLen ( 256 ), 
       MappingStrings { 
          "SPC.INCITS-T10 |Protocol Specific Parameters | Name" }, 
       ModelCorrespondence { 
          "CIM_SCSIProtocolEndpoint.ConnectionType", 
          "CIM_SCSIProtocolEndpoint.OtherConnectionType" }]
   string Name;

      [Description ( 
          "The supported connection type for this endpoint. The "
          "connection type may be needed before the port(s) are "
          "associated and also is used in some SCSI commands." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9" }, 
       Values { "Other", "Fibre Channel", "Parallel SCSI", "SSA", 
          "IEEE 1394", "RDMA", "iSCSI", "SAS", "ADT" }, 
       MappingStrings { 
          "SPC.INCITS-T10 | Protocol Identifier | Values" }, 
       ModelCorrespondence { "CIM_SCSIProtocolEndpoint.Name", 
          "CIM_SCSIProtocolEndpoint.OtherConnectionType" }]
   uint16 ConnectionType;

      [Description ( 
          "For iSCSI, each SCSIProtocolEndpoint MUST act as either "
          "a target or an initiator endpoint. Other transports "
          "allow a SCSI PE to act as both an initiator and target "
          "endpoint. This property indicates which role this "
          "ProtocolEndpoint implements." ), 
       ValueMap { "0", "2", "3", "4" }, 
       Values { "Unknown", "Initiator", "Target", 
          "Both Initiator and Target" }]
   uint16 Role;

      [Description ( 
          "For ports on a target device, the port number, relative "
          "to the storage system. 0 is reserved by T10, 1 is port "
          "A, 2 is port B, etc. These numbers are used in SCSI "
          "commands that operate on target port groups." ), 
       MinValue ( 1 ), 
       MappingStrings { 
          "SPC.INCITS-T10 | RelativeTargetPort | IdentifierFormat" }]
   uint32 TargetRelativePortNumber;

      [Description ( 
          "The connection type, if ConnectionType is \"Other\"." ), 
       ModelCorrespondence { "CIM_SCSIProtocolEndpoint.Name", 
          "CIM_SCSIProtocolEndpoint.ConnectionType" }]
   string OtherConnectionType;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.11.0" ), 
    UMLPackagePath ( "CIM::Network::ProtocolEndpoints" ), 
    Description ( 
       "This is an iSCSI-specific SCSIProtocolEndpoint. ConnectionType "
       "MUST be \'iSCSI\'. \n"
       "An iSCSIProtocolEndpoint represents an iSCSI port, which is "
       "the usage of a subset of network portals (TCP+IP "
       "ProtocolEndpoints) in a Portal Group by an iSCSI node. The "
       "BindsTo associations from iSCSIProtocolEndpoint to "
       "TCPProtocolEndpoints makes this relationship explicit. \n"
       "For an iSCSI target, the Identifier property (the Target "
       "Portal Group Tag) makes the relationship unique. \n"
       "For an iSCSI initiator, the session identifier makes the "
       "initiator port unique within the node." )]
class CIM_iSCSIProtocolEndpoint : CIM_SCSIProtocolEndpoint {

      [Override ( "Name" ), 
       Description ( 
          "The format of Name is based on the ConnectionType "
          "property. For iSCSI, the Name property of an "
          "SCSIProtocolEndpoint MUST contain the iSCSI port name as "
          "described in the iSCSI RFC (currently "
          "http://www.ietf.org/internet-drafts/draft-ietf- "
          "ips-iscsi-20.txt) - \n"
          "<iSCSI node name> + \'i,\' + ISID for initiators, \n"
          "<iSCSI node name> + \'t,\' + TPGT for targets, \n"
          "where <iSCSI node name> can be any of the standard iSCSI "
          "name namespaces (eg. iqn, eui); and includes the "
          "namespace prefix." ), 
       MaxLen ( 256 ), 
       ModelCorrespondence { 
          "CIM_SCSIProtocolEndpoint.ConnectionType", 
          "CIM_SCSIProtocolEndpoint.OtherConnectionType" }]
   string Name;

      [Required, Description ( 
          "If this is an Initiator PE, Identifier MUST contain the "
          "ISID, if this is a Target PE, Identifier MUST contain "
          "the Target Portal Group Tag (TGPT). Each "
          "iSCSIProtocolEndpoint associated to a common "
          "SCSIProtocolController (iSCSI node) MUST have a unique "
          "Identifier. This field is formatted as 12 hexadecimal "
          "digits." ), 
       MaxLen ( 13 )]
   string Identifier;

      [Override ( "Role" ), 
       Description ( 
          "For iSCSI, each SCSIProtocolEndpoint MUST act as either "
          "a target or an initiator endpoint." ), 
       ValueMap { "2", "3" }, 
       Values { "Initiator", "Target" }]
   uint16 Role;


};



class UNIX_iSCSIProtocolEndpoint : CIM_iSCSIProtocolEndpoint
{

};

