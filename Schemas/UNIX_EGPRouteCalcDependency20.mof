//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Abstract, Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements." )]
class CIM_Dependency {

      [Key, Description ( 
          "Antecedent represents the independent object in this association."
           )]
   CIM_ManagedElement REF Antecedent;

      [Key, Description ( 
          "Dependent represents the object that is dependent on the "
          "Antecedent." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Deprecated { "CIM_ServiceAvailableToElement" }, 
    Version ( "2.10.0" ), 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "Note: The use of the CIM_ProvidesServiceToElement class has "
       "been deprecated. Instead, ServiceAvailableToElement conveys "
       "the semantics of use, while the subclasses of "
       "ProvidesServiceToElement (or the ConcreteDependency "
       "association) describe dependency relationships. "
       "CIM_ProvidesServiceToElement was meant to generalize the "
       "ServiceServiceDependency association. This method indicates "
       "that ManagedElements can use the functionality provided by one "
       "or more Services. An example of the association is that a "
       "Processor and an enclosure (a PhysicalElement) can use "
       "AlertOnLAN Services to signal an incomplete or erroneous boot. "
       "In reality, AlertOnLAN is simply a HostedService on a computer "
       "system that is generally available for use and is not a "
       "dependency of the processor or enclosure. To describe that the "
       "use of the service might be restricted or have limited "
       "availability or applicability, the "
       "CIM_ServiceAvailableToElement association would be "
       "instantiated." )]
class CIM_ProvidesServiceToElement : CIM_Dependency {

      [Deprecated { "CIM_ServiceAvailableToElement.ServiceProvided" }, 
       Override ( "Antecedent" ), 
       Description ( 
          "Note: The use of this element is deprecated. Deprecated "
          "description: The Service provided." )]
   CIM_Service REF Antecedent;

      [Deprecated { "CIM_ServiceAvailableToElement.UserOfService" }, 
       Override ( "Dependent" ), 
       Description ( 
          "Note: The use of this element is deprecated. Deprecated "
          "description: The ManagedElement that is dependent on the "
          "Service." )]
   CIM_ManagedElement REF Dependent;


};


// Copyright (c) 2005 - 2007 DMTF.  All rights reserved.
   [Association, Version ( "2.16.0" ), 
    UMLPackagePath ( "CIM::Core::Service" ), 
    Description ( 
       "CIM_ServiceServiceDependency is an association between a "
       "Service and another Service, which indicates that the latter "
       "cooperates with the former, is required to be present, "
       "required to have completed, or must be absent for the former "
       "Service to provide its functionality. For example, Boot "
       "Services might be dependent upon underlying system "
       "initialization Services. In the case of the initialization "
       "Services, the Boot Service might be dependent on the "
       "completion of the init Services. \n"
       "When examining the ServiceServiceDependency class definition, "
       "note that its superclass ProvidesServiceToElement is "
       "deprecated. Unfortunately, ProvidesServiceToElement cannot be "
       "removed from the object hierarchy without a major Schema "
       "release. When or if a major release occurs, the "
       "ProvidesServiceToElement superclass will be removed, and "
       "ServiceServiceDependency will subclass from CIM_Dependency "
       "directly." )]
class CIM_ServiceServiceDependency : CIM_ProvidesServiceToElement {

      [Override ( "Antecedent" ), 
       Description ( "The required Service." )]
   CIM_Service REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "The Service that is dependent on an underlying Service." )]
   CIM_Service REF Dependent;

      [Description ( 
          "The nature of the Service-to-Service dependency. 2 - "
          "Antecedent Service shall have completed before Dependent "
          "service\'s functionality is available.\n"
          "3 - Antecedent Service shall have started before "
          "Dependent service\'s functionality is available.\n"
          "4 - Antecedent Service shall not be started in order for "
          "Dependent service\'s functionality to be available.\n"
          "5 - The two Services cooperate and augment each other\'s "
          "function. There is no requirement implied by this value "
          "regarding the execution of the Antecedent service in "
          "order for the Dependent service to operate." ), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Service Must Have Completed", 
          "Service Must Be Started", "Service Must Not Be Started", 
          "Cooperate" }]
   uint16 TypeOfDependency;

      [Description ( 
          "This property describes that the Antecedent Service must "
          "be restarted after the Dependent operation is complete." )]
   boolean RestartService;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Association, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Network::BGP" ), 
    Description ( 
       "This is a specialization of ServiceServiceDependency, and "
       "captures the dependency that external gateway protocols (such "
       "as BGP) have on interior gateway protocols (such as OSPF)." )]
class CIM_EGPRouteCalcDependency : CIM_ServiceServiceDependency {

      [Override ( "Antecedent" ), 
       Description ( 
          "The independent RouteCalculationService that provides "
          "routing information from the AS, for the EGP to use." )]
   CIM_RouteCalculationService REF Antecedent;

      [Override ( "Dependent" ), 
       Description ( 
          "The dependent RouteCalculationService (e.g., the Route "
          "CalculationService) that is functioning as an EGP." )]
   CIM_RouteCalculationService REF Dependent;

      [Description ( 
          "Sometimes it is necessary to inject EGP information, "
          "such as that from BGP, into IGPs. This attribute defines "
          "whether this should be done for the two routing "
          "protocols that are defined by this association. The "
          "values below mean that no, partial, and full EGP "
          "information is injected into the IGP, respectively." ), 
       ValueMap { "1", "2", "3" }, 
       Values { "None", "Partial", "Full" }]
   uint16 IGPInjection;


};



class UNIX_EGPRouteCalcDependency : CIM_EGPRouteCalcDependency
{

};

