//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2008 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::Capabilities" ), 
    Description ( 
       "Capabilities is an abstract class whose subclasses describe "
       "abilities and/or potential for use. For example, one may "
       "describe the maximum number of VLANs that can be supported on "
       "a system using a subclass of Capabilities. Capabilities are "
       "tied to the elements which they describe using the "
       "ElementCapabilities association. Note that the cardinality of "
       "the ManagedElement reference is Min(1), Max(1). This "
       "cardinality mandates the instantiation of the "
       "ElementCapabilities association for the referenced instance of "
       "Capabilities. ElementCapabilities describes the existence "
       "requirements and context for the referenced instance of "
       "ManagedElement. Specifically, the ManagedElement MUST exist "
       "and provides the context for the Capabilities. Note that "
       "Capabilities do not indicate what IS configured or "
       "operational, but what CAN or CANNOT exist, be defined or be "
       "used. Note that it is possible to describe both supported and "
       "excluded abilities and functions (both capabilities and "
       "limitations) using this class." )]
class CIM_Capabilities : CIM_ManagedElement {

      [Key, Override ( "InstanceID" ), 
       Description ( 
          "Within the scope of the instantiating Namespace, "
          "InstanceID opaquely and uniquely identifies an instance "
          "of this class. In order to ensure uniqueness within the "
          "NameSpace, the value of InstanceID SHOULD be constructed "
          "using the following \'preferred\' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "\':\', and where <OrgID> MUST include a copyrighted, "
          "trademarked or otherwise unique name that is owned by "
          "the business entity creating/defining the InstanceID, or "
          "is a registered ID that is assigned to the business "
          "entity by a recognized global authority (This is similar "
          "to the <Schema Name>_<Class Name> structure of Schema "
          "class names.) In addition, to ensure uniqueness <OrgID> "
          "MUST NOT contain a colon (\':\'). When using this "
          "algorithm, the first colon to appear in InstanceID MUST "
          "appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD "
          "not be re-used to identify different underlying "
          "(real-world) elements. If the above \'preferred\' "
          "algorithm is not used, the defining entity MUST assure "
          "that the resultant InstanceID is not re-used across any "
          "InstanceIDs produced by this or other providers for this "
          "instance\'s NameSpace. \n"
          "For DMTF defined instances, the \'preferred\' algorithm "
          "MUST be used with the <OrgID> set to \'CIM\'." )]
   string InstanceID;

      [Required, Override ( "ElementName" ), 
       Description ( 
          "The user friendly name for this instance of "
          "Capabilities. In addition, the user friendly name can be "
          "used as a index property for a search of query. (Note: "
          "Name does not have to be unique within a namespace.)" )]
   string ElementName;


};


// Copyright (c) 2011 DMTF.  All rights reserved.
   [Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::Device::StorageDevices" ), 
    Description ( 
       "A class derived from CIM_Capabilities that models the "
       "capabilities of a multipath driver. Note that \'path\' in this "
       "context refers to end-to-end device paths (for example, SCSI "
       "initiator/target) with no understanding of edge paths between "
       "interconnect elements such as switches. Load balancing only "
       "applies to symmetric multipath devices or to the ports in "
       "SCSITargetPortGroups in active access state. \n"
       "A driver may support different algorithms for load balancing. "
       "A few common algorithms are listed. Algorithms for specific "
       "device models and software vendor specific algorithms are also "
       "accommodated. \n"
       "\n"
       "An instance of this capabilities class MUST be instantiated "
       "whenever SCSIPathConfigurationService is instantiated and they "
       "MUST be assocaited one to one using ElementCapabilities. "
       "Multiple instances of the service/acapabilities pair MAY exist "
       "if multiple multipath drivers are installed. Each "
       "LogicalDevice subclass served by the underlying multipath "
       "driver is associated to the associated Service instance via "
       "ServiceAvailableToELement." )]
class CIM_SCSIMultipathConfigurationCapabilities : CIM_Capabilities {

      [Description ( 
          "The load balance types supported by the driver for all "
          "logical units on a target device. If \'Product "
          "Specified\' is included, one or more instances of "
          "CIM_Product must be aggregated to the capabilities "
          "instance via ConcreteComponent. Each Product instance "
          "provides the SCSI Vendor, Product, and Revision ID of a "
          "supported product." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "No Load Balancing", 
          "Round Robin", "Least Blocks", "Least IO", "LBA Region", 
          "Product Specific" }, 
       ArrayType ( "Indexed" ), 
       MappingStrings { "MP_API.SNIA|MP_LOAD_BALANCE_TYPE" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.OtherSupportedLoadBalanceAlgorithmNames", 
          "CIM_SCSIMultipathConfigurationCapabilities.OtherSupportedLoadBalanceVendorNames" }]
   uint16 SupportedLoadBalanceTypes[];

      [Description ( 
          "When the corresponding array entry in "
          "SupportedLoadBalanceTypes[] is \'Other\', this entry "
          "provides a string describing the load balancing "
          "algorithm. When the corresponding array entry in "
          "SupportedLoadBalanceTypes[] is \'Product Specific\', "
          "this entry provides a string specifying the SCSI "
          "vendor/product/revision and must be formatted as exactly "
          "28 ASCII characters - 8 for vendor, 16 for product, and "
          "4 for revision (see SCSI SPC Inquiry response)" ), 
       ArrayType ( "Indexed" ), 
       MappingStrings { "SPC.INCITS-T10 |Standard Inquiry Response", 
          "MP_API.SNIA|MP_LOAD_BALANCE_TYPE", 
          "MP_API.SNIA|MP_DEVICE_PRODUCT_PROPERTIES" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.SupportedLoadBalanceTypes", 
          "CIM_SCSIMultipathConfigurationCapabilities.OtherSupportedLoadBalanceVendorNames" }]
   string OtherSupportedLoadBalanceAlgorithmNames[];

      [Description ( 
          "When the corresponding array entry in "
          "SupportedLoadBalanceTypes[] is \'Other\', this entry "
          "provides a string describing the vendor associated with "
          "the load balancing algorithm." ), 
       ArrayType ( "Indexed" ), 
       MappingStrings { "MP_API.SNIA|MP_LOAD_BALANCE_TYPE" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.SupportedLoadBalanceTypes", 
          "CIM_SCSIMultipathConfigurationCapabilities.OtherSupportedLoadBalanceAlgorithmNames" }]
   string OtherSupportedLoadBalanceVendorNames[];

      [Description ( 
          "The capability of the driver to support the SetTPGAccess "
          "method. True if the implementation supports activating "
          "target port groups." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|canSetTPGAccess" }, 
       ModelCorrespondence { 
          "CIM_SCSIPathConfigurationService.SetTPGAccess" }]
   boolean CanSetTPGAccess = false;

      [Description ( 
          "The capability of the driver to support the "
          "SetOverridePath and CancelOverridePaths methods. True if "
          "the implementation supports path overrides." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|canOverridePaths" }, 
       ModelCorrespondence { 
          "CIM_SCSIPathConfigurationService.SetOverridePath" }]
   boolean CanOverridePaths = false;

      [Description ( 
          "False if the MP drivers assure only a single device file "
          "name (e.g. /dev/dsk/...) exists for each MP device. True "
          "if the implementation exposes (or leaves exposed) device "
          "files for the individual paths encapsulated by the "
          "multipath device file. This is typically true for MP "
          "drivers that sit near the top of the driver stack and "
          "false for transport drivers at the bottom of the stack." ), 
       MappingStrings { 
          "MP_API.SNIA|Plugin Properties|exposesPathDeviceFiles" }]
   boolean ExposesPathDeviceFiles;

      [Description ( 
          "A string representing the primary file names the driver "
          "uses for multipath logical units, if those filenames do "
          "not match the names in Logical Unit osDeviceName as "
          "documented in Appendix A of the SNIA MP API "
          "specification. The name is expressing in the following "
          "format: \n"
          "\'*\' represents one or more alphanumeric characters \n"
          "\'#\' represents a string of consecutive digits \n"
          "\'%\' represents a string of hexadecimal digits \n"
          "backslash is an escape character for literal "
          "presentation of *, #, or %. Any other character is "
          "interpreted literally. For example, \'/dev/vx/dmp/*\'. "
          "If the multipath driver creates multipath logical unit "
          "device file names in the same namespace as the OS then "
          "this property should be left null." ), 
       MaxLen ( 256 ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|deviceNameFilespace" }]
   string DeviceNameFilespace;

      [Description ( 
          "True if the only supported device types are those "
          "described in aggregated CIM_Product instances as "
          "described in the description of "
          "SupportedLoadBalanceTypes." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|deviceNameFilespace" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.SupportedLoadBalanceTypes" }]
   boolean OnlySupportsSpecifiedProducts = false;

      [Description ( 
          "Describes the range of administer settable path weights "
          "supported by the driver. A driver with no path "
          "preference capabilities should set this property to "
          "zero. A driver with the ability to enable/disable paths "
          "should set this property to 1. Drivers with more weight "
          "settings can set the property appropriately." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|maximumWeight" }]
   uint32 MaximumWeight;

      [Description ( 
          "Specifies whether the implementation supports "
          "auto-failback (to re-enable paths that revert to a good "
          "state) at the plugin level, the multipath logical unit "
          "level, both levels or whether auto-failback is "
          "unsupported." ), 
       ValueMap { "0", "2", "3", "4", "5" }, 
       Values { "Unknown", "No Autofailback support", 
          "Autofailback support service-wide", 
          "Autofailback support per logical unit", 
          "Autofailback support per service or logical unit" }, 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|autofailbackSupport" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.AutofailbackEnabled", 
          "CIM_SCSIMultipathSettings.AutofailbackEnabled" }]
   uint16 AutofailbackSupport;

      [Description ( 
          "A Boolean indicating that autofailback is enabled to all "
          "logical units associated to the "
          "CIM_SCSIPathConfigurationService associated with this "
          "capabilities instance (unless overridden by "
          "CIM_SCSIMultipathSettings AutoFailbackEnabled." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|autoFailbackEnabled" }, 
       ModelCorrespondence { 
          "CIM_SCSIMultipathConfigurationCapabilities.AutofailbackSupport", 
          "CIM_SCSIMultipathSettings.AutofailbackEnabled" }]
   boolean AutoFailbackEnabled;

      [Description ( 
          "The maximum polling rate (in seconds) supported by the "
          "driver. A value of zero indicates the driver/plugin does "
          "not support polling. This maximum applies to both "
          "BadPathPollingRate and InactivePathPollingRate." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|pollingRateMax" }]
   uint32 PollingRateMax;

      [Write, Description ( 
          "The current rate in seconds. Only valid when "
          "pollingRateMax is greater than 0 and canAutoFailback are "
          "true." ), 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|currentPollingRate" }]
   uint32 CurrentPollingRate;

      [Write, Description ( 
          "The load balance types supported by the driver if not "
          "overridden by an administrative action." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6" }, 
       Values { "Unknown", "Other", "No Load Balancing", 
          "Round Robin", "Least Blocks", "Least IO", 
          "Product Specific" }, 
       MappingStrings { 
          "MP_API.SNIA|MP_PLUGIN_PROPERTIES|defaultLoadBalanceType" }]
   uint16 DefaultLoadBalanceType;


};



class UNIX_SCSIMultipathConfigurationCapabilities : CIM_SCSIMultipathConfigurationCapabilities
{

};

