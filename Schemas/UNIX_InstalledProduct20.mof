//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////


// Copyright (c) 2009 DMTF.  All rights reserved.
   [Abstract, Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( 
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema." )]
class CIM_ManagedElement {

      [Description ( 
          "InstanceID is an optional property that may be used to "
          "opaquely and uniquely identify an instance of this class "
          "within the scope of the instantiating Namespace. Various "
          "subclasses of this class may override this property to "
          "make it required, or a key. Such subclasses may also "
          "modify the preferred algorithms for ensuring uniqueness "
          "that are defined below.\n"
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon "
          "(:), and where <OrgID> must include a copyrighted, "
          "trademarked, or otherwise unique name that is owned by "
          "the business entity that is creating or defining the "
          "InstanceID or that is a registered ID assigned to the "
          "business entity by a recognized global authority. (This "
          "requirement is similar to the <Schema Name>_<Class Name> "
          "structure of Schema class names.) In addition, to ensure "
          "uniqueness, <OrgID> must not contain a colon (:). When "
          "using this algorithm, the first colon to appear in "
          "InstanceID must appear between <OrgID> and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should "
          "not be reused to identify different underlying "
          "(real-world) elements. If not null and the above "
          "\"preferred\" algorithm is not used, the defining entity "
          "must assure that the resulting InstanceID is not reused "
          "across any InstanceIDs produced by this or other "
          "providers for the NameSpace of this instance. \n"
          "If not set to null for DMTF-defined instances, the "
          "\"preferred\" algorithm must be used with the <OrgID> "
          "set to CIM." )]
   string InstanceID;

      [Description ( 
          "The Caption property is a short textual description "
          "(one- line string) of the object." ), 
       MaxLen ( 64 )]
   string Caption;

      [Description ( 
          "The Description property provides a textual description "
          "of the object." )]
   string Description;

      [Description ( 
          "A user-friendly name for the object. This property "
          "allows each instance to define a user-friendly name in "
          "addition to its key properties, identity data, and "
          "description information. \n"
          "Note that the Name property of ManagedSystemElement is "
          "also defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the "
          "same property can convey both identity and a "
          "user-friendly name, without inconsistencies. Where Name "
          "exists and is not a Key (such as for instances of "
          "LogicalDevice), the same information can be present in "
          "both the Name and ElementName properties. Note that if "
          "there is an associated instance of "
          "CIM_EnabledLogicalElementCapabilities, restrictions on "
          "this properties may exist as defined in ElementNameMask "
          "and MaxElementNameLen properties defined in that class." )]
   string ElementName;


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Abstract, Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Core::Collection" ), 
    Description ( 
       "Collection is an abstract class that provides a common "
       "superclass for data elements that represent collections of "
       "ManagedElements and its subclasses." )]
class CIM_Collection : CIM_ManagedElement {


};


// Copyright (c) 2005 DMTF.  All rights reserved.
   [Version ( "2.6.0" ), 
    UMLPackagePath ( "CIM::Application::InstalledProduct" ), 
    Description ( 
       "The InstalledProduct object allows the grouping of "
       "SoftwareFeatures and SoftwareElements that represent the "
       "result of the installation of a purchased Product. "
       "InstalledProduct is defined to be Weak to a Product. \n"
       "Often, Products are purchased once but may be installed "
       "several times in different locations on one or more systems. "
       "All of the SoftwareElements and SoftwareFeatures of a single "
       "install are grouped by an instance of InstalledProduct. These "
       "are defined using the associations, CollectedSoftwareFeatures "
       "and Collected SoftwareElements." )]
class CIM_InstalledProduct : CIM_Collection {

      [Key, Description ( "The scoping Product\'s identification." ), 
       MaxLen ( 64 ), 
       Propagated ( "CIM_Product.IdentifyingNumber" )]
   string ProductIdentifyingNumber;

      [Key, Description ( 
          "The scoping Product\'s commonly used name." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_Product.Name" )]
   string ProductName;

      [Key, Description ( "The scoping Product\'s name." ), 
       MaxLen ( 256 ), 
       Propagated ( "CIM_Product.Vendor" )]
   string ProductVendor;

      [Key, Description ( 
          "The scoping Product\'s version information." ), 
       MaxLen ( 64 ), 
       Propagated ( "CIM_Product.Version" )]
   string ProductVersion;

      [Key, Description ( 
          "The identifying information of the System (ie, the "
          "instance) on which the Product is installed. If the "
          "System is not known, this property returns NULL. If the "
          "System is known and represented in CIM, the property "
          "contains the namespace and model paths of the instance, "
          "encoded as a string parameter. If known but not "
          "represented in CIM, the property contains some "
          "identifying string that names the System on which the "
          "Product is installed." ), 
       MaxLen ( 256 )]
   string SystemID;

      [Key, Description ( 
          "The identification of the InstalledProduct object. This "
          "key can be used to differentiate between Product "
          "installations and could include the installation "
          "location." ), 
       MaxLen ( 256 )]
   string CollectionID;

      [Description ( 
          "The Name property defines the label by which the object "
          "is known to the world, outside the data processing "
          "system. This label is a human-readable name that "
          "uniquely identifies the element in the context of the "
          "element\'s namespace." ), 
       MaxLen ( 256 )]
   string Name;


};



class UNIX_InstalledProduct : CIM_InstalledProduct
{

};

